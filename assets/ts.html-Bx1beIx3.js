import{_ as n,c as s,o as a,a as p}from"./app-BrW2q7b4.js";const e={},t=p(`<h1 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript"><span><a href="https://juejin.im/post/5d0259f2518825405d15ae62#heading-17" target="_blank" rel="noopener noreferrer">typescript</a></span></a></h1><h2 id="ts-使用" tabindex="-1"><a class="header-anchor" href="#ts-使用"><span>ts 使用</span></a></h2><blockquote><p>npm install -g typescript</p><p>tsc test.ts</p></blockquote><p>对 .ts 文件进行编译，编译成功后可以看到在同级目录下生成了一个 test.js 文件。</p><h3 id="基本类型" tabindex="-1"><a class="header-anchor" href="#基本类型"><span>基本类型</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> <span class="token literal-property property">flag</span><span class="token operator">:</span>boolean<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">num</span><span class="token operator">:</span>number<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">str</span><span class="token operator">:</span>string<span class="token operator">=</span><span class="token string">&quot;哈哈&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">arr</span><span class="token operator">:</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">arr</span><span class="token operator">:</span>Array<span class="token operator">&lt;</span>number<span class="token punctuation">,</span>string<span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">//readonly vs const</span></span>
<span class="line"><span class="token comment">//最简单判断该用readonly还是const的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 const，若做为属性则使用readonly。</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">ro</span><span class="token operator">:</span> ReadonlyArray<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span> <span class="token operator">=</span> a<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 联合类型</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token literal-property property">val</span><span class="token operator">:</span>string<span class="token operator">|</span>number</span>
<span class="line">val <span class="token operator">=</span> <span class="token number">12</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;数字为 &quot;</span><span class="token operator">+</span> val<span class="token punctuation">)</span></span>
<span class="line">val <span class="token operator">=</span> <span class="token string">&quot;Runoob&quot;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;字符串为 &quot;</span> <span class="token operator">+</span> val<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//元组tuple，数组的一种,数组中每一个值弄个类型</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">arr</span><span class="token operator">:</span><span class="token punctuation">[</span>number<span class="token punctuation">,</span>string<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">&#39;this&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">arr</span><span class="token operator">:</span>any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">&#39;sdf&#39;</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">//枚举，用自然语言string来表示一个数值，且能够在指定了数值后往后递增</span></span>
<span class="line"><span class="token keyword">enum</span> flag<span class="token operator">=</span><span class="token punctuation">{</span></span>
<span class="line">    success<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    error<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">    emmm</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">s</span><span class="token operator">:</span>flag<span class="token operator">=</span>flag<span class="token punctuation">.</span>error<span class="token comment">//2</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">s</span><span class="token operator">:</span>flag<span class="token operator">=</span>flag<span class="token punctuation">.</span>emmm<span class="token comment">//3</span></span>
<span class="line"><span class="token comment">//任意类型</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">num</span><span class="token operator">:</span>any<span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">num</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//可以是number也可以是undefined</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">num</span><span class="token operator">:</span>number<span class="token operator">|</span><span class="token keyword">undefined</span><span class="token operator">|</span><span class="token keyword">null</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;sdf&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// as断言</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">strLength</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> someValue<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">strLength</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token punctuation">(</span>someValue <span class="token keyword">as</span> string<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//undefined或null</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">a</span><span class="token operator">:</span>never<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span>string<span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span>nnumber</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">string</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&#39;name&#39;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//age参数可传可不传，可选参数必须放到最后面，默认参数同es6</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">getInfo</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">nae</span><span class="token operator">:</span>string<span class="token punctuation">,</span>age<span class="token operator">?</span><span class="token operator">:</span>number<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token operator">...</span>res<span class="token operator">:</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token operator">:</span>string<span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&#39;asdf&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="封装" tabindex="-1"><a class="header-anchor" href="#封装"><span>封装</span></a></h2><p>数据只能通过公共方法访问，从而使私有字段及其实现对外部类隐藏</p><ul><li>public: 公有 在类里面，子类，类外面都可访问，默认属性</li><li>protected: 保护类型，在类里面，子类可访问,外部不可</li><li>private：私有，在类里面可以访问，子类，类外都不能访问</li></ul><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h2><p>Java 继承，一个类获取另一个类的属性（数据成员）和功能（方法）的过程称为继承。</p><ul><li>派生类继承声明为 public 或 protected 的所有成员和方法。</li><li>私有成员只能在自己的类中访问。只能使用公共或受保护的超类获取器和设置器方法访问此类私有成员</li></ul><h2 id="多态" tabindex="-1"><a class="header-anchor" href="#多态"><span>多态</span></a></h2><p>多态分为静态多态和动态多态</p><ol><li><code>静态多态</code>又称编译时多态，例如 Java 中的<code>方法重载</code> ，是指同一个方法名，不同参数，根据参数决定不同方法。 <ul><li>参数列表中的参数数量不同</li><li>参数的数据类型的差异</li><li>参数的数据类型顺序</li></ul></li><li><code>动态多态</code>又称运行时多态，例如 Java 中的<code>方法覆盖</code>。声明子类中已经存在于父类中的方法称为方法覆盖</li></ol><p>Java 实现多态有三个必要条件：继承、重写、向上转型。</p><ul><li>继承：在多态中必须存在有继承关系的子类和父类。</li><li>重写：子类对父类中某些方法进行重新定义，在调用这些方法时就会调用子类的方法。</li><li>向上转型：在多态中需要将子类的引用赋给父类对象，只有这样该引用才能够具备技能调用父类的方法和子类的方法。</li></ul><h2 id="抽象类" tabindex="-1"><a class="header-anchor" href="#抽象类"><span>抽象类</span></a></h2><ul><li>使用 abstract 关键字声明的类称为抽象类。</li><li>它可以有抽象方法（没有主体的方法）以及具体方法（常规方法与主体）。普通类（非抽象类）不能有抽象方法。</li><li>抽象类不能实例化，不能创建它的对象</li><li>抽象类概述了方法，但未必实现所有方法</li><li>抽象类一次只能扩展一个类或一个抽象类</li><li>接口只能有抽象方法，它们不能有具体方法</li></ul><h2 id="接口-interface" tabindex="-1"><a class="header-anchor" href="#接口-interface"><span>接口-interface</span></a></h2><ul><li>类 implements 接口,接口 extends 另一个接口</li><li>所有接口方法默认为 abstract 和 public</li><li>接口中声明的变量默认为 public，static 和 final</li><li>接口变量必须在声明时初始化，否则编译器将抛出错误</li><li>类可以实现任何数量的接口</li><li>在 java 中，不允许多重继承 ，但是您可以使用接口来使用它，因为您可以实现多个接口。</li></ul><h2 id="基于类的继承和基于原型的继承的区别" tabindex="-1"><a class="header-anchor" href="#基于类的继承和基于原型的继承的区别"><span>基于类的继承和基于原型的继承的区别</span></a></h2><table><thead><tr><th>基于类的继承</th><th>原型继承</th></tr></thead><tbody><tr><td>类是不可变的。在运行时，你无法修改或者添加新的方法</td><td>原型是灵活的。它们可以是不可变的也可以是可变的</td></tr><tr><td>类可能会不支持多重继承</td><td>对象可以继承多个原型对象</td></tr><tr><td>基于类的继承比较复杂。你需要使用抽象类，接口和 final 类等等</td><td>原型继承比较简洁。你只有对象，你只需要对对象进行扩展就可以了</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 方法重载</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">filterPersons</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token literal-property property">persons</span><span class="token operator">:</span> Person<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">personType</span><span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">criteria</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> Admin<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">filterPersons</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token literal-property property">persons</span><span class="token operator">:</span> Person<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">personType</span><span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">criteria</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">filterPersons</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token parameter"><span class="token literal-property property">persons</span><span class="token operator">:</span> Person<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">personType</span><span class="token operator">:</span> string<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">criteria</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token punctuation">,</span></span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> persons</span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">person</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> person<span class="token punctuation">.</span>type <span class="token operator">===</span> personType<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">person</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> criteriaKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>criteria<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token punctuation">(</span>keyof Person<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> criteriaKeys<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fieldName</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> person<span class="token punctuation">[</span>fieldName<span class="token punctuation">]</span> <span class="token operator">===</span> criteria<span class="token punctuation">[</span>fieldName<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">usersOfAge23</span><span class="token operator">:</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">filterPersons</span><span class="token punctuation">(</span>persons<span class="token punctuation">,</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">adminsOfAge23</span><span class="token operator">:</span> Admin<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">filterPersons</span><span class="token punctuation">(</span>persons<span class="token punctuation">,</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 类型保护</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">isAdmin</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">person</span><span class="token operator">:</span> Person</span><span class="token punctuation">)</span><span class="token operator">:</span> person is Admin <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> person<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;role&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Web</span> <span class="token keyword">extends</span> <span class="token class-name">Persron</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span>string</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>string<span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&#39;string&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span><span class="token operator">:</span>公有  在类里面，子类，类外面都可访问，默认属性</span>
<span class="line">    <span class="token keyword">protected</span><span class="token operator">:</span>保护类型，在类里面，子类可访问<span class="token punctuation">,</span>外部不可</span>
<span class="line">    <span class="token keyword">private</span>：私有，在类里面可以访问，子类，类外都不能访问</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">let</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">a<span class="token punctuation">.</span>name<span class="token comment">//访问不到</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">//继承了抽象类的class必须有这些抽象方法</span></span>
<span class="line">abstract <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span></span>
<span class="line">    abstract <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>any<span class="token punctuation">;</span><span class="token comment">//抽象方法和抽象类，抽象方法必须在抽象类里面，抽象类必须有抽象方法</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">animal</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 类型别名</span></span>
<span class="line">type Name <span class="token operator">=</span> string<span class="token punctuation">;</span></span>
<span class="line">type <span class="token function-variable function">NameResolver</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> string<span class="token punctuation">;</span></span>
<span class="line">type NameOrResolver <span class="token operator">=</span> Name <span class="token operator">|</span> NameResolver<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">n</span><span class="token operator">:</span> NameOrResolver</span><span class="token punctuation">)</span><span class="token operator">:</span> Name <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> n <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> n<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">//interface 和 type 都可以拓展，并且两者并不是相互独立的，也就是说interface可以 extends type, type 也可以 extends interface 。 虽然效果差不多，但是两者语法不同。</span></span>
<span class="line"></span>
<span class="line">type 可以声明基本类型别名，联合类型，元组等类型</span>
<span class="line"><span class="token comment">//type extends type</span></span>
<span class="line">type Name <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">type User <span class="token operator">=</span> Name <span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> number  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//type extends interface</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Name</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">type User <span class="token operator">=</span> Name <span class="token operator">&amp;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">//方法接口</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">ConfigFn</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span>value1<span class="token operator">:</span>string<span class="token punctuation">,</span><span class="token literal-property property">value2</span><span class="token operator">:</span>string<span class="token punctuation">)</span><span class="token operator">:</span>string</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token literal-property property">setData</span><span class="token operator">:</span><span class="token function-variable function">Config</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//泛型接口</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">configFn</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>value<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token literal-property property">getData</span><span class="token operator">:</span><span class="token function-variable function">config</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>value<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> <span class="token literal-property property">myGetData</span><span class="token operator">:</span>ConfigFn<span class="token operator">&lt;</span>string<span class="token operator">&gt;=</span>getdata；</span>
<span class="line"></span>
<span class="line">getData<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">SquareConfig</span> <span class="token punctuation">{</span></span>
<span class="line">    color<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span></span>
<span class="line">    width<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">[</span>propName<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> any<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> squareOptions <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">colour</span><span class="token operator">:</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> mySquare <span class="token operator">=</span> <span class="token function">createSquare</span><span class="token punctuation">(</span>squareOptions<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">SearchFunc</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">(</span>source<span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">subString</span><span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//可索引接口：对数组，对象的约束</span></span>
<span class="line"><span class="token keyword">interface</span><span class="token operator">:</span>UserArr<span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span>index<span class="token operator">:</span>number<span class="token punctuation">]</span><span class="token operator">:</span>string</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token literal-property property">arr</span><span class="token operator">:</span>UserAr<span class="token punctuation">[</span><span class="token string">&#39;111&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;12&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">//类类型接口</span></span>
<span class="line"><span class="token keyword">interface</span><span class="token operator">:</span>Animal<span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span>string<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">eat</span><span class="token punctuation">(</span>str<span class="token operator">:</span>string<span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// implements限制当前类的结构，Dog类必须满足animal接口,限制结构</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Dog</span> implents Animal<span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span>string<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//通过extends实现接口扩展，继承</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">web</span> implents Person<span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token literal-property property">name</span><span class="token operator">:</span>string<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span>string</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//泛型</span></span>
<span class="line"><span class="token comment">//any放弃了类型检查，我们要实现，传入什么返回什么，</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> getData<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>value<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> value</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">getData<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span></span>
<span class="line">getData<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MinClass</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token literal-property property">list</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token literal-property property">list</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span>num<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口继承类</p><ul><li>接口继承了一个类类型时，会继承类的成员但不包括其实现。 接口同样会继承到类的 private 和 protected 成员。</li><li>当你创建了一个接口继承了一个拥有私有或受保护的成员的类时，这个接口类型只能被这个类或其子类所实现（implement）。</li></ul><p>继承类</p><ul><li>派生类包含了一个构造函数，它 必须调用 super()，它会执行基类的构造函数。 而且，在构造函数里访问 this 的属性之前，我们一定要调用 super()。 这个是 TypeScript 强制执行的一条重要规则。</li></ul><h2 id="声明文件" tabindex="-1"><a class="header-anchor" href="#声明文件"><span>声明文件</span></a></h2><ul><li>通常我们会把声明语句放到一个单独的文件（jQuery.d.ts）中，这就是声明文件。例如 jquery 的声明文件 <blockquote><p>// src/jQuery.d.ts</p><p>declare var jQuery: (selector: string) =&gt; any;</p></blockquote></li><li>一般来说，ts 会解析项目中所有的 _.ts 文件，当然也包含以 .d.ts 结尾的文件。所以当我们将 jQuery.d.ts 放到项目中时，其他所有 _.ts 文件就都可以获得 jQuery 的类型定义了。</li><li>我们可以直接下载下来使用，但是更推荐的是使用 @types 统一管理第三方库的声明文件。</li><li>@types 的使用方式很简单，直接用 npm 安装对应的声明模块即可，以 jQuery 举例： <blockquote><p>npm install @types/jquery --save-dev</p></blockquote></li></ul><h2 id="命名空间" tabindex="-1"><a class="header-anchor" href="#命名空间"><span>命名空间</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">namespace Food <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">export</span> type <span class="token constant">A</span> <span class="token operator">=</span> Window<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Fruits</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">taste</span><span class="token operator">:</span> string<span class="token punctuation">;</span></span>
<span class="line">        <span class="token literal-property property">hardness</span><span class="token operator">:</span> number<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Meat</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">taste</span><span class="token operator">:</span> string<span class="token punctuation">;</span></span>
<span class="line">        <span class="token literal-property property">heat</span><span class="token operator">:</span> number<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 使用</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">meat</span><span class="token operator">:</span> Food<span class="token punctuation">.</span>Meat<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">fruits</span><span class="token operator">:</span> Food<span class="token punctuation">.</span>Fruits<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="interface-和-type-类型别名" tabindex="-1"><a class="header-anchor" href="#interface-和-type-类型别名"><span>interface 和 type(类型别名)</span></a></h3><p>interface 和 type 很像，很多场景，两者都能使用。但也有细微的差别：</p><ul><li>类型：对象、函数两者都适用，但是 type 可以用于基础类型、联合类型、元祖。</li><li>同名合并：interface 支持，type 不支持。</li><li>计算属性：type 支持, interface 不支持。 总的来说，公共的用 interface 实现，不能用 interface 实现的再用 type 实现。</li></ul><h3 id="映射" tabindex="-1"><a class="header-anchor" href="#映射"><span>映射</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">/*</span>
<span class="line">type计算属性，生成映射类型</span>
<span class="line">type 能使用 in 关键字生成映射类型，但 interface 不行。</span>
<span class="line"></span>
<span class="line">语法与索引签名的语法类型，内部使用了 for .. in。 具有三个部分：</span>
<span class="line"></span>
<span class="line">类型变量 K，它会依次绑定到每个属性。</span>
<span class="line">字符串字面量联合的 Keys，它包含了要迭代的属性名的集合。</span>
<span class="line">属性的结果类型。</span>
<span class="line">*/</span></span>
<span class="line">type Keys <span class="token operator">=</span> <span class="token string">&quot;firstname&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;surname&quot;</span></span>
<span class="line"></span>
<span class="line">type DudeType <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span>key <span class="token keyword">in</span> Keys<span class="token punctuation">]</span><span class="token operator">:</span> string</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">test</span><span class="token operator">:</span> DudeType <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">firstname</span><span class="token operator">:</span> <span class="token string">&quot;Pawel&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">surname</span><span class="token operator">:</span> <span class="token string">&quot;Grzybek&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 将传入的属性变为只读选项</span></span>
<span class="line">type Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    readonly <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> keyof <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 将传入的属性变为可选项：keyof T 拿到 T 所有属性名, 然后 in 进行遍历, 将值赋给 P, 最后 T[P] 取得相应属性的值.</span></span>
<span class="line">type Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> keyof <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//TypeScript内置了Readonly和Partial，所以不需要手动声明实现。除此之外，还有其他常用的内置类型如：</span></span>
<span class="line">type PersonPartial <span class="token operator">=</span> Partial<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line">type ReadonlyPerson <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//Record</span></span>
<span class="line"><span class="token comment">//将K中的所有属性的值转化为T类型：</span></span>
<span class="line"><span class="token comment">// type Criteria = {</span></span>
<span class="line"><span class="token comment">//     [K in keyof User]?: User[K]</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line">type Record<span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name">keyof</span> any<span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//Pick</span></span>
<span class="line">从 <span class="token constant">T</span> 中取出 一系列 <span class="token constant">K</span> 的属性</span>
<span class="line">type Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//Required</span></span>
<span class="line">将传入的属性变为必选项</span>
<span class="line">type Required<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> keyof <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="练习" tabindex="-1"><a class="header-anchor" href="#练习"><span>练习</span></a></h3><ul><li>涉及泛型 as const</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span></span>
<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span></span>
<span class="line">    <span class="token literal-property property">occupation</span><span class="token operator">:</span> string<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Admin</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span></span>
<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">logUser</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">user</span><span class="token operator">:</span> User</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> pos <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> - #</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pos<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> User: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>chalk<span class="token punctuation">.</span><span class="token function">green</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token punctuation">.</span>occupation<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">logAdmin</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">admin</span><span class="token operator">:</span> Admin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> pos <span class="token operator">=</span> admins<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>admin<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> - #</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pos<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> Admin: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>chalk<span class="token punctuation">.</span><span class="token function">green</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>admin<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>admin<span class="token punctuation">.</span>role<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">admins</span><span class="token operator">:</span> Admin<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Will Bruces&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&#39;Overseer&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Steve&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&#39;Steve&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">users</span><span class="token operator">:</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Moses&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">70</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">occupation</span><span class="token operator">:</span> <span class="token string">&#39;Desert guide&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Superman&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">occupation</span><span class="token operator">:</span> <span class="token string">&#39;Ordinary person&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> swap<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span><span class="token constant">K</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>v1<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token literal-property property">v2</span><span class="token operator">:</span><span class="token constant">K</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span>v2<span class="token punctuation">,</span> v1<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">yellow</span><span class="token punctuation">(</span><span class="token string">&#39;test1:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>secondUser<span class="token punctuation">,</span> firstAdmin<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">swap</span><span class="token punctuation">(</span>admins<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> users<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">logUser</span><span class="token punctuation">(</span>secondUser<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">logAdmin</span><span class="token punctuation">(</span>firstAdmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="null-和-undefined" tabindex="-1"><a class="header-anchor" href="#null-和-undefined"><span>Null 和 Undefined</span></a></h2><p>在 TypeScript 中，可以使用 null 和 undefined 来定义这两个原始数据类型：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> <span class="token literal-property property">u</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">与 <span class="token keyword">void</span> 的区别是，<span class="token keyword">undefined</span> 和 <span class="token keyword">null</span> 是所有类型的子类型。也就是说 <span class="token keyword">undefined</span> 类型的变量，可以赋值给 number 类型的变量：</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 这样不会报错</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">num</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 这样也不会报错</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">u</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">num</span><span class="token operator">:</span> number <span class="token operator">=</span> u<span class="token punctuation">;</span></span>
<span class="line">而 <span class="token keyword">void</span> 类型的变量不能赋值给 number 类型的变量：</span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">u</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">num</span><span class="token operator">:</span> number <span class="token operator">=</span> u<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Type &#39;void&#39; is not assignable to type &#39;number&#39;.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> myFavoriteNumber <span class="token operator">=</span> <span class="token string">&#39;seven&#39;</span><span class="token punctuation">;</span></span>
<span class="line">myFavoriteNumber <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// index.ts(2,1): error TS2322: Type &#39;number&#39; is not assignable to type &#39;string&#39;.</span></span>
<span class="line">事实上，它等价于：</span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">myFavoriteNumber</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">&#39;seven&#39;</span><span class="token punctuation">;</span></span>
<span class="line">myFavoriteNumber <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// index.ts(2,1): error TS2322: Type &#39;number&#39; is not assignable to type &#39;string&#39;.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>(初始化即赋值-&gt; 根据初始化的值类型推论)</li><li>(初始化无赋值-&gt; 定义为 any 类型)</li></ul><h2 id="访问联合类型的属性或方法" tabindex="-1"><a class="header-anchor" href="#访问联合类型的属性或方法"><span>访问联合类型的属性或方法</span></a></h2><p>当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">something</span><span class="token operator">:</span> string <span class="token operator">|</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> something<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// index.ts(2,22): error TS2339: Property &#39;length&#39; does not exist on type &#39;string | number&#39;.</span></span>
<span class="line"><span class="token comment">//   Property &#39;length&#39; does not exist on type &#39;number&#39;.</span></span>
<span class="line">上例中，length 不是 string 和 number 的共有属性，所以会报错。</span>
<span class="line"></span>
<span class="line">访问 string 和 number 的共有属性是没问题的：</span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">something</span><span class="token operator">:</span> string <span class="token operator">|</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> something<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">联合类型的变量在被赋值的时候，会根据类型推论的规则推断出一个类型：</span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">myFavoriteNumber</span><span class="token operator">:</span> string <span class="token operator">|</span> number<span class="token punctuation">;</span></span>
<span class="line">myFavoriteNumber <span class="token operator">=</span> <span class="token string">&#39;seven&#39;</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myFavoriteNumber<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span></span>
<span class="line">myFavoriteNumber <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myFavoriteNumber<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 编译时报错</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// index.ts(5,30): error TS2339: Property &#39;length&#39; does not exist on type &#39;number&#39;.</span></span>
<span class="line">上例中，第二行的 myFavoriteNumber 被推断成了 string，访问它的 length 属性不会报错。</span>
<span class="line"></span>
<span class="line">而第四行的 myFavoriteNumber 被推断成了 number，访问它的 length 属性时就报错了。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,51),l=[t];function o(c,i){return a(),s("div",null,l)}const u=n(e,[["render",o],["__file","ts.html.vue"]]),k=JSON.parse('{"path":"/JS/ts.html","title":"typescript","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"ts 使用","slug":"ts-使用","link":"#ts-使用","children":[{"level":3,"title":"基本类型","slug":"基本类型","link":"#基本类型","children":[]}]},{"level":2,"title":"封装","slug":"封装","link":"#封装","children":[]},{"level":2,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":2,"title":"多态","slug":"多态","link":"#多态","children":[]},{"level":2,"title":"抽象类","slug":"抽象类","link":"#抽象类","children":[]},{"level":2,"title":"接口-interface","slug":"接口-interface","link":"#接口-interface","children":[]},{"level":2,"title":"基于类的继承和基于原型的继承的区别","slug":"基于类的继承和基于原型的继承的区别","link":"#基于类的继承和基于原型的继承的区别","children":[]},{"level":2,"title":"声明文件","slug":"声明文件","link":"#声明文件","children":[]},{"level":2,"title":"命名空间","slug":"命名空间","link":"#命名空间","children":[{"level":3,"title":"interface 和 type(类型别名)","slug":"interface-和-type-类型别名","link":"#interface-和-type-类型别名","children":[]},{"level":3,"title":"映射","slug":"映射","link":"#映射","children":[]},{"level":3,"title":"练习","slug":"练习","link":"#练习","children":[]}]},{"level":2,"title":"Null 和 Undefined","slug":"null-和-undefined","link":"#null-和-undefined","children":[]},{"level":2,"title":"访问联合类型的属性或方法","slug":"访问联合类型的属性或方法","link":"#访问联合类型的属性或方法","children":[]}],"git":{"updatedTime":1717649313000,"contributors":[{"name":"Liu Jia","email":"41950983+liujia6@users.noreply.github.com","commits":1}]},"filePathRelative":"JS/ts.md"}');export{u as comp,k as data};
