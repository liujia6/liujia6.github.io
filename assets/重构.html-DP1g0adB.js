import{_ as n,c as s,o as a,a as l}from"./app-CVfBBX0w.js";const i={},p=l(`<h1 id="重构" tabindex="-1"><a class="header-anchor" href="#重构"><span>重构</span></a></h1><p>是什么： 使用一系列重构手法，在不改变软件可观察行为的前提下调整结构</p><ol><li>好代码的检验标准就是人们是否能轻而易举地修改它</li></ol><h2 id="代码的坏味道" tabindex="-1"><a class="header-anchor" href="#代码的坏味道"><span>代码的坏味道</span></a></h2><ol><li><p>命名</p></li><li><p>重复代码</p></li><li><p>过长函数</p></li><li><p>过长参数列表</p></li><li><p>全局数据：代码的任何一个地方都可以改变它，并且探测不到它在哪里有改变</p><ul><li>封装函数修改变量，可以知道哪里修改了改变量，可以封装一个类</li></ul></li><li><p>可变数据</p><ul><li>函数式编程 <ul><li>如果要更新一个数据，就 i 返回一个新的数据副本，旧的数据保持不变</li></ul></li><li>如果一个变量在不同时候用于存储不用的东西，则可以使用<code>拆分变量</code>将其拆分为各自不同用途的变量，避免危险的更新操作</li></ul></li><li><p>发散式变化</p><ul><li>每次只关心一个上下文，也即：一个逻辑只涉及一个地方。修改一个逻辑的时候不需要了解其他的逻辑。每次只关心一个。</li><li>修改：使用拆分阶段或者搬移函数拆分开来</li></ul></li><li><p>散弹式修改</p><ul><li>与发散式变化相反。一个逻辑修改需要在许多不同的类或者函数中修改：即拆分的太细了</li><li>修改：去除多余的函数或者类，内联函数，内联类</li></ul></li><li><p>依恋情结</p><ul><li>模块之间的交互比模块内的交互多</li><li>修改：将总是一起变化的东西放在一块。数据和引用这些数据的行为总是一起变化的</li></ul></li><li><p>数据泥团</p><ul><li>总是有一组经常出现的数据，都拆分了</li><li>修改：将它们用对象包装起来 page、size =&gt; list:{ page,size }</li></ul></li><li><p>基本类型偏执</p></li><li><p>重复的 switch</p><ul><li>当你想增加一个选择分支时，必须找到所有的 switch，并逐一更新。</li><li>修改：以多态取代条件表达式</li></ul></li><li><p>循环语句</p><ul><li><p>修改：</p><ul><li><p>使用管道取代循环</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> loopItems <span class="token operator">=</span> lines</span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">line</span> <span class="token operator">=&gt;</span> line<span class="token punctuation">.</span>trim <span class="token operator">!==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">line</span> <span class="token operator">=&gt;</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 取代循环中的各种判断和操作</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li><li><p>赘余的元素</p><ul><li>没必要的类</li></ul></li><li><p>夸夸其谈通用性</p><ul><li>为没必要的扩展性考虑，添加没必要的处理</li></ul></li><li><p>临时字段</p></li><li><p>过长的消息链</p><ul><li><p>用户向一个对象请求另一个对象，再向后者请求另一个对象，然后再。。。</p></li><li><p>修改：隐藏委托关系</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">manager <span class="token operator">=</span> aPerson<span class="token punctuation">.</span>department<span class="token punctuation">.</span>manager<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// =&gt; manager = aPerson.manager</span></span>
<span class="line"><span class="token comment">// aPerson.manager = aPerson.departmant.manager</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>中间人</p><ul><li>过分运用委托，中间人不干实事</li><li>修改：移除中间人，使用内联函数</li></ul></li><li><p>内幕交易</p><ul><li>模块之间大量交换数据</li><li>修改： <ul><li>搬移需要的函数、字段到模块</li><li>提炼类、中间人、隐藏委托关系</li></ul></li></ul></li><li><p>过大的类</p></li><li><p>异曲同工的类</p></li><li><p>纯数据类</p><ul><li>类只是作为控制访问读写某些字段的函数，数据容器</li></ul></li></ol>`,5),e=[p];function t(c,o){return a(),s("div",null,e)}const r=n(i,[["render",t],["__file","重构.html.vue"]]),d=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B/%E9%87%8D%E6%9E%84.html","title":"重构","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"代码的坏味道","slug":"代码的坏味道","link":"#代码的坏味道","children":[]}],"git":{"updatedTime":1717649313000,"contributors":[{"name":"Liu Jia","email":"41950983+liujia6@users.noreply.github.com","commits":1}]},"filePathRelative":"编程/重构.md"}');export{r as comp,d as data};
