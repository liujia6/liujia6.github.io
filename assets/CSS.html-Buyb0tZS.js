import{_ as n,c as s,o as a,a as e}from"./app-BrW2q7b4.js";const l={},t=e(`<h2 id="替换元素与非替换元素" tabindex="-1"><a class="header-anchor" href="#替换元素与非替换元素"><span>替换元素与非替换元素</span></a></h2><p>大部分元素，页面上显示的结果，取决于元素内容，称为<strong>非可替换元素</strong></p><p>少部分元素，页面上显示的结果，取决于元素属性，成为<strong>可替换元素</strong> 例如 img video audio</p><h2 id="position-属性的五个值" tabindex="-1"><a class="header-anchor" href="#position-属性的五个值"><span>position 属性的五个值：</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">static</span>
<span class="line">relative</span>
<span class="line">fixed</span>
<span class="line">absolute 当元素绝对定位时，会从文档流中完全删除，相对于距离最近的非static 祖先元素位置决定的</span>
<span class="line">sticky 视口能看时表现为relative定位，看不见时表现为fixed定位</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>sticky 定位</p><ul><li>当元素在屏幕内，表现为 relative，就要滚出显示器屏幕的时候，表现为 fixed</li><li>父级元素不能有任何 overflow:visible 以外的 overflow 设置，否则没有粘滞效果。因为改变了滚动容器（即使没有出现滚动条）。</li></ul><h2 id="文本省略" tabindex="-1"><a class="header-anchor" href="#文本省略"><span>文本省略</span></a></h2><h3 id="单行文本溢出显示省略号" tabindex="-1"><a class="header-anchor" href="#单行文本溢出显示省略号"><span>单行文本溢出显示省略号</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">overflow: hidden;</span>
<span class="line">text-overflow: ellipsis;</span>
<span class="line">white-space: no-wrap;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多行文本溢出显示省略号" tabindex="-1"><a class="header-anchor" href="#多行文本溢出显示省略号"><span>多行文本溢出显示省略号</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">overflow: hidden;</span>
<span class="line">text-overflow: ellipsis;</span>
<span class="line">display: -webkit-box;</span>
<span class="line">-webkit-line-clamp: 3;</span>
<span class="line">-webkit-box-orient: vertical;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="class-优先级" tabindex="-1"><a class="header-anchor" href="#class-优先级"><span>class 优先级</span></a></h2><ul><li>当一个元素指定多个 class 时，class 的优先级与指定顺序无关，而是和 class 的定义顺序有关。后声明的优先级高。</li><li>优先级 <ol><li>内联样式 权值为 1000</li><li>ID 选择器 权值为 0100</li><li>类、伪类、属性选择器 权值为 0010</li><li>标签、伪元素选择器 权值为 0001</li><li>通配符、子类选择器、兄弟选择器，如*, &gt;, +，权值为 0000</li><li>继承的样式没有权值</li></ol></li></ul><h2 id="link-和-import-引入-css-的区别" tabindex="-1"><a class="header-anchor" href="#link-和-import-引入-css-的区别"><span>link 和 import 引入 css 的区别</span></a></h2><ul><li>link：是 html 标签，并且并行加载文件，还可以加载图片的资源文件</li><li>import：是 css 提供的，网页都加载完后再加载，可能会出现闪烁，有兼容性问题，不能 dom 操作</li></ul><h2 id="src-和-href-的区别" tabindex="-1"><a class="header-anchor" href="#src-和-href-的区别"><span>src 和 href 的区别</span></a></h2><p>href： href 是 Hypertext Reference 的缩写，表示超文本引用。用来建立当前元素和文档之间的链接。如 link a 并行下载该文档，并且不会停止对当前文档的处理 src： src 是 source 的缩写，src 指向的内容会嵌入到文档当前标签所在位置 如 img、script、iframe 当浏览器解析到该元素时，会暂停浏览器的渲染，直到该资源加载完毕。</p><h2 id="浮动" tabindex="-1"><a class="header-anchor" href="#浮动"><span>浮动</span></a></h2><ul><li>带来的问题 <ol><li>浮动元素脱离文档流，父元素塌陷，会覆盖在后面紧随的元素之上</li></ol></li><li>清除浮动的方式 <ol><li>最后一个浮动元素后添加空 div 标签并且添加 clear：both</li><li>包含浮动元素的父标签添加样式 overflow：hidden (利用bfc)</li><li>使用伪类再去除</li></ol></li></ul><h2 id="圣杯布局-全部浮动、container-留-padding、再通过-margin、position-调整位置、记得清除浮动" tabindex="-1"><a class="header-anchor" href="#圣杯布局-全部浮动、container-留-padding、再通过-margin、position-调整位置、记得清除浮动"><span>圣杯布局（全部浮动、container 留 padding、再通过 margin、position 调整位置、记得清除浮动）</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">&lt;div class=&quot;container&quot;&gt;</span>
<span class="line">    &lt;div class=&quot;middle&quot;&gt;middle&lt;/div&gt;</span>
<span class="line">    &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt;</span>
<span class="line">    &lt;div class=&quot;right&quot;&gt;right&lt;/div&gt;</span>
<span class="line">&lt;/div&gt;</span>
<span class="line">&lt;style&gt;</span>
<span class="line">  div{</span>
<span class="line">    height:200px;</span>
<span class="line">  }</span>
<span class="line">  .container{</span>
<span class="line">    padding:0 100px;</span>
<span class="line">      height:200px;</span>
<span class="line">  }</span>
<span class="line">  .container&gt;div{</span>
<span class="line">      float: left;</span>
<span class="line">  }</span>
<span class="line">  .middle{</span>
<span class="line">    background:blue;</span>
<span class="line">    width:100%;</span>
<span class="line">  }</span>
<span class="line">  .left{</span>
<span class="line">    position:relative;</span>
<span class="line">    background:pink;</span>
<span class="line">    width:100px;</span>
<span class="line">  /*   margin-left:calc(-100% - 100px); */</span>
<span class="line">    margin-left:-100%;</span>
<span class="line">    left:-100px;</span>
<span class="line">  }</span>
<span class="line">  .right{</span>
<span class="line">    background:green;</span>
<span class="line">    width:100px;</span>
<span class="line">    margin-right:-100px;</span>
<span class="line">  /*   position:relative; */</span>
<span class="line">  /*   right:-100px; */</span>
<span class="line">  }</span>
<span class="line">&lt;/style&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="双飞翼布局-改内部-padding-为外部-margin、免于相对定位-margin-不变" tabindex="-1"><a class="header-anchor" href="#双飞翼布局-改内部-padding-为外部-margin、免于相对定位-margin-不变"><span>双飞翼布局（改内部 padding 为外部 margin、免于相对定位，margin 不变）</span></a></h2><p>思路：可以尝试去掉 margin 看，因为 left 和 right 的 margin 是相对于上面的 middle-container，没有圣杯布局中外容器的 padding 限制，所以可以直接调整到正确位置</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>middle-container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>middle<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>left<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>right<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"></span>
<span class="line">  <span class="token selector">div</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token selector">.middle-container</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>//重点</span>
<span class="line">    <span class="token property">background</span><span class="token punctuation">:</span> paleturquoise<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token selector">.middle</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">margin</span><span class="token punctuation">:</span>0 200px<span class="token punctuation">;</span>//重点</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token selector">.left</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">background</span><span class="token punctuation">:</span> palevioletred<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">margin-left</span><span class="token punctuation">:</span>-100%<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token selector">.right</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">background</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">margin-left</span><span class="token punctuation">:</span>-200px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">  flex布局</span>
<span class="line">  div{</span>
<span class="line">    height:100px;</span>
<span class="line">    display:flex;</span>
<span class="line">  }</span>
<span class="line">  .middle{</span>
<span class="line">    background: paleturquoise;</span>
<span class="line">    width:100%;</span>
<span class="line">  }</span>
<span class="line">  .left{</span>
<span class="line">    background: palevioletred;</span>
<span class="line">    flex:0 0 200px;</span>
<span class="line">    order:-1;</span>
<span class="line">  }</span>
<span class="line">  .right{</span>
<span class="line">    width: 200px;</span>
<span class="line">    flex:0 0 200px;</span>
<span class="line">    background: purple;</span>
<span class="line">  }</span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="grid-布局-二维层次的一个布局" tabindex="-1"><a class="header-anchor" href="#grid-布局-二维层次的一个布局"><span>grid 布局（二维层次的一个布局）</span></a></h2><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>header<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>left<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>middle<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>right<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>footer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">.container { </span>
<span class="line">	display:grid; </span>
<span class="line">	grid-template-columns: 100px 1fr 100px;</span>
<span class="line">	grid-template-rows: 1fr 300px 1fr; </span>
<span class="line">	grid-template-areas: &quot;top top top&quot; &quot;left middle right&quot; &quot;footer footer footer&quot;; } </span>
<span class="line">	.header { grid-area: top;</span>
<span class="line">background:blue} .left { grid-area: left; background:pink} .middle{ grid-area:</span>
<span class="line">middle; background:yellow} .right{grid-area:right;background:red} .footer {</span>
<span class="line">grid-area:footer ; background:blue}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自适应三栏布局" tabindex="-1"><a class="header-anchor" href="#自适应三栏布局"><span><a href="https://blog.csdn.net/weixin_44071019/article/details/85951685#1flex_3" target="_blank" rel="noopener noreferrer">自适应三栏布局</a></span></a></h2><ol><li>flex(左右的 flex：0 0 100px、中间 flex:1、可以单独设置高度也可以不设置就是等高的)</li><li>float(左右盒子设置固定宽度并浮动，中间盒子设置 100%宽度，需要注意，如果设置浮动，需要中间盒子和右边盒子调位，否则右边盒子会掉落)</li><li>inline-block</li><li>position(父级相对定位，左右分别绝对定位,center 会自然流动到他们上面，然后使用 margin 属性，留出左右元素的宽度，既可以使中间元素自适应屏幕宽度。)</li><li>gird(display: grid;（等高） grid-template-columns: 200px auto 200px;)</li><li>table 布局、父元素 display：table；子元素 display:table-cell;注意父元素 width：100%；子元素没有设置宽度的自动撑开（等高的）（容易发生重流，整个 table 都要跟着变动，开销大）</li><li>圣杯布局、双飞翼布局（浮动加上 margin、padding、定位）</li></ol><h2 id="垂直居中" tabindex="-1"><a class="header-anchor" href="#垂直居中"><span>垂直居中</span></a></h2><ol><li><p>display：inline-block; + vertical-align:middle;</p></li><li><p>display:flex; + justify-content:center; + align-content:center;</p></li><li><p>position:absolute; + left + top</p></li><li><p>父元素设置</p><p>display:grid; align-content:center; justify-content:center;</p></li></ol><h2 id="等高布局" tabindex="-1"><a class="header-anchor" href="#等高布局"><span><a href="https://segmentfault.com/a/1190000019365216#articleHeader4" target="_blank" rel="noopener noreferrer">等高布局</a></span></a></h2><ol><li>父元素设置 overflow：hidden 抵消（在最高点被裁减）；全部浮动；利用很大的 padding-bottom 和 margin-bottom：为-padding-bottom</li><li>绝对定位设置 top：0；bottom：0；</li><li>flex 布局</li><li>table 布局</li><li>grid 布局 display: grid;grid-template-columns: 1fr 1fr 1fr; width:100%;</li></ol><h2 id="块级元素与内联元素的区别" tabindex="-1"><a class="header-anchor" href="#块级元素与内联元素的区别"><span>块级元素与内联元素的区别</span></a></h2><ul><li>块级元素： <ol><li>div、p、ul、li、ol、h1-h6、table、form、hr、dl、header、footer、aside...</li><li>占据一行、垂直排列</li></ol></li><li>内联元素: <ol><li>img、a、span、input、label、strong、em</li><li>水平排列</li><li>不能设置宽高</li></ol></li></ul><h2 id="可继承的属性" tabindex="-1"><a class="header-anchor" href="#可继承的属性"><span><a href="https://www.cnblogs.com/zhangnan35/p/8624608.html" target="_blank" rel="noopener noreferrer">可继承的属性</a></span></a></h2><ol><li>字体相关：line-height, font-family, font-size, font-style, font-variant, font-weight, font</li><li>列表相关：list-style-image, list-style-position, list-style-type, list-style</li><li>文本相关 text-indent、text-align、line-height、word-spacing、letter-spacing、color</li><li>visibility</li><li>cursor</li></ol><h2 id="css-选择器" tabindex="-1"><a class="header-anchor" href="#css-选择器"><span>css 选择器</span></a></h2><ol><li>max-width、max-height 等优先级最高</li><li>！important</li><li>内联样式 1000</li><li>id 选择器 100</li><li>class 选择器、伪类、属性选择器 10</li><li>伪元素和元素选择器 1</li></ol><p>其他：通配符选择器、相邻同胞选择器、子选择器、后代选择器</p><p>!important &gt; 行内样式&gt;ID 选择器 &gt; 类选择器/属性/伪类 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性</p><h2 id="bfc" tabindex="-1"><a class="header-anchor" href="#bfc"><span><a href="https://www.cnblogs.com/CandyManPing/p/5562447.html" target="_blank" rel="noopener noreferrer">BFC</a></span></a></h2><ul><li><p><a href="https://www.bilibili.com/video/BV1aZ4y1M7gW/?spm_id_from=333.337.search-card.all.click&amp;vd_source=bbffb4019ced31da1e3d2a77ed42bcee" target="_blank" rel="noopener noreferrer">块级格式上下文</a></p></li><li><p><a href="https://github.com/sisterAn/blog/issues/118" target="_blank" rel="noopener noreferrer">BFC</a></p></li><li><p><a href="https://www.sysuke.com/fe/css/BFC.html" target="_blank" rel="noopener noreferrer">BFC</a></p></li><li><p>特点</p><ol><li>BFC 区域与外部不相关</li><li>可以包含浮动元素</li><li>内部元素从上往下排列</li></ol></li><li><p>触发条件</p><ol><li>根元素</li><li>(浮动元素)float:none 以外</li><li>（内容超出不可见或滚动）overflow:visible 以外 （常用来生成 BFC）</li><li>display：inline-block；table-cell、table-caption</li><li>position 的值为 absolute 或 fixed</li><li>display：flow-root（专门用于生成BFC）</li></ol></li><li><p>作用</p><ol><li>防止上下边距重叠 （利用 BFC 隔离上下间的 margin）</li><li>清除浮动防止元素塌陷</li><li>两栏布局，防止文字环绕 （利用 BFC 可以包含浮动元素）</li></ol></li></ul><h2 id="水平垂直居中" tabindex="-1"><a class="header-anchor" href="#水平垂直居中"><span><a href="https://segmentfault.com/a/1190000016389031?utm_source=tag-newest" target="_blank" rel="noopener noreferrer">水平垂直居中</a></span></a></h2><ol><li>父元素相对定位，子元素绝对定位 margin：auto；top-left-bottom-right 为 0</li><li>父元素相对定位，子元素绝对定位设置 left、top：50%，再用 transfrom：translate（-50%，-50%）或者-margin</li><li>flex</li><li>grid</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">7. 父：display:table-cell;</span>
<span class="line">       vertical-align: middle;</span>
<span class="line">       text-align: center;</span>
<span class="line">   子:display:inline-block;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="8"><li>单行文本水平垂直居中：text-align:center；line-height:父高; 多行文本也可以，不过由于子元素会继承父元素的 line-height，还需要修改子元素的行高</li><li>父：text-align：center；子：vertical-align:middle;在父元素上添加伪元素来设置 height:100%</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">.d{</span>
<span class="line">  height: 100px;</span>
<span class="line">  width: 200px;</span>
<span class="line">  text-align: center;</span>
<span class="line">  border: 1px solid #ccc;</span>
<span class="line">}</span>
<span class="line">.d:before{</span>
<span class="line">  content: &quot;&quot;;</span>
<span class="line">  height: 100%;</span>
<span class="line">  background:yellow;</span>
<span class="line">  display: inline-block;</span>
<span class="line">  vertical-align: middle;</span>
<span class="line">}</span>
<span class="line">.d p {</span>
<span class="line">  background:#000;</span>
<span class="line">  color:#fff;</span>
<span class="line">  vertical-align:middle;</span>
<span class="line">  display:inline-block;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vertical-align：定义 <code>行内</code>元素的 <code>基线</code>相对于该元素所在行的基线的垂直对齐 在 <code>表单元格table-cell</code>中，该元素设置单元格框中的单元格内容的对齐方式</p><p>总结：</p><ul><li>有兼容性要求，宽高固定，推荐 absolute + 负 margin</li><li>有兼容要求，宽高不固定，推荐 css-table</li><li>无兼容性要求，推荐 flex</li><li>移动端推荐使用 flex</li></ul><h2 id="line-height" tabindex="-1"><a class="header-anchor" href="#line-height"><span><a href="https://juejin.im/post/5bf805fde51d453a68008e32" target="_blank" rel="noopener noreferrer">line-height</a></span></a></h2><p>line-height:两行文字基线之间的距离</p><ul><li>内联元素的高度是由行高决定的</li><li>line-height 的百分比和数值都是基于当前元素的 font-size 来计算，不同在于继承元素的计算方式</li></ul><p><strong>normal</strong> 取决于用户代理。桌面浏览器（包括火狐）使用大约 1.2 的默认值，具体随元素的 font-family 而定。不同浏览器的默认行高可能存在差异。</p><p><strong>数值</strong>： 根据父元素的 font-size 值计算 line-height 的值，子元素直接继承 line-height 的<strong>设置数值</strong>，根据自身的 font-size 再次计算 line-height 的值。这是设置行高并避免由于继承导致意外结果的首选方法。</p><p><strong>百分比值：</strong> 根据父元素的 font-size 值计算 line-height 的值，子元素继承<strong>计算后</strong>的 line-height 值。</p><p><strong>em</strong>:表示行高为当前字体大小的 2.6 倍</p><h2 id="height-和-width-的百分比差异" tabindex="-1"><a class="header-anchor" href="#height-和-width-的百分比差异"><span>height 和 width 的百分比差异</span></a></h2><ul><li>总结：父元素 height 为 auto 时，子元素百分比会被忽略</li></ul><p>height 对百分比也是支持的，但是其和 width 还是有一个明显的区别：当父元素 width 属性为 auto 时，子元素宽度仍然可以使用百分比设置。</p><p>对于 height，只要子元素还是在正常文档流当中的，如果父元素的 height 属性为 auto，则子元素 height 设置为百分比会被忽略</p><p>如果包含块的高度没有显式指定，且该元素不是绝对定位，那么则计算值为 auto</p><p>父级元素的高度为 auto 时，我们设置子元素的高度为 100%，浏览器只能得到 undefined，算不出。</p><p>在&lt;body&gt;之中的元素的父元素并不仅仅只是&lt;body&gt;，还包括了&lt;html&gt;。 所以我们要同时设置这两者的 height，只设置其中一个是不行的</p><ul><li><p>正常流下，如果块级元素的 <code>width</code>是个固定值，<code>margin</code>是 <code>auto</code>，则 <code>margin</code>会撑满剩下的空间；如果 <code>margin</code>是固定值，<code>width</code>是 <code>auto</code>，则 <code>width</code>会撑满剩下的空间。这就是流体布局的根本所在。</p></li><li><p><strong>外在盒子和内在盒子</strong></p><p>外在盒子是决定元素排列方式的盒子，即决定盒子具有块级特性还是内联特性的盒子。外在盒子负责结构布局。</p><p>内在盒子是决定元素内部一些属性是否生效的盒子。内在盒子负责内容显示。</p><p>如 <code>display: inline-table;</code> 外在盒子就是 <code>inline</code>，内在盒子就是 <code>table</code>。外在盒子决定了元素要像内联元素一样并排在一排显示，内在盒子则决定了元素可以设置宽高、垂直方向的 margin 等属性。如下图</p></li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/6/28/16b9eb290f144367?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>右侧的 table 和左侧的文字在一行排列（外在盒子 inline 的表现特征），同时有拥有自定义宽度 111px（内在盒子 table 可以设置宽高）。</p><ul><li><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 三种定位机制使用了4个属性来描述定位元素各边相对于其包含块的偏移。这4个属性被称为偏移属性</span></span>
<span class="line">top<span class="token operator">/</span>right<span class="token operator">/</span>bottom<span class="token operator">/</span>left <span class="token operator">=</span> <span class="token operator">&lt;</span>length<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token operator">&lt;</span>percentage<span class="token operator">&gt;</span> <span class="token operator">|</span> auto（默认） <span class="token operator">|</span> inherit</span>
<span class="line"><span class="token comment">/*</span>
<span class="line">应用于：定位元素（也就是 position 值不是 static 的元素）。无继承性</span>
<span class="line"></span>
<span class="line">百分数：对于top和bottom，相对于包含块的 clientHeight；对于right和left，相对于包含块的 clientWidth</span>
<span class="line"></span>
<span class="line">这些属性描述了距离包含块最近边的偏移。top描述了定位元素上外边界离其包含块的顶端有多远。如果top为正值，会把定位元素的上外边距边界下移，若为负值，则会把定位元素的上外边距移到其包含块的顶端之上。</span>
<span class="line">类似地，left描述了定位元素的左外边距边界在其包含块左边界右边（正值）或左边（负值）有多远。如果是正值，会把定位元素的外边距边界移到包含块左边界右边，而负值则将其移到包含块左边界左边。</span>
<span class="line">所以，正值会导致向内偏移，使边界朝着包含块的中心移动，而负值会导致向外偏移</span>
<span class="line">偏移定位元素的外边距边界时，带来的影响是元素的所有一切（包含外边距、边框、内边距和内容）都会在定位的过程中移动</span>
<span class="line"></span>
<span class="line">注意：</span>
<span class="line">    定位元素的边界是指定位元素 margin 外侧的边界；包含块的包含区域是指包含块的 border 内侧的 padding + content 区域</span>
<span class="line">    如果同时定义了 left 和 right 值，且 width 和 height 有值，那么 left 生效， right 无效，同样，同时定义了 top 和 bottom，top 生效。</span>
<span class="line">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="margin、padding" tabindex="-1"><a class="header-anchor" href="#margin、padding"><span>margin、padding</span></a></h2><p>无论是垂直或水平方向，均是相对于<strong>父元素的宽度</strong>，正常文档流中和设置浮动的情况下，相对于父元素 content-box 的宽度；绝对定位时，相对于包含块 padding-box 的宽度。</p><h2 id="定位元素的-left-right-bottom-top-百分比值" tabindex="-1"><a class="header-anchor" href="#定位元素的-left-right-bottom-top-百分比值"><span>定位元素的 left/right/bottom/top 百分比值</span></a></h2><p>top 的百分比值是按离其最近的有定位属性的祖先元素的（内容高+padding）值来计算的css 选择器</p><p>这些都是以它的父元素，如果只知道父元素，可以先随便选择一个它的子元素来选择 特殊--p:nth-child(2) 父元素匹配的第 n 个子元素 p:nth-of-type(2) 第 n 个为 p 的元素 p:nth-last-child(2) 倒数第 n 个 p:nth-last-of-type(2) 倒数第 n 个为 p 的元素 p:nth-last-child(odd) //奇 p:nth-last-child(even) //偶 p:nth-of-type(3n+0) //索引是 3 的倍数的 p 元素</p><p>p:last-of-type 父元素的最后一个 p p:first-of-type 父元素的第一个 p p:last-child 最后一个 p p:first-child 第一个 p</p><p>p:first-child i //匹配所有作为第一个子元素的 <code>&lt;p&gt;</code> 元素中的所有 <code>&lt;i&gt;</code> 元素 p:first-of-type 选择的每个 p 元素是其父元素的第一个 p 元素 p &gt; i:first-child//匹配所有 <code>&lt;p&gt;</code> 元素中的第一个 <code>&lt;i&gt;</code> 元素 总结：有 of-type 的就是其父元素的第 n 个匹配 没有的就是纯粹的满足匹配的第 n 个 attribute 属性中包含 value [title~=flower] attribute 属性以 value 开头 [lang|=en] 性中必须是完整且唯一的单词，或者以 - 分隔开 <code>&lt;p lang=&quot;en&quot;&gt;</code> <code>&lt;p lang=&quot;en-us&quot;&gt;</code> [attribute^=value] 属性的前几个字母是 value 就可以 .attribute 属性以 value 结尾: [attribute$=value]</p><p>在 CSS 中伪类一直用 : 表示，如 :hover, :active 等 伪元素在 CSS1 中已存在，当时语法是用 : 表示，如 :before 和 :after 后来在 CSS3 中修订，伪元素用 :: 表示，如 ::before 和 ::after，以此区分伪元素和伪类 由于低版本 IE 对双冒号不兼容，开发者为了兼容性各浏览器，继续使使用 :after 这种老语法表示伪元素 综上所述：::before 是 CSS3 中写伪元素的新语法； :after 是 CSS1 中存在的、兼容 IE 的老语法</p><h2 id="可继承" tabindex="-1"><a class="header-anchor" href="#可继承"><span>可继承</span></a></h2><p>可以继承的属性很少，只有<strong>颜色，文字，字体间距行高对齐方式，和列表的样式</strong>可以继承。</p><ul><li>所有元素可继承：visibility 和 cursor。</li><li>内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、font-family、font-size、font-style、font-variant、font-weight、text-decoration、text-transform、direction。</li><li>终端块状元素可继承：text-indent 和 text-align。</li><li>列表元素可继承：list-style、list-style-type、list-style-position、list-style-image。</li></ul><h2 id="css3" tabindex="-1"><a class="header-anchor" href="#css3"><span>css3</span></a></h2><p>transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。 主要取值有：translate、scale、rotate、skew</p><p>对应移动，注意 translateZ 是空间里外移动，x 是横轴，y 是竖向</p><ul><li>scale 是放大缩小倍数</li><li>rotate 是旋转度数</li><li>skew 定义沿着 X 和 Y 轴的 2D 倾斜转换。我的理解是是坐标轴变换度数</li></ul><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css" data-title="css"><pre class="language-css"><code><span class="line"><span class="token property">animation-play-state</span><span class="token punctuation">:</span> paused|running<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">/*动画*/</span></span>
<span class="line"><span class="token atrule"><span class="token rule">@keyframes</span> myfirst</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">from</span> <span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token selector">to</span> <span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token selector">div</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">animation</span><span class="token punctuation">:</span> myfirst 5s<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> myfirst 5s<span class="token punctuation">;</span> <span class="token comment">/* Safari 与 Chrome */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">/*过渡*/</span></span>
<span class="line"><span class="token selector">div</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">transition</span><span class="token punctuation">:</span> width 2s<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">-webkit-transition</span><span class="token punctuation">:</span> width 2s<span class="token punctuation">;</span> <span class="token comment">/* Safari */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token selector">div:hover</span> <span class="token punctuation">{</span> <span class="token property">width</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">/*只有属性值改变才会产生过渡*/</span></span>
<span class="line"><span class="token property">animation</span><span class="token punctuation">:</span> name duration timing-function delay iteration-count direction<span class="token punctuation">;</span></span>
<span class="line"><span class="token property">transform</span><span class="token punctuation">:</span>\\<span class="token function">scale</span><span class="token punctuation">(</span>0.85<span class="token punctuation">,</span>0.90<span class="token punctuation">)</span>\\ <span class="token function">translate</span><span class="token punctuation">(</span>0px<span class="token punctuation">,</span>-30px<span class="token punctuation">)</span>\\ <span class="token function">skew</span><span class="token punctuation">(</span>-9deg<span class="token punctuation">,</span>0deg<span class="token punctuation">)</span>\\<span class="token property">Animation</span><span class="token punctuation">:</span></span>
<span class="line"><span class="token function">word-wrap</span><span class="token punctuation">(</span>单词换行<span class="token punctuation">)</span>：<span class="token function">normal</span><span class="token punctuation">(</span>只允许在断点处换行<span class="token punctuation">)</span>|<span class="token function">break-world</span><span class="token punctuation">(</span>如果单词过长，截断强制换行<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>word-break(单词换行)：normal(浏览器默认的换行规则，一般是不允许长单词内部换行) | break-all（允许在单词内换行) | keep-all(只能在半角空格或连字符处换行)</li></ul><p><a href="https://css-tricks.com/how-css-perspective-works/" target="_blank" rel="noopener noreferrer">perspective</a></p><h2 id="block-inline-及-inline-block-的简单介绍" tabindex="-1"><a class="header-anchor" href="#block-inline-及-inline-block-的简单介绍"><span>block，inline 及 inline-block 的简单介绍</span></a></h2><h3 id="总体概念" tabindex="-1"><a class="header-anchor" href="#总体概念"><span>总体概念</span></a></h3><ol><li>block 和 inline 这两个概念是简略的说法，完整确切的说应该是 block-level elements (块级元素) 和 inline elements (内联元素)。block 元素通常被现实为独立的一块，会单独换一行；inline 元素则前后不会产生换行，一系列 inline 元素都在一行内显示，直到该行排满。</li><li>大体来说 HTML 元素各有其自身的布局级别（block 元素还是 inline 元素）：</li></ol><ul><li>常见的块级元素有 DIV, FORM, TABLE, P, PRE, H1~H6, DL, OL, UL 等。</li><li>常见的内联元素有 SPAN, A, STRONG, EM, LABEL, INPUT, SELECT, TEXTAREA, IMG, BR 等</li></ul><p>另外：</p><ol><li>block 元素可以包含 block 元素和 inline 元素；但 inline 元素只能包含 inline 元素。要注意的是这个是个大概的说法，每个特定的元素能包含的元素也是特定的，所以具体到个别元素上，这条规律是不适用的。比如 P 元素，只能包含 inline 元素，而不能包含 block 元素。</li><li>一般来说，可以通过 display:inline 和 display:block 的设置，改变元素的布局级别。</li></ol><h3 id="block-inline-和-inline-block-细节对比" tabindex="-1"><a class="header-anchor" href="#block-inline-和-inline-block-细节对比"><span><strong>block，inline 和 inline-block 细节对比</strong></span></a></h3><ul><li><p>display:block</p><ol><li>block 元素会独占一行，多个 block 元素会各自新起一行。默认情况下，block 元素宽度自动填满其父元素宽度。</li><li>block 元素可以设置 width,height 属性。块级元素即使设置了宽度,仍然是独占一行。</li><li>block 元素可以设置 margin 和 padding 属性。</li></ol></li><li><p>display:inline</p><ol><li>inline 元素不会独占一行，多个相邻的行内元素会排列在同一行里，直到一行排列不下，才会新换一行，其宽度随元素的内容而变化。</li><li>inline 元素设置 width,height 属性无效。</li><li>inline 元素的 margin 和 padding 属性，水平方向的 padding-left, padding-right, margin-left, margin-right 都产生边距效果；但竖直方向的 padding-top, padding-bottom, margin-top, margin-bottom 不会产生边距效果。</li></ol></li><li><p>display:inline-block</p><ol><li>简单来说就是将对象呈现为 inline 对象，但是对象的内容作为 block 对象呈现。之后的内联对象会被排列在同一行内。比如我们可以给一个 link（a 元素）inline-block 属性值，使其既具有 block 的宽度高度特性又具有 inline 的同行特性。</li></ol><p>例如：</p><p>inline-block 将会使元素成为一个 inline 元素（如后跟内联元素，将不会换行），但本身却仍然支持 block 元素的属性。</p><p><code>&lt;div&gt;A&lt;/div&gt;&lt;span&gt;B&lt;/span&gt;</code></p><p>此时 div 为 block 元素，span 为 inline 元素，显示顺序为 A-&gt;换行-&gt;B。</p><p>对 block 元素使用 inline-block 属性。 <code>&lt;div style=&quot;display:inline-block;margintop:10px&quot;&gt;A&lt;/div&gt;&lt;span&gt;B&lt;/span&gt; </code></p><p>此时 div 为 inline 元素，但仍然支持 margin 的垂直属性 top，显示顺序为 A-&gt;同行-&gt;B(整体下降 10px)。</p><p>对 inline 元素使用 inline-block 属性。</p></li></ul><p><code>&lt;div&gt;A&lt;/div&gt;&lt;span style=&quot;display:inline-block;margin-top:10px&quot;&gt;B&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;</code></p><p>此时 div 为 block 元素，B 仍然为 inline 元素，但开始支持 margin 的垂直属性 top，C 为 inline 元素。显示顺序为 A-&gt;换行-&gt;B-&gt;同行-&gt;C(B,C 整体下降 10px)。</p><p>虽然 inline-block 有着 block 与 inline 结合的好处的，在某些布局上可以贡献些力量，但是同时它也存在一些问题。</p><h3 id="水平间隙问题" tabindex="-1"><a class="header-anchor" href="#水平间隙问题"><span><strong>水平间隙问题</strong></span></a></h3><p>我们创建一个导航列表，并将其列表 item 设置为 inline-block，主要代码如下：</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nav<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nav-item<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>导航<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nav-item<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>导航<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nav-item<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>导航<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果图如下：</p><p><img src="https://pic4.zhimg.com/80/v2-ff6a8f27b0cf85992621fbeeada411cf_720w.jpg?ynotemdtimestamp=1622903086798" alt="img"></p><p>我们从效果图中可以看到列表 item 之间有一点小空隙，但是我们在代码中并没有设置 margin 水平间距。那么这个空隙是如何产生的呢？</p><p>这是因为我们编写代码时输入空格、换行都会产生空白符。而浏览器是不会忽略空白符的，且对于多个连续的空白符浏览器会自动将其合并成一个，故产生了所谓的间隙。</p><p>对于上面实例，我们在列表 item 元素之间输入了回车换行以方便阅读，而这间隙正是这个回车换行产生的空白符。</p><p>同样对于所有的行内元素（inline，inline-block），换行都会产生空白符的间隙。</p><h3 id="如何消除空白符" tabindex="-1"><a class="header-anchor" href="#如何消除空白符"><span><strong>如何消除空白符</strong></span></a></h3><p>从上面我们了解到空白符，是浏览器正常的表现行为。但是对于某些场景来说，并不美观，而且间隙大小非可控，所以我们往往需要去掉这个空白间隙。一般来说我们有两种方法来去掉这个换行引起间隙：代码不换行和设置 font-size。</p><p><strong>代码不换行</strong></p><p>我们了解到，由于换行空格导致产生换行符，因此我们可以将上述例子中的列表 item 写成一行，这样空白符便消失，间隙就不复存在了。其代码如下：</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nav<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nav-item<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>导航<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nav-item<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>导航<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nav-item<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>导航<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">.nav {</span>
<span class="line">  background: #999;</span>
<span class="line">}</span>
<span class="line">.nav-item{</span>
<span class="line">  display:inline-block; /* 设置为inline-block */</span>
<span class="line">  width: 100px;</span>
<span class="line">  background: #ddd;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但考虑到代码可读及维护性，我们一般不建议连成一行的写法。</p><p><img src="https://pic2.zhimg.com/80/v2-b067648c7f051cf9a9846b98c025c259_720w.jpg?ynotemdtimestamp=1622903086798" alt="img"></p><h4 id="设置-font-size" tabindex="-1"><a class="header-anchor" href="#设置-font-size"><span><strong>设置 Font-Size</strong></span></a></h4><p>首先要理解空白符归根结底是个字符，因此，我们可以通过设置 font-size 属性来控制其产生的间隙的大小。我们知道如果将 font-size 设置为 0，文字字符是没法显示的，那么同样这个空白字也没了，间隙也就没了。</p><p>于是顺着这个思路就有了另一个解决方案：通过设置父元素的 font-size 为 0 来去掉这个间隙，然后重置子元素的 font-size，让其恢复子元素文字字符。</p><p>所以该方法代码如下：</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css" data-title="css"><pre class="language-css"><code><span class="line"><span class="token selector">.nav</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">background</span><span class="token punctuation">:</span> #999<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">font-size</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token comment">/* 空白字符大小为0 */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token selector">.nav-item</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span>inline-block<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span> <span class="token comment">/* 重置 font-size 为16px*/</span></span>
<span class="line">  <span class="token property">background</span><span class="token punctuation">:</span> #ddd<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://pic2.zhimg.com/80/v2-b067648c7f051cf9a9846b98c025c259_720w.jpg?ynotemdtimestamp=1622903086798" alt="img"></p><p>使用该方法时需要特别注意其子元素一定要重置 font-size，不然很容易掉进坑里（文字显示不出来）。</p><h4 id="垂直间隙问题" tabindex="-1"><a class="header-anchor" href="#垂直间隙问题"><span><strong>垂直间隙问题</strong></span></a></h4><p>由于 inline-block 垂直对齐使用的是 <code>vertical-align</code> 属性，而该属性默认的对齐方式为 <code>baseline</code>，而基线的位置为小写英文字母 <code>x</code>的下端沿。该线离底线（text-bottom）还是有点距离的。</p><p>下面以实例论证，如下：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line"> &lt;style&gt;</span>
<span class="line"> .nav {</span>
<span class="line">           background: #999;</span>
<span class="line">           display: inline-block</span>
<span class="line">        }</span>
<span class="line"> &lt;/style&gt;</span>
<span class="line"> &lt;div class=&quot;nav&quot;&gt;</span>
<span class="line">   &lt;img src=&quot;3148.png&quot; alt=&quot;picture&quot;&gt;</span>
<span class="line"> &lt;/div&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果图如下：</p><p><img src="https://pic2.zhimg.com/80/v2-a1c244be55e89a2d8f794667be1ef5c5_720w.jpg?ynotemdtimestamp=1622903086798" alt="img"></p><p>按道理来说，div 的高度应该是图片撑开的高度，所以不可能看到如图所示的大概 3px （不同的字体大小，这个灰色间隙会不一样）的背景色。所以为了解决这个问题，我们可以设置 img 的 <code>vertical-align</code> 的值为 <code>middle</code>，<code>text-top</code>，<code>text-bottom</code>都可以（前提是父元素 <code>line-height</code> 计算的高度要小于图片的高度）。</p><p>所以一般为了避免这个垂直的间隙，在设置 inline-block 的时候，还需要顺手带个 <code>vertical-align: middle;</code></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line"> .nav {</span>
<span class="line">           background: #999;</span>
<span class="line">           text-align:center;</span>
<span class="line">           display: inline-block;</span>
<span class="line">        }</span>
<span class="line"></span>
<span class="line">          &lt;/style&gt;</span>
<span class="line">  &lt;div class=&quot;nav&quot;&gt;</span>
<span class="line">       &lt;img src=&quot;3148.png&quot; alt=&quot;picture&quot;&gt;</span>
<span class="line">  &lt;/div&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://pic2.zhimg.com/80/v2-5dd0d28badd2dcfd07885ebf1284dac9_720w.jpg?ynotemdtimestamp=1622903086798" alt="img">此时就没有了间距</p><h2 id="如何画一个三角形" tabindex="-1"><a class="header-anchor" href="#如何画一个三角形"><span><a href="https://q.shanyue.tech/fe/css/191.html" target="_blank" rel="noopener noreferrer">如何画一个三角形</a></span></a></h2><p><a href="https://www.yuque.com/istao/inunbi/vvf14z" target="_blank" rel="noopener noreferrer">爆肝三天，学习Scss-看这篇就够了</a></p><h2 id="flex" tabindex="-1"><a class="header-anchor" href="#flex"><span>flex</span></a></h2><ul><li>display：flex/ inline-flex</li><li>flex-direction：row/row-reverse/column/column-reverse</li><li>flex-wrap：nowrap/wrap/wrap-reverse</li><li>justify-content：flex-start/flex-end/center/space-between/space-around</li><li>align-items：flex-start/flex-end/center/baseline/stretch</li><li>align-content：flex-start/flex-end/center/space-between/space-around</li><li>flex-grow：设置子元素的放大比例，默认值为0，即子元素不放大</li><li>flex-shrink：设置子元素的缩小比例，默认值为1，即子元素可缩小</li><li>flex-basis：设置子元素在分配多余空间之前的默认大小，默认值为auto，即子元素的默认大小由内容决定</li><li>order：设置子元素的排列顺序，默认值为0，即按照文档流的顺序排列</li><li><code>flex:1</code> 和 <code>flex:auto</code> 的区别，可以归结于 <code>flex-basis:0</code>和 <code>flex-basis:auto</code>的 <ul><li>当设置为0时（绝对弹性元素），此时相当于告诉 <code>flex-grow</code>和 <code>flex-shrink</code>在伸缩的时候不需要考虑我的尺寸</li><li>当设置为 <code>auto</code>时（相对弹性元素），此时则需要在伸缩时将元素尺寸纳入考虑</li></ul></li></ul><h2 id="层叠上下文" tabindex="-1"><a class="header-anchor" href="#层叠上下文"><span>层叠上下文</span></a></h2><ol><li><p>)层叠上下文是HTML元素层级的一个子集，可以理解为浏览器在渲染时z轴方向，有多个平面，每个平面就是一个层叠上下文</p><ol><li>每个层叠上下文可以包含多个元素，元素之间也有其相应的层叠顺序。</li><li>在比较元素的层级顺序时，首先要比较其所属的层叠上下文的顺序 <ol><li>如果不在一个层叠上下文，则其先后顺序就是其<strong>层叠上下文的顺序</strong></li><li>如果在一个层叠上下文中，则其先后顺序由浏览器默认的<strong>元素层叠顺序</strong>决定</li></ol></li></ol></li><li><p>如何创建层叠上下文</p><ol><li>文档根元素HTML</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position" target="_blank" rel="noopener noreferrer"><code>position</code></a> 值为 <code>absolute</code>（绝对定位）或 <code>relative</code>（相对定位）且 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/z-index" target="_blank" rel="noopener noreferrer"><code>z-index</code></a> 值不为 <code>auto</code> 的元素；</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position" target="_blank" rel="noopener noreferrer"><code>position</code></a> 值为 <code>fixed</code>（固定定位）或 <code>sticky</code>（粘滞定位）的元素</li><li>flex (<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex" target="_blank" rel="noopener noreferrer"><code>flex</code></a>) 容器的子元素，且 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/z-index" target="_blank" rel="noopener noreferrer"><code>z-index</code></a> 值不为 <code>auto</code>；</li><li>grid (<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/grid" target="_blank" rel="noopener noreferrer"><code>grid</code></a>) 容器的子元素，且 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/z-index" target="_blank" rel="noopener noreferrer"><code>z-index</code></a> 值不为 <code>auto</code>；</li><li>CSS3中的新属性也可以产生层叠上下文。具体参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_positioned_layout/Understanding_z-index/Stacking_context" target="_blank" rel="noopener noreferrer">mdn</a></li></ol></li><li><p>z-index</p><ol><li>该属性影响定位元素在同一个层叠上下文中的层叠顺序，非定位元素默认为auto</li><li>数值越大，则元素越在z轴上方</li></ol></li><li><p>浏览器默认元素层叠顺序 <img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/30/1658910c5cb364b6~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png" alt="img"></p></li></ol><h2 id="相关文档" tabindex="-1"><a class="header-anchor" href="#相关文档"><span>相关文档</span></a></h2><ul><li><a href="https://i-want-offer.github.io/FE-Essay/CSS/%E4%B8%A4%E6%A0%8F%E5%B8%83%E5%B1%80.html" target="_blank" rel="noopener noreferrer"> 两栏布局、三栏布局</a></li><li><a href="https://vue3js.cn/interview/css/center.html#%E4%B8%80%E3%80%81%E8%83%8C%E6%99%AF" target="_blank" rel="noopener noreferrer">面试官：元素水平垂直居中的方法有哪些？如果元素不定宽高呢？ | web前端面试 - 面试官系列</a></li></ul><p>相关文档</p>`,140),i=[t];function p(c,o){return a(),s("div",null,i)}const d=n(l,[["render",p],["__file","CSS.html.vue"]]),u=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/CSS.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"替换元素与非替换元素","slug":"替换元素与非替换元素","link":"#替换元素与非替换元素","children":[]},{"level":2,"title":"position 属性的五个值：","slug":"position-属性的五个值","link":"#position-属性的五个值","children":[]},{"level":2,"title":"文本省略","slug":"文本省略","link":"#文本省略","children":[{"level":3,"title":"单行文本溢出显示省略号","slug":"单行文本溢出显示省略号","link":"#单行文本溢出显示省略号","children":[]},{"level":3,"title":"多行文本溢出显示省略号","slug":"多行文本溢出显示省略号","link":"#多行文本溢出显示省略号","children":[]}]},{"level":2,"title":"class 优先级","slug":"class-优先级","link":"#class-优先级","children":[]},{"level":2,"title":"link 和 import 引入 css 的区别","slug":"link-和-import-引入-css-的区别","link":"#link-和-import-引入-css-的区别","children":[]},{"level":2,"title":"src 和 href 的区别","slug":"src-和-href-的区别","link":"#src-和-href-的区别","children":[]},{"level":2,"title":"浮动","slug":"浮动","link":"#浮动","children":[]},{"level":2,"title":"圣杯布局（全部浮动、container 留 padding、再通过 margin、position 调整位置、记得清除浮动）","slug":"圣杯布局-全部浮动、container-留-padding、再通过-margin、position-调整位置、记得清除浮动","link":"#圣杯布局-全部浮动、container-留-padding、再通过-margin、position-调整位置、记得清除浮动","children":[]},{"level":2,"title":"双飞翼布局（改内部 padding 为外部 margin、免于相对定位，margin 不变）","slug":"双飞翼布局-改内部-padding-为外部-margin、免于相对定位-margin-不变","link":"#双飞翼布局-改内部-padding-为外部-margin、免于相对定位-margin-不变","children":[]},{"level":2,"title":"grid 布局（二维层次的一个布局）","slug":"grid-布局-二维层次的一个布局","link":"#grid-布局-二维层次的一个布局","children":[]},{"level":2,"title":"自适应三栏布局","slug":"自适应三栏布局","link":"#自适应三栏布局","children":[]},{"level":2,"title":"垂直居中","slug":"垂直居中","link":"#垂直居中","children":[]},{"level":2,"title":"等高布局","slug":"等高布局","link":"#等高布局","children":[]},{"level":2,"title":"块级元素与内联元素的区别","slug":"块级元素与内联元素的区别","link":"#块级元素与内联元素的区别","children":[]},{"level":2,"title":"可继承的属性","slug":"可继承的属性","link":"#可继承的属性","children":[]},{"level":2,"title":"css 选择器","slug":"css-选择器","link":"#css-选择器","children":[]},{"level":2,"title":"BFC","slug":"bfc","link":"#bfc","children":[]},{"level":2,"title":"水平垂直居中","slug":"水平垂直居中","link":"#水平垂直居中","children":[]},{"level":2,"title":"line-height","slug":"line-height","link":"#line-height","children":[]},{"level":2,"title":"height 和 width 的百分比差异","slug":"height-和-width-的百分比差异","link":"#height-和-width-的百分比差异","children":[]},{"level":2,"title":"margin、padding","slug":"margin、padding","link":"#margin、padding","children":[]},{"level":2,"title":"定位元素的 left/right/bottom/top 百分比值","slug":"定位元素的-left-right-bottom-top-百分比值","link":"#定位元素的-left-right-bottom-top-百分比值","children":[]},{"level":2,"title":"可继承","slug":"可继承","link":"#可继承","children":[]},{"level":2,"title":"css3","slug":"css3","link":"#css3","children":[]},{"level":2,"title":"block，inline 及 inline-block 的简单介绍","slug":"block-inline-及-inline-block-的简单介绍","link":"#block-inline-及-inline-block-的简单介绍","children":[{"level":3,"title":"总体概念","slug":"总体概念","link":"#总体概念","children":[]},{"level":3,"title":"block，inline 和 inline-block 细节对比","slug":"block-inline-和-inline-block-细节对比","link":"#block-inline-和-inline-block-细节对比","children":[]},{"level":3,"title":"水平间隙问题","slug":"水平间隙问题","link":"#水平间隙问题","children":[]},{"level":3,"title":"如何消除空白符","slug":"如何消除空白符","link":"#如何消除空白符","children":[]}]},{"level":2,"title":"如何画一个三角形","slug":"如何画一个三角形","link":"#如何画一个三角形","children":[]},{"level":2,"title":"flex","slug":"flex","link":"#flex","children":[]},{"level":2,"title":"层叠上下文","slug":"层叠上下文","link":"#层叠上下文","children":[]},{"level":2,"title":"相关文档","slug":"相关文档","link":"#相关文档","children":[]}],"git":{"updatedTime":1717649313000,"contributors":[{"name":"Liu Jia","email":"41950983+liujia6@users.noreply.github.com","commits":1}]},"filePathRelative":"前端基础/CSS.md"}');export{d as comp,u as data};
