import{_ as e,c as r,o as l,a as t}from"./app-B_HqqEoK.js";const a={},n=t('<h1 id="airbnb" tabindex="-1"><a class="header-anchor" href="#airbnb"><span>Airbnb</span></a></h1><ol><li>不要使用 JavaScript 的 getters/setters，因为他们会产生副作用，并且难以测试、维护和理解。相反的，你可以用 getVal() 和 setVal(&#39;hello&#39;) 去创造你自己的访问器函数。</li><li>大写变量处在 export 的最高级(例如：EXPORTED_OBJECT.key) 并且他包含的所有子属性都是不可变的。（译者注：即导出的变量是全大写的，但他的属性不用大写）</li></ol><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2><ol><li>用 ... 运算符而不是 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener noreferrer">Array.from</a> 来将一个可迭代的对象转换成数组。</li><li>用 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener noreferrer">Array.from</a> 将一个类数组对象转成一个数组。</li><li>用 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener noreferrer">Array.from</a> 而不是 ... 运算符去做 map 遍历。 因为这样可以避免创建一个临时数组。</li><li>用扩展运算符做数组浅拷贝，类似上面的对象浅拷贝。</li></ol><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><ol><li>把立即执行函数包裹在圆括号里。eslint: <a href="http://eslint.org/docs/rules/wrap-iife.html" target="_blank" rel="noopener noreferrer">wrap-iife</a></li><li>不要修改参数，不要对参数重新赋值</li><li>当你一定要用函数表达式（在回调函数里）的时候，使用箭头函数。</li><li>避免箭头函数（=&gt;）和比较操作符（&lt;=, &gt;=）混淆</li><li>方法可以返回 this 来实现链式调用。</li><li>如果没有特别定义，类有默认的构造方法。一个空的构造函数或只是代表父类的构造函数是不需要写的。</li><li><strong>除非外部库或框架需要使用特定的非静态方法，否则类方法应该使用</strong> <strong>this</strong> <strong>或被写成静态方法。 作为一个实例方法表明它应该根据实例的属性有不同的行为。eslint:</strong> <a href="https://eslint.org/docs/rules/class-methods-use-this" target="_blank" rel="noopener noreferrer"><strong>class-methods-use-this</strong></a></li></ol><h2 id="模块" tabindex="-1"><a class="header-anchor" href="#模块"><span><strong>模块</strong></span></a></h2><ol><li>不要用 import 通配符， 即 * 这种方式。为什么？这确保你有单个默认的导出。</li><li>不要直接从 import 中直接 export。为什么？虽然只写一行很简洁，但是使用明确 import 和明确的 export 来保证一致性。</li><li>不要导出可变的东西。</li><li>在一个单一导出模块里，用 export default 更好。eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/prefer-default-export.md" target="_blank" rel="noopener noreferrer">import/prefer-default-export</a></li><li>import JavaScript文件不用包含扩展名 eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/extensions.md" target="_blank" rel="noopener noreferrer">import/extensions</a>为什么? 使用扩展名重构不友好，而且让模块使用者去了解模块的实现细节是不合适的。</li></ol><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h2><ol><li>不要使用一元自增自减运算符（++， --）. eslint <a href="http://eslint.org/docs/rules/no-plusplus" target="_blank" rel="noopener noreferrer">no-plusplus</a></li></ol><p>为什么？根据 eslint 文档，一元增量和减量语句受到自动分号插入的影响，并且可能会导致应用程序中的值递增或递减的静默错误。 使用 num + = 1 而不是 num ++ 或 num ++ 语句也是含义清晰的。 禁止一元增量和减量语句还会阻止您无意地预增/预减值，这也会导致程序出现意外行为。</p><p>比较运算符与相等</p><ol><li>布尔值要用缩写，而字符串和数字要明确使用比较操作符。</li><li>如果 if 语句中总是需要用 return 返回，那后续的 else 就不需要写，<a href="https://eslint.org/docs/rules/no-else-return" target="_blank" rel="noopener noreferrer">no-else-return</a></li></ol><h2 id="逗号" tabindex="-1"><a class="header-anchor" href="#逗号"><span>逗号</span></a></h2><ol><li>额外结尾逗号，: <strong>要</strong> eslint: <a href="http://eslint.org/docs/rules/comma-dangle.html" target="_blank" rel="noopener noreferrer">comma-dangle</a></li></ol><p>为什么？这使 git diffs 更简洁。此外，像Babel这样的转换器会删除转换代码中的额外的逗号，这意味着你不必担心旧版浏览器中的 <a href="https://github.com/airbnb/javascript/blob/es5-deprecated/es5/README.md#commas" target="_blank" rel="noopener noreferrer">结尾逗号问题</a>。注意，逗号不应出现在使用了 ... 操作符后的参数后面</p><h2 id="类型转换与强制转换" tabindex="-1"><a class="header-anchor" href="#类型转换与强制转换"><span>类型转换与强制转换</span></a></h2><ol><li>字符串用String函数强制转换const totalScore = String(this.reviewScore);</li><li>数字: 用 Number 做类型转换，parseInt 转换 string 应总是带上基数。 eslint: <a href="http://eslint.org/docs/rules/radix" target="_blank" rel="noopener noreferrer">radix</a></li><li>布尔：使用!!age</li></ol><h2 id="命名" tabindex="-1"><a class="header-anchor" href="#命名"><span>命名</span></a></h2><ol><li>不要用前置或后置下划线。eslint: <a href="http://eslint.org/docs/rules/no-underscore-dangle.html" target="_blank" rel="noopener noreferrer">no-underscore-dangle</a></li></ol><p>为什么？JavaScript 没有私有属性或私有方法的概念。尽管前置下划线通常的概念上意味着私有，事实上，这些属性是完全公有的，因此这部分也是你的 API 的内容。这一概念可能会导致开发者误以为更改这个不会导致崩溃或者不需要测试。如果你想要什么东西变成私有，那就不要让它在这里出现。</p><ol start="2"><li>export default 导出模块A，则这个文件名也叫 A.*， import 时候的参数也叫 A。 大小写完全一致。</li><li>当你 export 一个结构体/类/单例/函数库/对象 时用大驼峰。</li><li>简称和缩写应该全部大写或全部小写。</li></ol><p>为什么？名字都是给人读的，不是为了去适应计算机算法。</p>',23),i=[n];function o(s,p){return l(),r("div",null,i)}const c=e(a,[["render",o],["__file","Airbnb.html.vue"]]),d=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B/Airbnb.html","title":"Airbnb","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"数组","slug":"数组","link":"#数组","children":[]},{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":2,"title":"模块","slug":"模块","link":"#模块","children":[]},{"level":2,"title":"变量","slug":"变量","link":"#变量","children":[]},{"level":2,"title":"逗号","slug":"逗号","link":"#逗号","children":[]},{"level":2,"title":"类型转换与强制转换","slug":"类型转换与强制转换","link":"#类型转换与强制转换","children":[]},{"level":2,"title":"命名","slug":"命名","link":"#命名","children":[]}],"git":{"updatedTime":1720052070000,"contributors":[{"name":"liujia6","email":"liujia11@qianxin.com","commits":1}]},"filePathRelative":"编程/Airbnb.md"}');export{c as comp,d as data};
