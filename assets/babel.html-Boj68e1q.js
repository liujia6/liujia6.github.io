import{_ as l,c as e,o as a,a as i}from"./app-BrW2q7b4.js";const r={},t=i(`<h1 id="babel" tabindex="-1"><a class="header-anchor" href="#babel"><span>Babel</span></a></h1><p><a href="https://www.babeljs.cn/docs/" target="_blank" rel="noopener noreferrer">BABEL 中文官网</a></p><h4 id="参考-一文彻底读懂-babel" tabindex="-1"><a class="header-anchor" href="#参考-一文彻底读懂-babel"><span>参考：<a href="https://zhuanlan.zhihu.com/p/326824078" target="_blank" rel="noopener noreferrer">一文彻底读懂 Babel</a></span></a></h4><h4 id="配置-前端科普系列-babel-把-es6-送上天的通天塔" tabindex="-1"><a class="header-anchor" href="#配置-前端科普系列-babel-把-es6-送上天的通天塔"><span>配置：<a href="https://zhuanlan.zhihu.com/p/129089156" target="_blank" rel="noopener noreferrer">前端科普系列-Babel：把 ES6 送上天的通天塔</a></span></a></h4><p>polyfill配置：<a href="https://segmentfault.com/a/1190000039347539" target="_blank" rel="noopener noreferrer">javascript - Babel7 相关_个人文章 - SegmentFault 思否</a></p><p><img src="https://pic3.zhimg.com/80/v2-29d8d4701f6df08ccafc853af268b5a2_720w.jpg" alt="img"></p><h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h2><ul><li>Babel 是一个 JavaScript 编译器。主要用于将高版本的 JavaScript 代码转为向后兼容的 JS 代码，从而能让我们的代码运行在更低版本的浏览器或者其他的环境中。</li></ul><p>babel5 及之前是一个包含 CLI 工具+编译器+转换器的集合工具包；babel6 之后进行了拆分，集合包被分成多个包：</p><ul><li><p><code>@babel/cli</code></p></li><li><p>是 Babel 自带了一个内置的 CLI 命令行工具，我们就可以通过命令行来编译文件；</p></li><li><p>它有两种调用方式，可以通过全局安装或者本地安装调用，选用一种即可，推荐在项目本地安装。</p></li></ul><p>babel 转换的阶段分为解析-&gt;转换-&gt;生成</p><ul><li><p>解析（parsing）</p><ul><li>@babel/parser 将源码解析成 AST</li></ul></li><li><p>转换（transforming）</p><ul><li>babel 的语法转换功能依赖于各种插件</li></ul></li><li><p>生成（generating）</p><ul><li>@babel/generator 将转好好的 AST 重新生成代码</li></ul></li></ul><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h2><ul><li><code>plugins</code>：babel 中使用的插件，这些插件可以控制如何转换代码</li><li><code>presets</code>：babel 可以使用哪些新的语法特性，一个 presets 对一组新语法的特性提供了支持，多个 presets 可以叠加。presets 其实是一组 plugins 的集合，每个 plugin 完成一个新语法的转换工作。presets 是按照 ECMAScript 草案来组织的，通常可以分为三大类：</li></ul><p><strong>年度标准</strong></p><ul><li>ES2015 - 包含 2015 年加入的新特性</li><li>ES2016 - 包含 2016 年加入的新特性</li><li>ES2017 - 包含 2017 年加入的新特性</li><li>env - 包含当前所有 ECMAScript 标准的新特性</li></ul><p><strong>被社区提出未写入标准</strong></p><ul><li>stage0 一些 Babel 插件实现了对这些特性的支持，但是不确定是否会被定为标准</li><li>stage1 值得被纳入标准的特性</li><li>stage2 已被起草，将被纳入标准里</li><li>stage3 已定稿，各大浏览器厂商和 NodeJS 社区开始着手实现</li><li>stage4 在接下来一年会纳入标准</li></ul><p><strong>支持特定场景的语法特征</strong></p><ul><li>babel-plugin-react 支持 React 开发里的 JSX 语法</li><li>babel-plugin-import</li></ul><h3 id="babel-插件" tabindex="-1"><a class="header-anchor" href="#babel-插件"><span>Babel 插件</span></a></h3><ul><li><a href="https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md" target="_blank" rel="noopener noreferrer">Babel 插件手册</a></li><li>核心库——@babel/core <ul><li>@babel/core 模块是一个可以完成代码字符串转换的库，babel 所有的插件都是通过核心库来进行开发和加载的，如下是官方给的使用示例：</li></ul></li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">const babel = require(&quot;@babel/core&quot;);</span>
<span class="line">babel.transform(&quot;code&quot;, optionsObject);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>syntax：语法 <ul><li>像 <code>const</code>、<code>=&gt;</code> 这些默认被 Babel 转译的就是 syntax 的类型</li><li>Sytanx 类型。例如箭头函数、const/let 等语法特性，babel 可以通过<a href="https://babeljs.io/docs/en/plugins" target="_blank" rel="noopener noreferrer">各种插件</a>实现兼容。</li></ul></li><li>pollyfill <ul><li>像promise这种新的API需要引入polyfill实现</li></ul></li></ul><h2 id="pollyfill" tabindex="-1"><a class="header-anchor" href="#pollyfill"><span>pollyfill</span></a></h2><ul><li><a href="https://segmentfault.com/a/1190000020237785?utm_source=sf-similar-article" target="_blank" rel="noopener noreferrer">前端工程化 - Babel7 转码（三）- preset-env + transform-runtime_个人文章 - SegmentFault 思否</a></li><li><a href="https://www.jiangruitao.com/babel/babel-preset-env/" target="_blank" rel="noopener noreferrer">@babel/preset-env - 姜瑞涛的官方网站</a></li></ul><p><strong>core-js</strong></p><ul><li>它是 JavaScript 标准库的 polyfill</li><li>它尽可能的进行模块化，让你能选择你需要的功能</li><li>它和 babel 高度集成，可以对 core-js 的引入进行最大程度的优化</li></ul><p>目前我们使用的默认都是<code>core-js@2</code>，但它已经封锁了分支，在此之后的特性都只会添加到<code>core-js@3</code>，因此也是推荐使用最新的\`core-js@3</p><h3 id="配置方式" tabindex="-1"><a class="header-anchor" href="#配置方式"><span>配置方式</span></a></h3><ol><li>preset-env预设的配置<code>useBuiltIns</code>，<code>&quot;usage&quot; | &quot;entry&quot; | false</code>，默认值是 false。 <ul><li><code>false</code>：需要在 js 代码第一行主动 import &#39;@babel/polyfill&#39;，会将@babel/polyfill 整个包全部导入。 （不推荐，能覆盖到所有 API 的转译，但体积最大）</li><li><code>entry</code>：需要在 js 代码第一行主动 import &#39;@babel/polyfill&#39;，会将 browserslist 环境不支持的所有垫片都导入。 （能够覆盖到‘hello‘.includes(‘h‘)这种句法，足够安全且代码体积不是特别大） <ul><li>根据browserslist 将环境不支持的所有垫片都导入，足够安全，其经过了browserslist过滤所需要的，代码量中等。可优化</li></ul></li><li><code>usage</code>：项目里不用主动 import，会自动将代码里已使用到的、且 browserslist 环境不支持的垫片导入。 （但是检测不到‘hello‘.includes(‘h‘)这种句法，对这类原型链上的句法问题不会做转译，<strong>书写代码需注意</strong>） <ul><li>按需引入，处理不了nodeModules，需要所有nodeModules库都符合规范，不然容易报错，代码体积最小</li></ul></li></ul></li><li><code>targets</code>，用来配置需要支持的的环境，不仅支持浏览器，还支持 node。如果没有配置 targets 选项，就会读取项目中的 browserslist 配置项。</li><li>@babel/plugin-transform-runtime插件配合preset-env表示将代码由ES6编译为可执行的ES5，不会污染全局</li></ol>`,31),s=[t];function n(o,b){return a(),e("div",null,s)}const c=l(r,[["render",n],["__file","babel.html.vue"]]),u=JSON.parse('{"path":"/%E5%B7%A5%E7%A8%8B%E5%8C%96/babel.html","title":"Babel","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"配置","slug":"配置","link":"#配置","children":[{"level":3,"title":"Babel 插件","slug":"babel-插件","link":"#babel-插件","children":[]}]},{"level":2,"title":"pollyfill","slug":"pollyfill","link":"#pollyfill","children":[{"level":3,"title":"配置方式","slug":"配置方式","link":"#配置方式","children":[]}]}],"git":{"updatedTime":1717649313000,"contributors":[{"name":"Liu Jia","email":"41950983+liujia6@users.noreply.github.com","commits":1}]},"filePathRelative":"工程化/babel.md"}');export{c as comp,u as data};
