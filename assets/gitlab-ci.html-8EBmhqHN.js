import{_ as s,c as a,o as n,a as e}from"./app-BsmYACjM.js";const l={},i=e(`<h1 id="gitlab-ci" tabindex="-1"><a class="header-anchor" href="#gitlab-ci"><span>Gitlab-CI</span></a></h1><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h3><p>Gitlab CI/CD 是一款用于<a href="https://github.com/ascoders/weekly/blob/v2/101.%E7%B2%BE%E8%AF%BB%E3%80%8A%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%20vs%20%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98%20vs%20%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2%E3%80%8B.md" target="_blank" rel="noopener noreferrer">持续集成（CI），持续交付（CD）</a>的工具，相似的工具有 Jenkins、Travis CI、GoCD 等。</p><ul><li>CI 即持续集成，Continuous Integration，目标：持续集成，持续测试（保证代码质量）</li><li>CD 即持续交付，即 Continuous Delivery，目标:  持续部署（自动发布版本，供用户使用)。</li><li>从 GitLab 8.0 开始，GitLab CI 就已经集成在 GitLab 中，我们只要在项目中添加一个 .gitlab-ci.yml 文件，然后添加一个 Runner，即可进行持续集成。</li><li>.gitlab-ci.yml 文件使用 yaml 语法，<a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="noopener noreferrer">语法介绍请戳</a></li></ul><p>与 jenkins 对比</p><ul><li>gitlab-ci 的优势在于比较配置和使用简单，能在 gitlab 上直接看到执行过程，不需要配 webhook，集成在了 gitlab 上。</li><li>jenkins 的优势在于编译服务和代码仓库分离，而且编译配置文件不需要在工程中配置，并且 jenkins 依靠它丰富的插件，可以配置很多 gitlab-ci 不存在的功能，比如说看编译状况统计等</li></ul><h3 id="gitlab-runner" tabindex="-1"><a class="header-anchor" href="#gitlab-runner"><span>gitlab-runner</span></a></h3><ul><li>gitlab 的自动化操作都是在 runner 机器中运行,我们需要注册 runner</li><li>runner 分为 shared runner 和 specified runner.</li></ul><h3 id="gitlab-操作" tabindex="-1"><a class="header-anchor" href="#gitlab-操作"><span>gitlab 操作</span></a></h3><p>gitlab 上有关 gitlab-ci 的配置有两处</p><ul><li>一处是 CI/CD 可以查看构建任务 pipeline、job 的执行情况</li><li>一处是 setting 里面对 ci 的设置</li></ul><img src="https://i.loli.net/2020/12/12/IVjWRdYUlOKbCsn.png" alt="image-20201212122028807"><ul><li>一次提交触发一次 CI&amp;CD 即执行一次脚本对应一个 pipeline</li><li>一个 pipeline 对应 stages 下的所有 job</li><li>一个 stage 可以有多个 job；</li></ul><h3 id="skip-pipeline" tabindex="-1"><a class="header-anchor" href="#skip-pipeline"><span>Skip Pipeline</span></a></h3><ul><li>commit message 上加上[ci skip]  或者[skip ci]就可以跳过 pipeline 执行。</li><li>在一次 git push 调用中进行多次更改时，GitLab 最多创建四个分支和标签管道。此限制不影响任何更新的合并请求管道。所有更新的合并请求在使用管道处理合并请求时都会创建一个管道。</li></ul><h3 id="stages" tabindex="-1"><a class="header-anchor" href="#stages"><span>stages</span></a></h3><ul><li><p>gitlab-ci 的 pipeline 由一个个 stage 顺序执行，每个 stage 可以有多个 job</p></li><li><p>job 是并行执行的 所有 build 的 jobs 执行成功后，commit 才会标记为 success，所有的 build 的 jobs 执行成功，</p></li><li><p>任何一个前置的 jobs 失败了，commit 会标记为 failed 并且下一个 stages 的 jobs 都不会执行。</p></li><li><p>默认定义为 build，test 和 deploy。</p></li><li><p>如果一个 job 没有指定 stage，那么这个任务会分配到 test stage。</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token punctuation">-</span> <span class="token key atrule">stages</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> build</span>
<span class="line">    <span class="token punctuation">-</span> release_deploy</span>
<span class="line">    <span class="token punctuation">-</span> dev<span class="token punctuation">-</span>deploy</span>
<span class="line">    <span class="token punctuation">-</span> prod_deploy</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="jobs" tabindex="-1"><a class="header-anchor" href="#jobs"><span>Jobs</span></a></h3><ul><li>.gitlab-ci.yml 允许指定无限量 jobs。</li><li>每个 jobs 必须有一个唯一的名字，而且不能是上面提到的关键字。</li><li>job 由一列参数来定义 jobs 的行为。</li><li>所属同一个 stage 的 job 都是并行的</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">job_name:</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="pages" tabindex="-1"><a class="header-anchor" href="#pages"><span>pages</span></a></h3><p>一个特殊的 job，用于上传静态内容到 GitLab，可用于服务于您的网站。需要满足以下条件</p><ul><li>任何静态内容都必须放在 <code>public/</code> directory. 目录</li><li><code>artifacts</code> ：path ：<code>public/</code> 目录必须有</li></ul><p>下面的示例只是将所有文件从项目的根目录移动到 public/目录</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token key atrule">pages</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">stage</span><span class="token punctuation">:</span> deploy</span>
<span class="line">  <span class="token key atrule">script</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> mkdir .public</span>
<span class="line">    <span class="token punctuation">-</span> cp <span class="token punctuation">-</span>r * .public</span>
<span class="line">    <span class="token punctuation">-</span> mv .public public</span>
<span class="line">  <span class="token key atrule">artifacts</span><span class="token punctuation">:</span> <span class="token comment"># 必须有</span></span>
<span class="line">    <span class="token key atrule">paths</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> public</span>
<span class="line">  <span class="token key atrule">only</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> master</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="script" tabindex="-1"><a class="header-anchor" href="#script"><span>script</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">script:</span>
<span class="line">	- echo &quot;📦 开始打包&quot;</span>
<span class="line">	- ssh xxx@xxxxxx &quot;</span>
<span class="line">        rm -rf \\\`ls -d /xxx/www/* | grep -v -E &#39;\\.tar\\.gz$&#39;\\\` &amp;&amp;</span>
<span class="line">        cd /xxx/www &amp;&amp;</span>
<span class="line">        tar xvzf \${PKG_NAME} &amp;&amp;</span>
<span class="line">        rm \${PKG_NAME}&quot;</span>
<span class="line">     # 长命令可以通过引号包裹，再用&amp;&amp;连接表示顺序执行命令</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变量-variables" tabindex="-1"><a class="header-anchor" href="#变量-variables"><span>变量：variables</span></a></h3><p>变量可以被覆盖，并且是按照以下优先级依次降低</p><ol><li><a href="https://docs.gitlab.com/ce/ci/triggers/README.html#making-use-of-trigger-variables" target="_blank" rel="noopener noreferrer">Trigger variables</a>, <a href="https://docs.gitlab.com/ce/ci/pipelines/schedules.html#using-variables" target="_blank" rel="noopener noreferrer">scheduled pipeline variables</a>, and <a href="https://docs.gitlab.com/ce/ci/variables/README.html#override-a-variable-by-manually-running-a-pipeline" target="_blank" rel="noopener noreferrer">manual pipeline run variables</a>.</li><li>Project-level <a href="https://docs.gitlab.com/ce/ci/variables/README.html#custom-environment-variables" target="_blank" rel="noopener noreferrer">variables</a> or <a href="https://docs.gitlab.com/ce/ci/variables/README.html#protect-a-custom-variable" target="_blank" rel="noopener noreferrer">protected variables</a>. 项目 CI 设置的变量</li><li>Group-level <a href="https://docs.gitlab.com/ce/ci/variables/README.html#group-level-environment-variables" target="_blank" rel="noopener noreferrer">variables</a> or <a href="https://docs.gitlab.com/ce/ci/variables/README.html#protect-a-custom-variable" target="_blank" rel="noopener noreferrer">protected variables</a>. gitlab 分组下 CI 设置的变量</li><li>Instance-level <a href="https://docs.gitlab.com/ce/ci/variables/README.html#instance-level-cicd-environment-variables" target="_blank" rel="noopener noreferrer">variables</a> or <a href="https://docs.gitlab.com/ce/ci/variables/README.html#protect-a-custom-variable" target="_blank" rel="noopener noreferrer">protected variables</a>.</li><li><a href="https://docs.gitlab.com/ce/ci/variables/README.html#inherit-environment-variables" target="_blank" rel="noopener noreferrer">Inherited environment variables</a>.</li><li><a href="https://docs.gitlab.com/ce/ci/yaml/README.html#job-variables" target="_blank" rel="noopener noreferrer">YAML 定义的 job 级别变量</a></li><li><a href="https://docs.gitlab.com/ce/ci/yaml/README.html#variables" target="_blank" rel="noopener noreferrer">YAML 定义的全局变量</a></li><li><a href="https://docs.gitlab.com/ce/ci/variables/README.html#deployment-variables" target="_blank" rel="noopener noreferrer">部署环境变量</a></li><li><a href="https://docs.gitlab.com/ce/ci/variables/README.html#predefined-variables-environment-variables" target="_blank" rel="noopener noreferrer">预定义的环境变量</a> (优先级最低)</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token literal-property property">variables</span><span class="token operator">:</span></span>
<span class="line">  <span class="token constant">BUSINESS_LINE</span><span class="token operator">:</span> $<span class="token punctuation">{</span><span class="token constant">BUSINESS_LINE</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="job-的执行条件" tabindex="-1"><a class="header-anchor" href="#job-的执行条件"><span>job 的执行条件</span></a></h3><p>only（定义 job 执行条件）和 except（定义了 job 不被执行的条件）两个参数定义了 job 被创建的条件:</p><ul><li>except 和 only 如果没有指定 name，默认是 tags 和 branches</li><li>only 和 except 如果都存在在一个 job 声明中，则所需引用将会被 only 和 except 所定义的分支过滤.</li><li>only 和 except 允许使用正则</li><li>only 和 except 允许使用指定仓库地址，但是不 forks 仓库</li></ul><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token key atrule">only</span><span class="token punctuation">:</span> <span class="token comment">#都是或者的关系</span></span>
<span class="line">   <span class="token punctuation">-</span> tags      <span class="token comment"># tag 分支 commit 之后触发</span></span>
<span class="line">   <span class="token punctuation">-</span> triggers  <span class="token comment"># API 触发</span></span>
<span class="line">   <span class="token punctuation">-</span> <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token comment"># 当你的Git Refs对应的是一个分支时触发</span></span>
<span class="line">   <span class="token punctuation">-</span> tags      <span class="token comment"># 当你的Git Refs对应的是一个标签时触发</span></span>
<span class="line">   <span class="token punctuation">-</span> pushes    <span class="token comment"># 当你使用git push时触发</span></span>
<span class="line">   <span class="token punctuation">-</span> web       <span class="token comment"># 当你使用Web界面的Run Pipeline时触发</span></span>
<span class="line">   <span class="token punctuation">-</span> merge_requests <span class="token comment">#当你创建或者更新一个merge_requests时触发</span></span>
<span class="line">   <span class="token punctuation">-</span> schedules <span class="token comment"># 每日构建触发</span></span>
<span class="line">   <span class="token punctuation">-</span> /^issue<span class="token punctuation">-</span>.<span class="token important">*$/</span> <span class="token comment"># job将会只在issue-开头的refs下执行</span></span>
<span class="line">   <span class="token punctuation">-</span> branches@gitlab<span class="token punctuation">-</span>org/gitlab<span class="token punctuation">-</span>ce  <span class="token comment">#在父仓库gitlab-org/    gitlab-ce有提交时运行。</span></span>
<span class="line"><span class="token comment"># 对分支的限制触发,只在分支是master和schedules的时候触发</span></span>
<span class="line">    <span class="token key atrule">refs</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> master</span>
<span class="line">      <span class="token punctuation">-</span> schedules</span>
<span class="line">    <span class="token key atrule">kubernetes</span><span class="token punctuation">:</span> active</span>
<span class="line"><span class="token comment"># 变量条件触发，当RELEASE变量是staging或者STAGING存在时触发</span></span>
<span class="line">    <span class="token key atrule">variables</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> $RELEASE == &quot;staging&quot;</span>
<span class="line">      <span class="token punctuation">-</span> $STAGING</span>
<span class="line">      <span class="token punctuation">-</span> ($CI_COMMIT_BRANCH == &quot;master&quot; <span class="token punctuation">|</span><span class="token punctuation">|</span> $CI_COMMIT_BRANCH == &quot;develop&quot;) <span class="token important">&amp;&amp;</span> $MY_VARIABLE</span>
<span class="line"><span class="token comment"># 文件变化才触发</span></span>
<span class="line">    <span class="token key atrule">changes</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> Dockerfile</span>
<span class="line">      <span class="token punctuation">-</span> docker/scripts/*</span>
<span class="line">      <span class="token punctuation">-</span> dockerfiles/<span class="token important">**/*</span></span>
<span class="line">      <span class="token punctuation">-</span> more_scripts/<span class="token important">*.</span><span class="token punctuation">{</span>rb<span class="token punctuation">,</span>py<span class="token punctuation">,</span>sh<span class="token punctuation">}</span></span>
<span class="line"><span class="token key atrule">rules</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">if</span><span class="token punctuation">:</span> <span class="token string">&#39;$CI_PIPELINE_SOURCE == &quot;merge_request_event&quot;&#39;</span></span>
<span class="line">      <span class="token key atrule">when</span><span class="token punctuation">:</span> manual</span>
<span class="line">      <span class="token key atrule">allow_failure</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">if</span><span class="token punctuation">:</span> <span class="token string">&#39;$CI_PIPELINE_SOURCE == &quot;schedule&quot;&#39;</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">if</span><span class="token punctuation">:</span> ($CI_COMMIT_BRANCH == &quot;master&quot; <span class="token punctuation">|</span><span class="token punctuation">|</span> $CI_COMMIT_BRANCH == &quot;develop&quot;) <span class="token important">&amp;&amp;</span> $MY_VARIABLE</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://i.loli.net/2020/12/13/TKO5iznorx2Vv46.png" alt="image-20201213200855935"></p><h3 id="image-services" tabindex="-1"><a class="header-anchor" href="#image-services"><span>image/services</span></a></h3><p>该关键字指定一个任务（job）所使用的 docker 镜像，例如 <code>image: python:latest</code>使用 Python 的最新镜像。</p><p>镜像下载的策略：</p><ul><li>never： 当使用这个策略，会禁止 Gitlab Runner 从 Docker hub 或者其他地方下拉镜像，只能使用自己手动下拉的镜像</li><li>if-not-present： 当使用这个策略，Runner 会先检测本地是否有镜像，有的话使用该镜像，如果没有再去下拉。这个策略如果再配合定期删除镜像，就能达到比较好的效果。</li><li>always： 这个是 gitlab-ci 默认使用的策略，即每一次都是重新下拉镜像，导致的结果就是比较耗时间</li></ul><h3 id="artifacts" tabindex="-1"><a class="header-anchor" href="#artifacts"><span>artifacts</span></a></h3><p>artifacts 被用于在 job 作业成功后将制定列表里的文件或文件夹附加到 job 上，传递给下一个 job ，如果要在两个 job 之间传递 artifacts，你必须设置 dependencies,下面有几个例子</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token key atrule">artifacts</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;$CI_JOB_NAME&quot;</span> <span class="token comment"># artifacts压缩包重命名</span></span>
<span class="line">  <span class="token key atrule">untracked</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 传递所有git没有追踪的文件</span></span>
<span class="line">  <span class="token key atrule">when</span><span class="token punctuation">:</span> on_failure <span class="token comment"># 当job执行失败时，上传artifacts,还有on_success 这个值是默认的，当job成功时上传artifacts。always 不管失败与否，都上传</span></span>
<span class="line">  <span class="token key atrule">artifacts</span><span class="token punctuation">:</span> expire_in <span class="token comment"># 设置 artifacts 上传包的失效时间. 如果不设置，artifacts 的打包是永远存在于 gitlab上 的，&#39;3 mins 4 sec&#39;,&#39;2 hrs 20 min&#39;,&#39;2h20min&#39;,&#39;6 mos 1 day&#39;,&#39;47 yrs 6 mos and 4d&#39;,&#39;3 weeks and 2 days&#39;</span></span>
<span class="line">  <span class="token key atrule">paths</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> binaries/ <span class="token comment">#传递所有binaries和.config：</span></span>
<span class="line">    <span class="token punctuation">-</span> .config</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gitlab-ci-实战踩坑" tabindex="-1"><a class="header-anchor" href="#gitlab-ci-实战踩坑"><span>Gitlab-CI 实战踩坑</span></a></h2><h3 id="问题一-yarn-的时候报错" tabindex="-1"><a class="header-anchor" href="#问题一-yarn-的时候报错"><span>问题一：<strong>yarn 的时候报错</strong></span></a></h3><p>解决方案：yarn 之前配 yarn 源，添加 yarn config set registry \${url}</p><h3 id="问题二-permission-denied" tabindex="-1"><a class="header-anchor" href="#问题二-permission-denied"><span>问题二：<strong>permission denied</strong></span></a></h3><p>一开始是以为是密码错误，密码变量带有特殊字符，修改为用单引号包裹后还是报错。以上两个错误交替出现，最后用 sudo：yes 解决了，<strong>删除文件需要较高的权限</strong></p><p>解决：在 ansible 的 task 上加上 sudo: yes 解决权限问题</p><p><img src="https://i.loli.net/2021/01/06/xvVL45wmRJ9CQTS.png" alt="image-20210106215244122"></p><h3 id="问题三-配置-ssh-用户权限" tabindex="-1"><a class="header-anchor" href="#问题三-配置-ssh-用户权限"><span>问题三：配置 ssh 用户权限</span></a></h3><p>北京：需要克隆子模块，而子模块的 url 是 ssh 地址，需要配置用户 ssh 才能 clone 仓库，采用以下配置 ssh 用户权限</p><p>node 镜像低也会导致某些错误</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">image: \${image}</span>
<span class="line">script:</span>
<span class="line">    - mkdir -p  ~/.ssh</span>
<span class="line">    - chmod 700 ~/.ssh</span>
<span class="line">    - &#39;[[ -f /.dockerenv ]] &amp;&amp; echo -e &quot;Host *\\n\\tStrictHostKeyChecking no\\n\\n&quot; &gt; ~/.ssh/config&#39;  #设ssh配置:每次连接一个新主机不做确认和警告</span>
<span class="line">    - eval $(ssh-agent -s)  # 启动ssh-agent</span>
<span class="line">    - ssh-add &lt; (echo &quot;$PRIVATE_SSH_KEY&quot;) # 添加私钥到ssh-agent代理</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="问题四-stage-之间文件传递" tabindex="-1"><a class="header-anchor" href="#问题四-stage-之间文件传递"><span>问题四：stage 之间文件传递</span></a></h3><p>每个 stage 是独立的，当前 stage 生成的文件会立即执行完后会立即删除，那下个 stage 要如何拿到上个 stage 的文件呢</p><ul><li>此处有 cache 和 atifactory 两种方案对比，两者都可以传递，但是 cache 不是可靠的，只是作为优化的一种方案，不能确保两个 stage 之间一定能传递文件</li><li>不宜传递太大的文件，而且传递的文件太大例如 node_modules,会报错</li><li>artifacts 可以在 gitlab 的对应 pipeline 上直接点击下载，可以设置制品的过期时间<img src="https://i.loli.net/2021/01/06/xvVL45wmRJ9CQTS.png" alt="image-20210106215244122"></li></ul><h3 id="问题五-prepare-failed" tabindex="-1"><a class="header-anchor" href="#问题五-prepare-failed"><span>问题五：prepare failed</span></a></h3><p>解决：</p><p>指定 tags 为 k8s，不指定会报错</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">test1:</span>
<span class="line"> stage: test1</span>
<span class="line"> image: \${image}</span>
<span class="line"> script:</span>
<span class="line"> - mkdir dist</span>
<span class="line"> - cd dist &amp;&amp; touch markdown.md &amp;&amp; cd -</span>
<span class="line"> tags:</span>
<span class="line"> - k8s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="问题六-不能用环境变量指定-artifacts-path" tabindex="-1"><a class="header-anchor" href="#问题六-不能用环境变量指定-artifacts-path"><span>问题六：不能用环境变量指定 artifacts：path</span></a></h3><p>解决：使用通配符</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">artifacts:</span>
<span class="line">  - paths:</span>
<span class="line">  - &quot;*.zip&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="问题七-ssh-执行命令-显示-command-not-find" tabindex="-1"><a class="header-anchor" href="#问题七-ssh-执行命令-显示-command-not-find"><span>问题七： ssh 执行命令，显示 command not find</span></a></h3><ul><li><p>问题：在 ssh 登录或者 ansible 登录执行命令报错显示 command not find</p></li><li><p>原因 ： ssh 登录少了环境变量</p></li><li><p><strong>首先了解一下 login shell 与 non-login shell</strong></p><p>/etc/profile 及/etc/bashrc 的区别： <strong>login shell</strong>：取得 bash 时需要完整的登入流程的，就称为 login shell。举例来说，你要由 tty1~tty6 登入，需要输入用户的账号和密码，此时取得的 bash 就称为『login shell』啰； <strong>non-login shell</strong>：取得 bash 接口的方法不需要重复登入的举动，举例来说，(1)你以 Xwindow 登入 Linux 后，再以 X 的图形化接口启动终端机，此时那个终端接口并没有需要再次的输入账号和密码，那个 bash 的环境就称为 non-login shell 了。(2)你在原本的 bash 环境下再次下达 bash 这个命令，同样的也没有输入账号密码，那第二个 bash (子程序)也是 non-login shell 。</p></li></ul><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token punctuation">-</span> mkdir ~/.ssh <span class="token punctuation">-</span>p</span>
<span class="line"><span class="token punctuation">-</span> chmod 700 ~/.ssh</span>
<span class="line"><span class="token punctuation">-</span> <span class="token string">&#39;[[ -f /.dockerenv ]] &amp;&amp; echo -e &quot;Host *\\n\\tStrictHostKeyChecking no\\n\\n&quot; &gt; ~/.ssh/config&#39;</span></span>
<span class="line"><span class="token punctuation">-</span> eval $(ssh<span class="token punctuation">-</span>agent <span class="token punctuation">-</span>s)</span>
<span class="line"><span class="token punctuation">-</span> echo &quot;$PRIVATE_SSH_KEY&quot;</span>
<span class="line"><span class="token punctuation">-</span> ssh<span class="token punctuation">-</span>add &lt;(echo &quot;$PRIVATE_SSH_KEY&quot;)</span>
<span class="line"><span class="token punctuation">-</span> ssh <span class="token punctuation">-</span>T $<span class="token punctuation">{</span>USER<span class="token punctuation">}</span>@$<span class="token punctuation">{</span>HOST<span class="token punctuation">}</span> &quot;source ~/.bash_profile; cd $<span class="token punctuation">{</span>path<span class="token punctuation">}</span> <span class="token important">&amp;&amp;</span> yarn release&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="https://www.yuque.com/plantegg/weyi1s/mysyy3#342wyn" target="_blank" rel="noopener noreferrer">测试好的脚本放到</a> crontab 里就报错: 找不到命令</p><p><a href="https://blog.csdn.net/u010871982/article/details/78525367" target="_blank" rel="noopener noreferrer">关于 ansible 远程执行的环境变量问题（login shell &amp; nonlogin shelll）</a></p><p><a href="https://zhuanlan.zhihu.com/p/60914157" target="_blank" rel="noopener noreferrer">远程执行命令的填坑记录</a></p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><p><a href="https://juejin.cn/post/6844904045581172744#heading-11" target="_blank" rel="noopener noreferrer">Gitlab-CI 使用教程</a></p><p><a href="https://docs.gitlab.com/ee/ci/README.html" target="_blank" rel="noopener noreferrer">Gitlab-ci-官方文档</a></p>`,73),t=[i];function p(c,r){return n(),a("div",null,t)}const u=s(l,[["render",p],["__file","gitlab-ci.html.vue"]]),d=JSON.parse('{"path":"/dev-ops/gitlab-ci.html","title":"Gitlab-CI","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":3,"title":"gitlab-runner","slug":"gitlab-runner","link":"#gitlab-runner","children":[]},{"level":3,"title":"gitlab 操作","slug":"gitlab-操作","link":"#gitlab-操作","children":[]},{"level":3,"title":"Skip Pipeline","slug":"skip-pipeline","link":"#skip-pipeline","children":[]},{"level":3,"title":"stages","slug":"stages","link":"#stages","children":[]},{"level":3,"title":"Jobs","slug":"jobs","link":"#jobs","children":[]},{"level":3,"title":"pages","slug":"pages","link":"#pages","children":[]},{"level":3,"title":"script","slug":"script","link":"#script","children":[]},{"level":3,"title":"变量：variables","slug":"变量-variables","link":"#变量-variables","children":[]},{"level":3,"title":"job 的执行条件","slug":"job-的执行条件","link":"#job-的执行条件","children":[]},{"level":3,"title":"image/services","slug":"image-services","link":"#image-services","children":[]},{"level":3,"title":"artifacts","slug":"artifacts","link":"#artifacts","children":[]},{"level":2,"title":"Gitlab-CI 实战踩坑","slug":"gitlab-ci-实战踩坑","link":"#gitlab-ci-实战踩坑","children":[{"level":3,"title":"问题一：yarn 的时候报错","slug":"问题一-yarn-的时候报错","link":"#问题一-yarn-的时候报错","children":[]},{"level":3,"title":"问题二：permission denied","slug":"问题二-permission-denied","link":"#问题二-permission-denied","children":[]},{"level":3,"title":"问题三：配置 ssh 用户权限","slug":"问题三-配置-ssh-用户权限","link":"#问题三-配置-ssh-用户权限","children":[]},{"level":3,"title":"问题四：stage 之间文件传递","slug":"问题四-stage-之间文件传递","link":"#问题四-stage-之间文件传递","children":[]},{"level":3,"title":"问题五：prepare failed","slug":"问题五-prepare-failed","link":"#问题五-prepare-failed","children":[]},{"level":3,"title":"问题六：不能用环境变量指定 artifacts：path","slug":"问题六-不能用环境变量指定-artifacts-path","link":"#问题六-不能用环境变量指定-artifacts-path","children":[]},{"level":3,"title":"问题七： ssh 执行命令，显示 command not find","slug":"问题七-ssh-执行命令-显示-command-not-find","link":"#问题七-ssh-执行命令-显示-command-not-find","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"updatedTime":1717633708000,"contributors":[{"name":"liujia6","email":"liujia11@qianxin.com","commits":1}]},"filePathRelative":"dev-ops/gitlab-ci.md"}');export{u as comp,d as data};
