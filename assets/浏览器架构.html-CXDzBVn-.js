import{_ as e,c as r,o as s,a as i}from"./app-B_HqqEoK.js";const o="/assets/1717618998314-Co4f0bDY.png",l={},t=i('<h1 id="浏览器架构" tabindex="-1"><a class="header-anchor" href="#浏览器架构"><span>浏览器架构</span></a></h1><h2 id="进程与线程" tabindex="-1"><a class="header-anchor" href="#进程与线程"><span>进程与线程</span></a></h2><ul><li>进程是内存分配的最小单位</li></ul><h4 id="进程和进程之间是相互隔离" tabindex="-1"><a class="header-anchor" href="#进程和进程之间是相互隔离"><span>进程和进程之间是相互隔离</span></a></h4><ul><li>当一个页面或插件崩溃的时候，影响到的仅仅是当前的页面进程或者插件进程，并不会影响到其他页面。</li><li>每新打开一个页面都会为其新建一个渲染进程。JS也是运行在渲染进程中，即便是JS阻塞了渲染进程，它影响的也只是当前的页面</li><li>当关闭这个页面时，这个进程所占用的所有内存会被系统回收，所以根本不存在内存泄漏的问题。</li><li>选项卡中的每个跨站点 iframe 都会获得单独的渲染器进程。</li><li>Chrome 把插件进程和渲染进程锁在沙箱里面，这样即使在渲染进程或者插件进程里面执行了恶意程序，恶意程序也无法突破沙箱去获取系统权限</li></ul><h2 id="浏览器结构" tabindex="-1"><a class="header-anchor" href="#浏览器结构"><span>浏览器结构</span></a></h2><p><img src="'+o+'" alt="1717618998314"></p><p>从图中可以看出，现在的 Chrome 架构中包括下面几个进程：</p><ul><li><p>浏览器进程。负责界面展示，用户交互，子进程管理，文件存取等</p><p>(控制地址栏、书签前进后退按钮，标签页创建/销毁、页面显示、网络请求、资源管理下载、绘制渲染进程的位图)</p><ul><li>UI thread：绘制浏览器顶部按钮和导航栏输入框等组件</li><li>network thread：处理网络请求，从网上获取数据；</li><li>storage thread： 控制文件等的访问；</li></ul></li><li><p>GPU/Viz （Graphics Processing Unit）进程。其实，Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 <strong>3D CSS</strong> 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。</p><ul><li>Raster</li></ul></li><li><p>网络进程。主要负责页面的网络资源加载。</p></li><li><p>插件进程。主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。</p></li><li><p><strong>渲染进程</strong>:将 HTML、CSS 和 JavaScript 转换为网页，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在<strong>沙箱模式</strong>下,与操作系统隔离，增加安全性。</p><ul><li>一个主线程（main thread）</li><li>多个工作线程（work thread例如web worker）</li><li>一个合成器线程（compositor thread）：在GUI渲染线程后执行，将GUI渲染线程生成的带绘制列表转换为位图。</li><li>多个光栅化线程（raster thread）</li><li>IO线程：用来和其他进程进行通信</li><li><strong>GUI 渲染线程</strong></li><li><strong>JavaScript 引擎线程</strong></li></ul></li><li><p>GUI渲染线程与JS引擎线程互斥</p></li><li><p><strong>定时触发器线程</strong></p></li><li><p><strong>事件触发线程</strong></p></li><li><p><strong>http 异步请求线程</strong></p></li></ul><h3 id="多进程架构优化" tabindex="-1"><a class="header-anchor" href="#多进程架构优化"><span>多进程架构优化</span></a></h3><p>Chrome将架构从多进程模型转变成面向服务。浏览器将功能以服务的方式提供，以解决多进程架构中的问题。</p><p><img src="https://static001.geekbang.org/infoq/72/72ab917eee34ffd4b8bb1352a8f73ad6.png" alt="img"></p><p>当Chrome运行在拥有强大硬件的计算机上时，会将一个服务以多个进程的方式实现，提高稳定性，当计算机硬件资源紧张时，则可以将多个服务放在一个进程中节省资源。</p><h4 id="浏览器的进程模式" tabindex="-1"><a class="header-anchor" href="#浏览器的进程模式"><span>浏览器的进程模式</span></a></h4><p>为了节省内存，Chrome提供了四种进程模式（Process Models），不同的进程模式会对 tab 进程做不同的处理。</p><ul><li><strong>Process-per-site-instance</strong> (default) - 同一个 <strong>site-instance</strong> 使用一个进程</li><li><strong>Process-per-site -</strong> 同一个 <strong>site</strong> 使用一个进程</li><li><strong>Process-per-tab -</strong> 每个 tab 使用一个进程</li><li><strong>Single process -</strong> 所有 tab 共用一个进程</li></ul><p>因为这个是 Chrome 默认使用的模式，也就是几乎所有的用户都在用的模式。当你打开一个 tab 访问 a.baidu.com ，然后再打开一个 tab 访问 b.baidu.com，这两个 tab 会使用<strong>两个进程</strong>。而如果你在 a.baidu.com 中，通过JS代码打开了 b.baidu.com 页面，这两个 tab 会使用<strong>同一个进程</strong>。</p><p>可以看一下浏览器的任务管理器</p><p>这几个进程之间的关系是什么呢？</p><p>首先，当我们是要浏览一个网页，我们会在浏览器的地址栏里输入URL，这个时候 <code>Browser Process</code>会向这个URL发送请求，获取这个URL的HTML内容，然后将HTML交给 <code>Renderer Process</code>，<code>Renderer Process</code>解析HTML内容，解析遇到需要请求网络的资源又返回来交给 <code>Browser Process</code>进行加载，同时通知 <code>Browser Process</code>，需要 <code>Plugin Process</code>加载插件资源，执行插件代码。解析完成后，<code>Renderer Process</code>计算得到图像帧，并将这些图像帧交给 <code>GPU Process</code>，<code>GPU Process</code>将其转化为图像显示屏幕。</p>',20),a=[t];function n(c,p){return s(),r("div",null,a)}const h=e(l,[["render",n],["__file","浏览器架构.html.vue"]]),g=JSON.parse('{"path":"/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84.html","title":"浏览器架构","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"进程与线程","slug":"进程与线程","link":"#进程与线程","children":[]},{"level":2,"title":"浏览器结构","slug":"浏览器结构","link":"#浏览器结构","children":[{"level":3,"title":"多进程架构优化","slug":"多进程架构优化","link":"#多进程架构优化","children":[]}]}],"git":{"updatedTime":1720052070000,"contributors":[{"name":"liujia6","email":"liujia11@qianxin.com","commits":1}]},"filePathRelative":"浏览器/浏览器架构.md"}');export{h as comp,g as data};
