import{_ as n,c as s,o as a,a as e}from"./app-6XP77ETO.js";const t={},p=e(`<h1 id="vue-使用总结" tabindex="-1"><a class="header-anchor" href="#vue-使用总结"><span>vue 使用总结</span></a></h1><h2 id="vue-extend" tabindex="-1"><a class="header-anchor" href="#vue-extend"><span><a href="https://juejin.cn/post/6844904126065688583" target="_blank" rel="noopener noreferrer">Vue.extend</a></span></a></h2><p>是什么：获取Vue构造函数的子类</p><p>正常情况下我们用new Vue()去创建一个新的实例，通过这个Vue构造函数use实现一些插件，那么在有的情况下我们需要一个新的Vue构造函（会在这个新的Vue构造函数的基础上添加属性等）并且需要继承Vue的一些属性和静态方法等</p><ul><li>Vue.extend 返回一个 Vue 的子类，可以再对这个子类构造生成实例</li><li>其实和 new Vue.extend Vue 构造函数用法一样，只不过使用 vue.extend 它会帮你保证和 Vue 的全局属性和方法等一致，是 Vue 的继承子类</li><li>通过 vue.extend 方法传入 option 后返回一个组件实例</li><li>vue3 后去除了该 API，如果 vue3，需要使用，可以考虑使用 extend 根节点</li><li>调研 element-plus 和 antd 的 Message 组件是如何替换 Vue.extend</li><li>都是使用 createVNode 和 render 组合使用</li></ul><p>使用场景</p><ul><li>微前端下每个微应用都应该继承容器的 Vue，实现在容器注册 vue 插件，每个微应用都能使用同样使用容器注册的 vue 插件</li><li>编程式调用组件例如 element-ui 的$msg(但是此处其实是无vue插件依赖的，直接用new Vue创建也没问题)</li></ul><h2 id="slots" tabindex="-1"><a class="header-anchor" href="#slots"><span>slots</span></a></h2><ul><li>如何提供具名插槽的默认值 <ul><li>先使用插槽，再用&lt;slot/&gt;标签提供插槽</li></ul></li><li>使用插槽 <ul><li>具名插槽 <ul><li>2.6 版本之前的旧语法：&lt;template slot=&quot;footer&quot;&gt;，通过这种方式使用插槽，表明提供$slots <ul><li>适用于 jsx 中组件或者 dom 表明是父组件的具名插槽，可以不通过 scopedSlots 作用域插槽去表示</li></ul></li><li>新语法：#footer</li></ul></li><li>作用域插槽 <ul><li>旧语法：&lt;template slot-scope=&quot;context&quot;&gt;</li><li>新语法：#default=&quot;context&quot;</li></ul></li></ul></li><li><a href="https://github.com/vuejs/babel-plugin-jsx#installation" target="_blank" rel="noopener noreferrer">vue3 jsx</a></li><li><a href="https://vuejs.bootcss.com/guide/render-function.html#slots-%E5%92%8C-children-%E5%AF%B9%E6%AF%94" target="_blank" rel="noopener noreferrer">slots()和 children 对比</a><ul><li>children = ALL slots()</li><li>slots 把插槽细分了</li><li>用 children 向子组件传递，可以传递所有插槽，而不是使用 slots.default</li><li>有需要采用 children，没有的话，用 slots.default÷</li></ul></li></ul><h2 id="vue-单根结点" tabindex="-1"><a class="header-anchor" href="#vue-单根结点"><span>vue 单根结点</span></a></h2><ul><li><a href="vuejs/vue#7088" title="comment">vue 为什么根节点只能用一个</a></li><li><a href="https://github.com/Thunberg087/vue-fragment/blob/master/src/component.js" target="_blank" rel="noopener noreferrer">vue-fragment</a></li></ul><p><strong>原因</strong></p><ul><li>由于技术限制：当前的 diff 算法实现都是基于 vNode 和 dom 真实元素一一对应，依赖于具有单个根的组件，如果允许 Fragments 需要对该算法进行重大更改，不仅要使其正常工作，而且必须使其具有高性能，这是一项非常艰巨的任务</li><li>代表任何组件的 vue 实例需要绑定到一个单一的 DOM 元素中。唯一可以创建一个具有多个 DOM 节点的组件的方法就是创建一个没有底层 Vue 实例的功能组件</li></ul><p><strong>两种解决方案</strong>：</p><ul><li>使用 vue 功能组件（见<a href="https://github.com/vuejs/vue/issues/7088#issuecomment-345855657" target="_blank" rel="noopener noreferrer">本期第二条评论</a>）</li><li>使用<a href="https://github.com/y-nk/vue-fragments" target="_blank" rel="noopener noreferrer">vue-fragments</a>（第三方扩展）</li><li><ul><li>render 函数中使用 div 包裹子组件</li><li>在 mounted 后，修改 this.$el,将改了后的 dom 插入到 parent 里，并删除原有的 dom</li></ul></li></ul><p><strong>REACT 实现</strong></p><ul><li>在 React 中，解决方法是通过的一个 React.Fragment 标签创建一个虚拟元素</li></ul><h2 id="函数式组件" tabindex="-1"><a class="header-anchor" href="#函数式组件"><span>函数式组件</span></a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/template" target="_blank" rel="noopener noreferrer">&lt;template&gt;：内容模板元素</a></p><p><strong>函数式组件（functional component）</strong></p><ul><li>是一个不持有状态 data、实例 this 和生命周期的组件。</li><li>没有 data、生命周期和 this，函数式组件又叫<strong>无状态组件</strong>（stateless component）。</li></ul><p>在 Vue 2 中，函数式组件主要有两个<strong>应用场景</strong></p><ul><li>作为性能优化，因为它们的初始化速度比有状态组件快得多</li><li>返回多个根节点</li></ul><p>在 Vue 3 中，函数式组件剩下的唯一应用场景就是<strong>简单组件</strong>，比如创建动态标题的组件。否则，建议你像平常一样使用有状态组件</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> h <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">DynamicHeading</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">h</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>props<span class="token punctuation">.</span>level<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>attrs<span class="token punctuation">,</span> context<span class="token punctuation">.</span>slots<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">DynamicHeading<span class="token punctuation">.</span>props <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;level&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> DynamicHeading<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;MyInput&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">functional</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// NOTE 函数式组件没有 this</span></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">h<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> props<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> context<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// DOM 属性</span></span>
<span class="line">      <span class="token literal-property property">domProps</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">value</span><span class="token operator">:</span> props<span class="token punctuation">.</span>value<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function-variable function">input</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> target <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          data<span class="token punctuation">.</span>on<span class="token punctuation">[</span><span class="token string">&#39;my-change&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token comment">// listeners 是 data.on 的别名</span></span>
<span class="line">          listeners<span class="token punctuation">[</span><span class="token string">&#39;my-input&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          listeners<span class="token punctuation">.</span><span class="token function">input</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="抽象组件" tabindex="-1"><a class="header-anchor" href="#抽象组件"><span>抽象组件</span></a></h2><ul><li><p>没有真实的节点，不去解析渲染成真实的 dom 节点，而只是作为中间的数据过渡层处理，在 keep-alive 中是对组件缓存的处理。</p></li><li><p>&lt;keep-alive&gt;、&lt;transition&gt;、&lt;transition-group&gt;等组件的实现是一个对象，注意它有一个属性 abstract 为 true，表明是它一个抽象组件</p><ul><li>在抽象组件的<strong>生命周期</strong>过程中，我们可以对包裹的子组件<strong>监听的事件进行拦截</strong>，也可以对子组件进行 <strong>Dom 操作</strong>，从而可以对我们需要的功能进行封装，而不需要关心子组件的具体实现。</li></ul></li><li><p>set(vnode, <code>data.on[\${eventName}]</code>, debounce(event, this.wait, this.options));</p></li><li><p>原理：就是父子组件建立关系时会跳过 abstract 组件</p></li></ul><p>参考</p><ul><li><a href="https://juejin.cn/post/6844903838470635528" target="_blank" rel="noopener noreferrer">用 Vue 编写抽象组件：实现一个按钮 debounce</a></li><li><a href="https://www.bookstack.cn/read/5865c0921b69e6006b3145a1/spilt.4.src-%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82Vue%E4%B8%ADkeep-alive%E7%9A%84%E9%AD%94%E6%B3%95-%E4%B8%8A.md" target="_blank" rel="noopener noreferrer">原理</a></li></ul><p><a href="https://github.com/answershuto/learnVue/blob/master/docs/Vue.js%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0DOM%E7%AD%96%E7%95%A5%E5%8F%8AnextTick.MarkDown" target="_blank" rel="noopener noreferrer">learnVue/Vue.js异步更新DOM策略及nextTick.MarkDown at master · answershuto/learnVue</a></p>`,31),l=[p];function o(i,c){return a(),s("div",null,l)}const r=n(t,[["render",o],["__file","Vue使用总结.html.vue"]]),d=JSON.parse('{"path":"/Vue/Vue%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93.html","title":"vue 使用总结","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Vue.extend","slug":"vue-extend","link":"#vue-extend","children":[]},{"level":2,"title":"slots","slug":"slots","link":"#slots","children":[]},{"level":2,"title":"vue 单根结点","slug":"vue-单根结点","link":"#vue-单根结点","children":[]},{"level":2,"title":"函数式组件","slug":"函数式组件","link":"#函数式组件","children":[]},{"level":2,"title":"抽象组件","slug":"抽象组件","link":"#抽象组件","children":[]}],"git":{"updatedTime":1720052070000,"contributors":[{"name":"liujia6","email":"liujia11@qianxin.com","commits":1}]},"filePathRelative":"Vue/Vue使用总结.md"}');export{r as comp,d as data};
