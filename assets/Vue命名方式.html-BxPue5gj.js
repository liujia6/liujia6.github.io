import{_ as a,c as e,o as n,a as s}from"./app-B_HqqEoK.js";const t={},l=s(`<h1 id="vue-命名规范" tabindex="-1"><a class="header-anchor" href="#vue-命名规范"><span>vue 命名规范</span></a></h1><ul><li>定义组件名方法 <ol><li>采用短横线分隔命名</li><li>采用首字母大写命名：既可以用短横线分割名引用，也可以用首字母大写引用，注意在 dom 模板中使用只有短横线有效</li></ol></li><li>prop 名 <ul><li>html 中的特性名是大小写不敏感的，浏览器会把所有大写字符解释为小写字符，当你使用 dom 中的模板时 camelCase 格式的 prop 名需要使用其等价的 kebab-case 命名；例如</li></ul></li></ul><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome</span> <span class="token attr-name">greeting-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hi<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome</span><span class="token punctuation">&gt;</span></span> props:{ greetingText:String }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>事件名 <ul><li>事件名不会被用作一个 JavaScript 变量名或属性名，所以就没有理由使用 camelCase 或 PascalCase 了。并且 v-on 事件监听器在 DOM 模板中会被自动转换为全小写 (因为 HTML 是大小写不敏感的)，所以 v-on:myEvent 将会变成 v-on:myevent——导致 myEvent 不可能被监听到。</li></ul></li></ul><p>因此，我们推荐你始终使用 kebab-case 的事件名</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&quot;dom-resize&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结：</span></a></h3><p>采用 kebab-case 短横线分隔法命名</p><ul><li>文件夹</li><li>单文件组件 component 名</li><li>组件在 html 模板中使用<code>&lt;my-conponent&gt;&lt;/my-component&gt;</code></li><li>在模板中 prop 传入到组件中<code>&lt;my-conponent set-text=&quot;hello&quot;&gt;&lt;/my-component&gt;</code></li><li>所有事件名 this.$emit(&#39;api-reload&#39;)</li></ul><p>采用 PascalCase 大驼峰命名</p><ul><li>公共基础组件名 BaseButton</li><li>js 中 component 注册组件</li><li>组件的 name 属性</li><li>class 类</li></ul><p>采用 camelCase 小驼峰命名</p><ul><li>子组件接受 prop 属性 props：{setText：String}</li><li>变量和函数一般用小驼峰</li></ul><p>其他</p><ul><li>常量 const PRICE_MAX=1000，采用大写字符+下划线</li><li>私有变量 下划线开头+小驼峰 let _this=this</li></ul>`,15),i=[l];function p(o,c){return n(),e("div",null,i)}const r=a(t,[["render",p],["__file","Vue命名方式.html.vue"]]),m=JSON.parse('{"path":"/Vue/Vue%E5%91%BD%E5%90%8D%E6%96%B9%E5%BC%8F.html","title":"vue 命名规范","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"总结：","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1720052070000,"contributors":[{"name":"liujia6","email":"liujia11@qianxin.com","commits":1}]},"filePathRelative":"Vue/Vue命名方式.md"}');export{r as comp,m as data};
