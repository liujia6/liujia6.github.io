import{_ as n,c as s,o as a,a as p}from"./app-CVfBBX0w.js";const e={},t=p(`<h1 id="二进制" tabindex="-1"><a class="header-anchor" href="#二进制"><span>二进制</span></a></h1><h2 id="arraybuffer" tabindex="-1"><a class="header-anchor" href="#arraybuffer"><span><a href="https://zh.javascript.info/arraybuffer-binary-arrays" target="_blank" rel="noopener noreferrer">ArrayBuffer</a></span></a></h2><ul><li>代表一段二进制数据</li><li>可以看作内存数据的表达</li><li><strong>只读</strong>，需要转化为 TypedArray 进行写操作</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">var</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">buffer<span class="token punctuation">.</span>byteLength<span class="token punctuation">;</span> <span class="token comment">// 8</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="typedarray-是类数组不是纯数组" tabindex="-1"><a class="header-anchor" href="#typedarray-是类数组不是纯数组"><span>TypedArray （是类数组不是纯数组）</span></a></h2><ul><li>对 ArrayBuffer 的内容操作和读取</li><li>arrayBuffer 表示占用多少个字节</li><li>默认一字节表示 8 位，也就 Uint8Array <img src="https://cdn.nlark.com/yuque/0/2022/png/2198140/1663083126248-48d24a3f-1e42-4a30-a804-cbc24f85cb70.png#averageHue=%23f0eae7&amp;clientId=ub76d7745-3dc3-4&amp;from=paste&amp;height=292&amp;id=rW8KY&amp;name=image.png&amp;originHeight=292&amp;originWidth=669&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32515&amp;status=done&amp;style=none&amp;taskId=u393f669c-f9f6-4123-8208-f2878562d75&amp;title=&amp;width=669" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2198140/1663163290042-05b6d08f-b7e2-4e37-83ec-8696315b57c9.png#averageHue=%23f9faf9&amp;clientId=uc4d8e980-fb4c-4&amp;from=paste&amp;height=452&amp;id=u682b5ce4&amp;name=image.png&amp;originHeight=452&amp;originWidth=588&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=170070&amp;status=done&amp;style=none&amp;taskId=ud6dd40ca-be62-48a6-b98c-dcc9a985a0a&amp;title=&amp;width=588" alt="image.png"></li></ul><h2 id="dataview" tabindex="-1"><a class="header-anchor" href="#dataview"><span>DataView</span></a></h2><ul><li>可灵活地操作不同位置下有着不同的 TypedArray 的 Array</li><li>由于视图的构造函数可以指定起始位置和长度，所以在同一段内存之中，可以依次存放不同类型的数据，这叫做“复合视图”。</li></ul><h2 id="arraybufferview" tabindex="-1"><a class="header-anchor" href="#arraybufferview"><span>ArrayBufferView</span></a></h2><p>操作 ArrayBuffer 的视图，包含 TypedArray 和 DataView</p><h2 id="buffersource" tabindex="-1"><a class="header-anchor" href="#buffersource"><span>BufferSource</span></a></h2><p>任何类型的二进制数据” —— ArrayBuffer 或其上的视图</p><h2 id="blob" tabindex="-1"><a class="header-anchor" href="#blob"><span>Blob</span></a></h2><ul><li>具有类型（对应着 mime 类型）的二进制数据 <img src="https://cdn.nlark.com/yuque/0/2022/png/2198140/1663083586076-6eed675d-2bb2-4122-a0b7-219ce5324fee.png#averageHue=%23f3eeeb&amp;clientId=ub76d7745-3dc3-4&amp;from=paste&amp;height=98&amp;id=hDZKK&amp;name=image.png&amp;originHeight=93&amp;originWidth=631&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=15716&amp;status=done&amp;style=none&amp;taskId=ufc521e1e-2393-440d-a24f-96a90375744&amp;title=&amp;width=668" alt="image.png"></li><li>因此更加常用于处理文件</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span>array <span class="token punctuation">[</span><span class="token punctuation">,</span> options<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">hello</span><span class="token operator">:</span> <span class="token string">&#39;world&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">type</span> <span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">myBlob<span class="token punctuation">.</span>size <span class="token comment">// 32</span></span>
<span class="line">myBlob<span class="token punctuation">.</span>type <span class="token comment">// &quot;text/html&quot;</span></span>
<span class="line"><span class="token comment">// 用来拷贝原来的数据，返回的也是一个Blob实例。</span></span>
<span class="line">myBlob<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> contentType<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 从类型化数组（typed array）和字符串创建 Blob</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 二进制格式的 &quot;hello&quot;</span></span>
<span class="line"><span class="token keyword">let</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>hello<span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">downloadBlob</span><span class="token punctuation">(</span><span class="token parameter">blob</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  link<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token string">&#39;hello.txt&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  link<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">downloadBlob</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// await blob.arrayBuffer(); blob转换为arrayBuffer</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 当我们读取和写入超过 2 GB 的 blob 时，将其转换为 arrayBuffer 的使用对我们来说会更加占用内存。</span></span>
<span class="line"><span class="token comment">// 这种情况下，我们可以直接将 blob 转换为 stream 进行处理。</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">blobToStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 从 blob 获取可读流（readableStream）</span></span>
<span class="line">  <span class="token keyword">const</span> readableStream <span class="token operator">=</span> blob<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> stream <span class="token operator">=</span> readableStream<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 对于每次迭代：value 是下一个 blob 数据片段</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token punctuation">{</span> done<span class="token punctuation">,</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> stream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 读取完毕，stream 里已经没有数据了</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;all blob processed.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 对刚从 blob 中读取的数据片段做一些处理</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 下载图片 或者截图 （需要使用html2canvas库将html转化为canvas）</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">downloadLocalImage</span><span class="token punctuation">(</span><span class="token parameter">imgSelector</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 获取任何图像</span></span>
<span class="line">  <span class="token keyword">let</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>imgSelector<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 生成同尺寸的 &lt;canvas&gt;</span></span>
<span class="line">  <span class="token keyword">let</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;canvas&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> img<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span></span>
<span class="line">  canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> img<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 向其中复制图像（此方法允许剪裁图像）</span></span>
<span class="line">  context<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 我们 context.rotate()，并在 canvas 上做很多其他事情</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// toBlob 是异步操作，结束后会调用 callback</span></span>
<span class="line">  <span class="token keyword">let</span> blob <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> canvasElem<span class="token punctuation">.</span><span class="token function">toBlob</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token string">&#39;image/png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// blob 创建完成，下载它</span></span>
<span class="line">  <span class="token comment">// Download</span></span>
<span class="line">  <span class="token keyword">let</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  link<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token string">&#39;example.png&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  link<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  link<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 删除内部 blob 引用，这样浏览器可以从内存中将其清除</span></span>
<span class="line">  <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="file" tabindex="-1"><a class="header-anchor" href="#file"><span>File</span></a></h2><ul><li>是自动生成文件属性的 Blob 对象</li><li>File 对象继承自 Blob。</li><li>File 对象还有 name 和 lastModified 属性，以及从文件系统读取的内部功能</li><li>使用 input 组件时获取到的默认对象值</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">previewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> preview <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;img&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">var</span> file <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;input[type=file]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  reader<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      preview<span class="token punctuation">.</span>src <span class="token operator">=</span> reader<span class="token punctuation">.</span>result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token boolean">false</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="filereader" tabindex="-1"><a class="header-anchor" href="#filereader"><span>FileReader</span></a></h2><p>对 Blob 对象进行操作以及格式转换</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> file <span class="token operator">=</span> input<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  reader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// readAsArrayBuffer(blob) —— 将数据读取为二进制格式的 ArrayBuffer。</span></span>
<span class="line">  <span class="token comment">// readAsText(blob, [encoding]) —— 将数据读取为给定编码（默认为 utf-8 编码）的文本字符串。</span></span>
<span class="line">  <span class="token comment">// readAsDataURL(blob) ----  将 Blob 转换为 base64 并调用 onload</span></span>
<span class="line">  <span class="token comment">// readAsBinaryString()：返回原始的二进制字符串。</span></span>
<span class="line">  reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  reader<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="串联起它们的关系" tabindex="-1"><a class="header-anchor" href="#串联起它们的关系"><span>串联起它们的关系</span></a></h2><p>arrayBuffer =&gt; TypedArray =&gt; Blob =&gt; FileReader(File) 【上传】/blob.createObjectURL 配合 a 链接 【下载】 下载示例如下<img src="https://cdn.nlark.com/yuque/0/2022/png/2198140/1663165597299-a051264e-c55b-446f-8f7e-414edd834cac.png#averageHue=%23f4f4f3&amp;clientId=uc4d8e980-fb4c-4&amp;from=paste&amp;height=436&amp;id=uee6e5d43&amp;name=image.png&amp;originHeight=436&amp;originWidth=834&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=234312&amp;status=done&amp;style=none&amp;taskId=ue45beca4-abc1-44a4-bde7-9ece2b08dc8&amp;title=&amp;width=834" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2198140/1663079144508-e2860a15-72d4-42f4-80a9-c1e60b5f8a4c.png#averageHue=%2321201f&amp;clientId=ub76d7745-3dc3-4&amp;from=paste&amp;height=265&amp;id=AL8tR&amp;name=image.png&amp;originHeight=530&amp;originWidth=646&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=288192&amp;status=done&amp;style=none&amp;taskId=u2cc40a26-ee5c-4d5c-9374-e36917d68fa&amp;title=&amp;width=323" alt="image.png"></p><h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用"><span>应用</span></a></h2><ul><li>ajax</li><li>图片处理</li></ul>`,26),l=[t];function c(i,o){return a(),s("div",null,l)}const r=n(e,[["render",c],["__file","二进制.html.vue"]]),d=JSON.parse('{"path":"/JS/%E4%BA%8C%E8%BF%9B%E5%88%B6.html","title":"二进制","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"ArrayBuffer","slug":"arraybuffer","link":"#arraybuffer","children":[]},{"level":2,"title":"TypedArray （是类数组不是纯数组）","slug":"typedarray-是类数组不是纯数组","link":"#typedarray-是类数组不是纯数组","children":[]},{"level":2,"title":"DataView","slug":"dataview","link":"#dataview","children":[]},{"level":2,"title":"ArrayBufferView","slug":"arraybufferview","link":"#arraybufferview","children":[]},{"level":2,"title":"BufferSource","slug":"buffersource","link":"#buffersource","children":[]},{"level":2,"title":"Blob","slug":"blob","link":"#blob","children":[]},{"level":2,"title":"File","slug":"file","link":"#file","children":[]},{"level":2,"title":"FileReader","slug":"filereader","link":"#filereader","children":[]},{"level":2,"title":"串联起它们的关系","slug":"串联起它们的关系","link":"#串联起它们的关系","children":[]},{"level":2,"title":"应用","slug":"应用","link":"#应用","children":[]}],"git":{"updatedTime":1717649313000,"contributors":[{"name":"Liu Jia","email":"41950983+liujia6@users.noreply.github.com","commits":1}]},"filePathRelative":"JS/二进制.md"}');export{r as comp,d as data};
