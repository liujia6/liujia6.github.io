import{_ as e,c as n,o as s,a}from"./app-B_HqqEoK.js";const t={},o=a(`<h2 id="浏览器对输入事件的处理" tabindex="-1"><a class="header-anchor" href="#浏览器对输入事件的处理"><span><a href="https://my.oschina.net/u/4594011/blog/4677018" target="_blank" rel="noopener noreferrer">浏览器对输入事件的处理</a></span></a></h2><p>当页面渲染完毕以后，TAB内已经显示出了可交互的WEB页面，用户可以进行移动鼠标、点击页面等操作了，而当这些事件发生时候，浏览器是如何处理这些事件的呢？</p><p>以点击事件（click event）为例，让鼠标点击页面时候，首先接受到事件信息的是<code>Browser Process</code>，但是Browser Process只知道事件发生的类型和发生的位置，具体怎么对这个点击事件进行处理，还是由Tab内的<code>Renderer Process</code>进行的。Browser Process接受到事件后，随后便把事件的信息传递给了渲染进程，渲染进程会找到根据事件发生的坐标，找到目标对象（target），并且运行这个目标对象的点击事件绑定的监听函数（listener）。</p><ol><li>用户<code>滚动页面</code>，<code>触碰屏幕</code>以及<code>移动鼠标</code>等操作都可以看作来自于用户的输入事件。</li><li><strong>浏览器进程</strong>（browser process）第一个接收到该事件，包含了一些该事件发生的信息</li><li>浏览器进程会将事件的类型（如<code>touchstart</code>）以及坐标（coordinates）发送给<strong>渲染进程</strong></li><li>渲染进程会找到事件的目标对象（target）然后运行这个事件绑定的监听函数（listener）</li><li>如果该元素没有绑定监听事件，直接由<strong>合成线程</strong>处理</li><li>当合成线程向主线程发送输入事件时，主线程要做的第一件事是通过命中测试**（hit test）**去找到事件的目标对象（target）。具体的命中测试流程是遍历在渲染流水线中生成的绘画记录（paint records）来找到输入事件出现的x, y坐标上面描绘的对象是哪个。</li></ol><h3 id="浏览器事件处理优化" tabindex="-1"><a class="header-anchor" href="#浏览器事件处理优化"><span>浏览器事件处理优化</span></a></h3><p>在上面的文章中我们有说过显示器的刷新频率通常是一秒钟60次以及我们可以通过让JavaScript代码的执行频率和屏幕刷新频率保持一致来实现页面的平滑动画效果（smooth animation）。对于用户输入来说，触摸屏一般一秒钟会触发60到120次点击事件，而鼠标一般则会每秒触发100次事件，因此输入事件的触发频率其实远远高于我们屏幕的刷新频率。</p><p>如果每秒将诸如<code>touchmove</code>这种连续被触发的事件发送到主线程120次，因为屏幕的刷新速度相对来说比较慢，它可能会触发过量的点击测试以及JavaScript代码的执行。</p><p>为了最大程度地减少对主线程的过多调用，Chrome会合并连续事件（例如<code>wheel</code>，<code>mousewheel</code>，<code>mousemove</code>，<code>pointermove</code>，<code>touchmove</code>），并将调度延迟到下一个<code>requestAnimationFrame</code>之前。</p><p>和之前相同的事件轴，可是这次事件被合并并延迟调度了</p><p>任何诸如<code>keydown</code>，<code>keyup</code>，<code>mouseup</code>，<code>mousedown</code>，<code>touchstart</code>和<code>touchend</code>等相对不怎么频繁发生的事件都会被立即派送给主线程。</p><ul><li><p><strong>非快速滚动区域 - non-fast scrollable region</strong>：合成线程会将页面那些注册了事件监听器的区域标记为“非快速滚动区域”（Non-fast Scrollable Region）</p></li><li><p>意味着即使你页面的某些区域压根就不在乎是不是有用户输入，当用户输入事件发生时，合成线程每次都会告知主线程并且会等待主线程处理完它才干活。因此这种情况下合成线程就丧失提供流畅用户体验的能力了（smooth scrolling ability）。</p></li><li><p>为了减轻这种情况的发生，您可以为事件监听器传递<code>passive：true</code>选项。 这个选项会告诉浏览器您仍要在主线程中侦听事件，可是合成线程也可以继续合成新的帧。</p></li><li><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;touchstart&#39;</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>target <span class="token operator">===</span> area<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">passive</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>根据规范，<code>passive</code> 选项的默认值始终为false。但是，这引入了处理某些触摸事件（以及其他）的事件监听器在尝试处理滚动时阻止浏览器的主线程的可能性，从而导致滚动处理期间性能可能大大降低。</p></li><li><p>添加passive参数后，<code>touchmove</code>事件不会阻塞页面的滚动（同样适用于鼠标的滚轮事件）</p></li><li><p>事件处理程序不会调用 preventDefault 来阻止默认滑动行为。</p><p>总结：浏览器的dom的默认事件由合成器线程处理，如果绑定了事件监听函数，那么会合成器线程会先交给主线程处理，并等待其处理完成，再由自己处理默认事件。如果页面调用了preventDefault,合成器线程也是在其调用的时候才知道，会浪费合成器的等待时间</p></li></ul>`,11),c=[o];function p(l,i){return s(),n("div",null,c)}const d=e(t,[["render",p],["__file","变化.html.vue"]]),u=JSON.parse('{"path":"/%E6%B5%8F%E8%A7%88%E5%99%A8/%E5%8F%98%E5%8C%96.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"浏览器对输入事件的处理","slug":"浏览器对输入事件的处理","link":"#浏览器对输入事件的处理","children":[{"level":3,"title":"浏览器事件处理优化","slug":"浏览器事件处理优化","link":"#浏览器事件处理优化","children":[]}]}],"git":{"updatedTime":1720052070000,"contributors":[{"name":"liujia6","email":"liujia11@qianxin.com","commits":1}]},"filePathRelative":"浏览器/变化.md"}');export{d as comp,u as data};
