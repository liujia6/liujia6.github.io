(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{488:function(t,e,r){"use strict";r.r(e);var v=r(22),s=Object(v.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"异步"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#异步"}},[t._v("#")]),t._v(" 异步")]),t._v(" "),r("h2",{attrs:{id:"promise"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[t._v("#")]),t._v(" promise")]),t._v(" "),r("p",[t._v("缺点")]),t._v(" "),r("ul",[r("li",[t._v("Promise 可以很好地处理单一异步结果，不适用于：\n"),r("ul",[r("li",[t._v("多次触发的事件：如果要处理这种情况，可以了解一下响应式编程（ reactive programming ），这是一种很聪明的链式的处理普通事件的方法。数据流：支持此种情形的标准正在制定中。")])])]),t._v(" "),r("li",[t._v("ECMAScript 6 Promise 缺少两个有时很有用的特性：\n"),r("ul",[r("li",[t._v("不能取消执行。")]),t._v(" "),r("li",[t._v("无法获取当前执行的进度信息（比如，要在用户界面展示进度条）。")])])]),t._v(" "),r("li",[t._v("Q Promise 库对于后者提供了支持，并且有计划将两种能力都添加到 Promises/A+ 规范中去。")])]),t._v(" "),r("h2",{attrs:{id:"rxjs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rxjs"}},[t._v("#")]),t._v(" rxjs")]),t._v(" "),r("p",[t._v("rxjs 是可以取消的，对于 Promise 出现的两个问题：")]),t._v(" "),r("p",[t._v("● 在切换路由，组件销毁时调用 unsubscribe 方法取消订阅，回调里的逻辑便不会执行。\n● 竞态条件是由于接口异步调用的回调顺序不可控导致的，rxjs 的 switchMap 操作符可以确保每次接收到的都是最新一次发送的值（即最新的接口回调的值）。")]),t._v(" "),r("ul",[r("li",[t._v("concatMap 保证所有异步执行的顺序")]),t._v(" "),r("li",[t._v("switchMap 直接取消之前没有执行完的订阅，只执行最近一次的")])]),t._v(" "),r("h2",{attrs:{id:"宏任务与微任务"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#宏任务与微任务"}},[t._v("#")]),t._v(" "),r("a",{attrs:{href:"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/",target:"_blank",rel:"noopener noreferrer"}},[t._v("宏任务与微任务"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("img",{attrs:{src:"https://i.loli.net/2021/01/06/v6mUbtNMqxBaESu.png",alt:"img"}})]),t._v(" "),r("ul",[r("li",[t._v("一个线程中，事件循环是唯一的，但是任务队列可以拥有多个。")]),t._v(" "),r("li",[t._v("任务队列又分为 macro-task（宏任务）与 micro-task（微任务），在最新标准中，它们被分别称为 task 与 jobs。")]),t._v(" "),r("li",[t._v("来自不同任务源的任务会进入到不同的任务队列。其中 setTimeout 与 setInterval 是同源的。")]),t._v(" "),r("li",[t._v("其中每一个任务的执行，无论是 macro-task 还是 micro-task，都是借助函数调用栈来完成。")])]),t._v(" "),r("p",[t._v("JavaScript 的事件分两种，"),r("strong",[t._v("宏任务(macro-task)"),r("strong",[t._v("和")]),t._v("微任务(micro-task)")])]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("宏任务")]),t._v("：包括整体代码 script，setTimeout，setInterval，就是用户的一些操作的回调，如鼠标点击事件，键盘事件，ajax 请求，dom 操作等")]),t._v(" "),r("li",[r("strong",[t._v("微任务")]),t._v("：Promise.then(非 new Promise)，process.nextTick(node 中)、MutationObserver(html5 新特性)")]),t._v(" "),r("li",[t._v("setTimeout/Promise 等我们称之为任务源。而进入任务队列的是他们指定的具体执行任务。")])]),t._v(" "),r("p",[r("strong",[t._v("执行栈")])]),t._v(" "),r("ul",[r("li",[t._v("执行栈是宏任务被执行的地方")])]),t._v(" "),r("p",[r("strong",[t._v("宏任务 & 宏任务队列")])]),t._v(" "),r("ul",[r("li",[t._v("宏任务总会在下一个 EventLoop 中执行")]),t._v(" "),r("li",[t._v("若在执行宏任务的过程中，加入了新的微任务，会把新的微任务添加到微任务的队列中。")])]),t._v(" "),r("p",[r("strong",[t._v("微任务 & 微任务队列")])]),t._v(" "),r("ul",[r("li",[t._v("若在执行微任务的过程中，加入了新的微任务，会把新的微任务添加在当前任务队列的队尾巴。")]),t._v(" "),r("li",[t._v("微任务会在本轮 EventLoop 执行完后，马上把执行栈中的任务都执行完毕。")])]),t._v(" "),r("p",[r("strong",[t._v("执行流程")])]),t._v(" "),r("ul",[r("li",[t._v("从 task 队列（一个或多个）中选出最老的一个 "),r("strong",[t._v("task")]),t._v("，执行它")]),t._v(" "),r("li",[r("strong",[t._v("执行")]),t._v(" microtask 队列中的所有 "),r("strong",[t._v("microtask")]),t._v("，直到队列为空。")]),t._v(" "),r("li",[r("strong",[t._v("ui render")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("判断是否需要渲染")]),t._v("，要根据屏幕刷新率、页面性能、页面是否在后台运行来共同决定，判断 document 在此时间点渲染是否会『获益』。浏览器只需保证 60Hz 的刷新率即可（在机器负荷重时还会降低刷新率），若 eventloop 频率过高，即使渲染了浏览器也无法及时展示或者浏览器判断更新渲染不会带来视觉上的改变。所以"),r("strong",[t._v("并不是每轮 eventloop 都会执行 UI Render")]),t._v("。（所以多个 task 很可能在一次渲染之间执行）\n"),r("ul",[r("li",[t._v("执行各种渲染所需工作，如 触发 resize、scroll 事件、建立媒体查询、运行 CSS 动画等等\n"),r("ul",[r("li",[t._v("如果窗口的大小发生了变化，执行监听的 "),r("strong",[r("code",[t._v("resize")])]),t._v(" 方法（对于"),r("code",[t._v("resize")]),t._v(" 和 "),r("code",[t._v("scroll")]),t._v("来说，并不是到了这一步才去执行滚动和缩放，那岂不是要延迟很多？浏览器当然会立刻帮你滚动视图，根据**"),r("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//drafts.csswg.org/cssom-view/%23scrolling-events",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSSOM 规范"),r("OutboundLink")],1),t._v("**所讲，浏览器会保存一个 "),r("code",[t._v("pending scroll event targets")]),t._v("，等到事件循环中的 "),r("code",[t._v("scroll")]),t._v("这一步，去派发一个事件到对应的目标上，驱动它去执行监听的回调函数而已。"),r("code",[t._v("resize")]),t._v("也是同理。）")]),t._v(" "),r("li",[t._v("如果页面发生了滚动，执行 "),r("strong",[r("code",[t._v("scroll")])]),t._v(" 方法。")]),t._v(" "),r("li",[t._v("执行帧动画回调， 也就是 "),r("strong",[r("code",[t._v("requestAnimationFrame")])]),t._v(" 的回调")]),t._v(" "),r("li",[t._v("执行 IntersectionObserver 的回调。")]),t._v(" "),r("li",[r("strong",[t._v("重新渲染")]),t._v("绘制用户界面。")])])])])])])]),t._v(" "),r("li",[t._v("判断 "),r("code",[t._v("task队列")]),t._v("和"),r("code",[t._v("microTask")]),t._v("队列是否都为空，如果是的话，则进行 "),r("code",[t._v("Idle")]),t._v(" 空闲周期的算法，判断是否要执行 requestIdleCallback 的回调函数。")])]),t._v(" "),r("h2",{attrs:{id:"参考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/142742003",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入解析 EventLoop 和浏览器渲染、帧动画、空闲回调的关系"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://segmentfault.com/a/1190000013212944",target:"_blank",rel:"noopener noreferrer"}},[t._v("Javascript 事件循环机制以及渲染引擎何时渲染 UI"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://juejin.cn/post/6844903487700992007#heading-5",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入探究 eventloop 与浏览器渲染的时序问题"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/aooy/blog/issues/5#",target:"_blank",rel:"noopener noreferrer"}},[t._v("从 event loop 规范探究 javaScript 异步及浏览器更新渲染时机"),r("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=s.exports}}]);