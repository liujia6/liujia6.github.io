(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{504:function(t,s,a){"use strict";a.r(s);var n=a(22),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"gitlab-ci-踩坑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-ci-踩坑"}},[t._v("#")]),t._v(" Gitlab-ci 踩坑")]),t._v(" "),a("h2",{attrs:{id:"问题一-yarn-的时候报错"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题一-yarn-的时候报错"}},[t._v("#")]),t._v(" 问题一："),a("strong",[t._v("yarn 的时候报错")])]),t._v(" "),a("p",[t._v("解决方案：yarn 之前配 yarn 源，添加 yarn config set registry ${url}")]),t._v(" "),a("h2",{attrs:{id:"问题二-permission-denied"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题二-permission-denied"}},[t._v("#")]),t._v(" 问题二："),a("strong",[t._v("permission denied")])]),t._v(" "),a("p",[t._v("一开始是以为是密码错误，密码变量带有特殊字符，修改为用单引号包裹后还是报错。以上两个错误交替出现，最后用 sudo：yes 解决了，"),a("strong",[t._v("删除文件需要较高的权限")])]),t._v(" "),a("p",[t._v("解决：在 ansible 的 task 上加上 sudo: yes 解决权限问题")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2021/01/06/xvVL45wmRJ9CQTS.png",alt:"image-20210106215244122.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2021/01/06/xvVL45wmRJ9CQTS.png",alt:"image-20210106215244122"}})]),t._v(" "),a("h2",{attrs:{id:"问题三-配置-ssh-用户权限"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题三-配置-ssh-用户权限"}},[t._v("#")]),t._v(" 问题三：配置 ssh 用户权限")]),t._v(" "),a("p",[t._v("北京：需要克隆子模块，而子模块的 url 是 ssh 地址，需要配置用户 ssh 才能 clone 仓库，采用以下配置 ssh 用户权限")]),t._v(" "),a("p",[t._v("node 镜像低也会导致某些错误")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('image: ${image}\nscript:\n    - mkdir -p  ~/.ssh\n    - chmod 700 ~/.ssh\n    - \'[[ -f /.dockerenv ]] && echo -e "Host *\\n\\tStrictHostKeyChecking no\\n\\n" > ~/.ssh/config\'  #设ssh配置:每次连接一个新主机不做确认和警告\n    - eval $(ssh-agent -s)  # 启动ssh-agent\n    - ssh-add < (echo "$PRIVATE_SSH_KEY") # 添加私钥到ssh-agent代理\n')])])]),a("h2",{attrs:{id:"问题四-stage-之间文件传递"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题四-stage-之间文件传递"}},[t._v("#")]),t._v(" 问题四：stage 之间文件传递")]),t._v(" "),a("p",[t._v("每个 stage 是独立的，当前 stage 生成的文件会立即执行完后会立即删除，那下个 stage 要如何拿到上个 stage 的文件呢")]),t._v(" "),a("ul",[a("li",[t._v("此处有 cache 和 atifactory 两种方案对比，两者都可以传递，但是 cache 不是可靠的，只是作为优化的一种方案，不能确保两个 stage 之间一定能传递文件")]),t._v(" "),a("li",[t._v("不宜传递太大的文件，而且传递的文件太大例如 node_modules,会报错")]),t._v(" "),a("li",[t._v("artifacts 可以在 gitlab 的对应 pipeline 上直接点击下载，可以设置制品的过期时间"),a("img",{attrs:{src:"https://i.loli.net/2021/01/06/xvVL45wmRJ9CQTS.png",alt:"image-20210106215244122"}})])]),t._v(" "),a("h2",{attrs:{id:"问题五-prepare-failed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题五-prepare-failed"}},[t._v("#")]),t._v(" 问题五：prepare failed")]),t._v(" "),a("p",[t._v("解决：")]),t._v(" "),a("p",[t._v("指定 tags 为 k8s，不指定会报错")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("test1:\n stage: test1\n image: ${image}\n script:\n - mkdir dist\n - cd dist && touch markdown.md && cd -\n tags:\n - k8s\n")])])]),a("h2",{attrs:{id:"问题六-不能用环境变量指定-artifacts-path"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题六-不能用环境变量指定-artifacts-path"}},[t._v("#")]),t._v(" 问题六：不能用环境变量指定 artifacts：path")]),t._v(" "),a("p",[t._v("解决：使用通配符")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('artifacts:\n  - paths:\n  - "*.zip"\n')])])]),a("h2",{attrs:{id:"问题七-ssh-执行命令-显示-command-not-find"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题七-ssh-执行命令-显示-command-not-find"}},[t._v("#")]),t._v(" 问题七： ssh 执行命令，显示 command not find")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("问题：在 ssh 登录或者 ansible 登录执行命令报错显示 command not find")])]),t._v(" "),a("li",[a("p",[t._v("原因 ： ssh 登录少了环境变量")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("首先了解一下 login shell 与 non-login shell")])]),t._v(" "),a("p",[t._v("/etc/profile 及/etc/bashrc 的区别：\n"),a("strong",[t._v("login shell")]),t._v("：取得 bash 时需要完整的登入流程的，就称为 login shell。举例来说，你要由 tty1~tty6 登入，需要输入用户的账号和密码，此时取得的 bash 就称为『login shell』啰；\n"),a("strong",[t._v("non-login shell")]),t._v("：取得 bash 接口的方法不需要重复登入的举动，举例来说，(1)你以 Xwindow 登入 Linux 后，再以 X 的图形化接口启动终端机，此时那个终端接口并没有需要再次的输入账号和密码，那个 bash 的环境就称为 non-login shell 了。(2)你在原本的 bash 环境下再次下达 bash 这个命令，同样的也没有输入账号密码，那第二个 bash (子程序)也是 non-login shell 。")])])]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" mkdir ~/.ssh "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("p\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" chmod 700 ~/.ssh\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[[ -f /.dockerenv ]] && echo -e \"Host *\\n\\tStrictHostKeyChecking no\\n\\n\" > ~/.ssh/config'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" eval $(ssh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("agent "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("s)\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' echo "$PRIVATE_SSH_KEY"\n'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ssh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('add <(echo "$PRIVATE_SSH_KEY")\n'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ssh "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("T $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("USER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("@$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("HOST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(' "source ~/.bash_profile; cd $'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("&&")]),t._v(' yarn release"\n')])])]),a("p",[a("a",{attrs:{href:"https://www.yuque.com/plantegg/weyi1s/mysyy3#342wyn",target:"_blank",rel:"noopener noreferrer"}},[t._v("测试好的脚本放到"),a("OutboundLink")],1),t._v(" crontab 里就报错: 找不到命令")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/u010871982/article/details/78525367",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于 ansible 远程执行的环境变量问题（login shell & nonlogin shelll）"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/60914157",target:"_blank",rel:"noopener noreferrer"}},[t._v("远程执行命令的填坑记录"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);