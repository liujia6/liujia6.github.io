(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{455:function(t,a,e){"use strict";e.r(a);var s=e(22),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"http-权威指南"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-权威指南"}},[t._v("#")]),t._v(" HTTP 权威指南")]),t._v(" "),e("ul",[e("li",[t._v("超文本传输")])]),t._v(" "),e("h3",{attrs:{id:"字符编码-ascii-unicode-和-utf-8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符编码-ascii-unicode-和-utf-8"}},[t._v("#")]),t._v(" 字符编码：ASCII，Unicode 和 UTF-8")]),t._v(" "),e("ul",[e("li",[t._v("二进制是起源，一个 0 或 1 就是 1 位")]),t._v(" "),e("li",[t._v("8 个二进制位称为一个字节，拥有 256 种状态")]),t._v(" "),e("li",[t._v("ASCII 编码拥有 128 个字符的编码，是英语字符与二进制位之间的关系映射。但是第一位始终为 0 不使用，只占用 7 位，一个字节就是一个英语字符")]),t._v(" "),e("li",[t._v("非 ASCII 编码，英语用 128 个符号编码够了，但是其他语言不够，中文由于一个字节只有 256 中，不够，所以采用两个字节，简体中文常见的编码方式是 GB2312")]),t._v(" "),e("li",[t._v("Unicode 将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码")]),t._v(" "),e("li",[t._v("Unicode 只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储")]),t._v(" "),e("li",[t._v("UTF-8 是 Unicode 的实现方式之一")]),t._v(" "),e("li",[t._v("UTF-8 最大的一个特点，就是它是一种变长的编码方式。它可以使用 1~4 个字节表示一个符号，根据不同的符号而变化字节长度\n"),e("ul",[e("li",[t._v("对于单字节的符号，字节的第一位设为 0，后面 7 位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的。")]),t._v(" "),e("li",[t._v("对于 n 字节的符号（n > 1），第一个字节的前 n 位都设为 1，第 n + 1 位设为 0，后面字节的前两位一律设为 10。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码。")])])]),t._v(" "),e("li",[t._v("utf-8 的优点在于一个英文只要一个字节，但是一个中文却是 3 个字节，utf-16 的优点在于编码长度固定，一个中文只要两 2 个字节，但是一个英文也要两个字节。所以对于英文网页 utf-8 编码更加有利，而对于中文网页使用 utf-16 应该更加有利")]),t._v(" "),e("li",[t._v("Java 和 JS 的字符串都是使用 UTF-16 编码，因为它有长度比较固定的优势，不像 UTF-8 字节数可能从 1 变到 4。如下图所示：英文和中文长度都是 1，而 Emoj 的长度是 2，因为长度单位是 2 个字节作为 1，Emoj 的需要 4 个字节，因此长度是 2")]),t._v(" "),e("li",[t._v("charCodeAt 返回当前字符的 utf 编码")]),t._v(" "),e("li",[t._v("如果是要检测中文的话可以使用正则表达式，看当前符号是否落在中文编码的范围内：")]),t._v(" "),e("li",[t._v("utf 是国际标准，规定了每个字符的编码，而 utf-8/utf-16 决定了 utf 该如何存储与读取，utf-8 的优点是对于英文比较有利，比较节省空间，utf-16 对于中文比较有利。但是如果西方国家使用 utf-8，然后东方国家使用 utf-16，那么互联网可能就乱了，所以从统一标准的角度我们还是使用 utf-8。还讨论了 GBK 编码和乱码的问题，如果一个字符存的时候是用的一种编码，但是读的时候却用的另一种编码，那就会对不上原先的字符，就会出现乱码的情况。另外，由于 utf-16 编码长度比较固定，所以 JS 和 Java 使用了 utf-16 做为它们在内存里字符串的编码。根据实验，meta 的 charset 标签在没有设置响应头的 charset 时可以起作用。")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://jingyan.baidu.com/article/47a29f24671346c0142399fe.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("全角与半角"),e("OutboundLink")],1),t._v(" "),e("ul",[e("li",[t._v("全角的标点符号占 2 个字节，半角的标点符号占 1 个字节")]),t._v(" "),e("li",[t._v("半角是 ASCII 的编码，全角是 GB2312 的编码")])])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Unicode符号范围     |        UTF-8编码方式\n(十六进制)        |              （二进制）\n----------------------+---------------------------------------------\n0000 0000-0000 007F | 0xxxxxxx\n0000 0080-0000 07FF | 110xxxxx 10xxxxxx\n0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\n0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n")])])]),e("h2",{attrs:{id:"url-编码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#url-编码"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2010/02/url_encoding.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("url 编码"),e("OutboundLink")],1)]),t._v(" "),e("ul",[e("li",[t._v("一般来说，URL 只能使用英文字母、阿拉伯数字和某些标点符号，不能使用其他文字和符号")]),t._v(" "),e("li",[t._v('只有字母和数字[0-9a-zA-Z]、一些特殊符号"$-_.+!*\'(),"[不包括双引号]、以及某些保留字，才可以不经过编码直接用于 URL。')]),t._v(" "),e("li",[t._v("网址路径的编码，用的是 utf-8 编码")]),t._v(" "),e("li",[t._v("查询字符串的编码，用的是操作系统的默认编码")]),t._v(" "),e("li",[t._v('网页里的 form 编码其实不完全取决于网页编码，form 标记中有一个 accept-charset 属性，在非 ie 浏览器种，如果将其赋值(比如 accept-charset="UTF-8")，则表单会按照这个值表示的编码方式进行提交。')]),t._v(" "),e("li",[t._v("在已打开的网页上，直接用 Get 或 Post 方法发出 HTTP 请求,编码方法由网页的编码决定，也就是由 HTML 源码中字符集的设定决定。")]),t._v(" "),e("li",[t._v('在 Ajax 调用中，IE 总是采用 GB2312 编码（操作系统的默认编码），而 Firefox 总是采用 utf-8 编码<meta http-equiv="Content-Type" content="text/html;charset=xxxx">')])]),t._v(" "),e("p",[t._v("由于不同的方式的编码不同，所以我们在传送数据之前用 js 处理编码的方法来统一处理。")]),t._v(" "),e("p",[t._v("全角：LOVE\n半角：ＬＯＶＥ")]),t._v(" "),e("h3",{attrs:{id:"编码方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编码方式"}},[t._v("#")]),t._v(" 编码方式")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("编码方式")]),t._v(" "),e("th",[t._v("作用对象")]),t._v(" "),e("th",[t._v("具体编码机制")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("escape/unescape")]),t._v(" "),e("td",[t._v("字符串")]),t._v(" "),e("td",[t._v("Unicode 编码值")])]),t._v(" "),e("tr",[e("td",[t._v("encodeURI/decodeURI")]),t._v(" "),e("td",[t._v("整个 URL")]),t._v(" "),e("td",[t._v('除了常见的符号以外，对其他一些在网址中有特殊含义的符号"; / ? : @ & = + $ , #"，也不进行编码。编码后，它输出符号的 utf-8 形式，并且在每个字节前加上%')])]),t._v(" "),e("tr",[e("td",[t._v("encodeURIComponent/decodeURIComponent")]),t._v(" "),e("td",[t._v("URL 中的参数")]),t._v(" "),e("td",[t._v('"; / ? : @ & = + $ , #"，这些在 encodeURI()中不被编码的符号，在 encodeURIComponent()中统统会被编码,具体的编码方法，与 encodeURI 一致')])])])]),t._v(" "),e("p",[t._v("如果上面这一行最后的 charset 是 UTF-8，则 URL 就以 UTF-8 编码；如果是 GB2312，URL 就以 GB2312 编码。")]),t._v(" "),e("h2",{attrs:{id:"base64"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#base64"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://www.zhangxinxu.com/wordpress/2012/04/base64-url-image-%e5%9b%be%e7%89%87-%e9%a1%b5%e9%9d%a2%e6%80%a7%e8%83%bd%e4%bc%98%e5%8c%96/",target:"_blank",rel:"noopener noreferrer"}},[t._v("base64"),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("thunder://QUFodHRwOi8vd3d3LmJhaWR1LmNvbS9pbWcvc3NsbTFfbG9nby5naWZaWg==")])]),t._v(" "),e("ul",[e("li",[t._v('一堆连续字母，最后有 1~2 个"="的代码就是 base64')]),t._v(" "),e("li",[t._v("将三个字节转化成四个字节，因此编码后的文本，会比原文本大出三分之一左右")])]),t._v(" "),e("h5",{attrs:{id:"base64-url-传输图片文件的好处在于"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#base64-url-传输图片文件的好处在于"}},[t._v("#")]),t._v(" base64:URL 传输图片文件的好处在于：")]),t._v(" "),e("ul",[e("li",[t._v("减少了 HTTP 请求")]),t._v(" "),e("li",[t._v("某些文件可以避免跨域的问题")]),t._v(" "),e("li",[t._v("没有图片更新要重新上传，还要清理缓存的问题")])]),t._v(" "),e("h5",{attrs:{id:"什么情况下用-base64"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么情况下用-base64"}},[t._v("#")]),t._v(" 什么情况下用 base64：")]),t._v(" "),e("ul",[e("li",[t._v("不能与其他图片以 CSS Sprite 的形式存在，只能独行")]),t._v(" "),e("li",[t._v("基本上很少被更新")]),t._v(" "),e("li",[t._v("实际尺寸很小")]),t._v(" "),e("li",[t._v("在网站中大规模使用")])]),t._v(" "),e("p",[t._v("HTML5 中 atob 和 btoa 方法支持 Base64 编码和解码。")]),t._v(" "),e("ul",[e("li",[t._v("b 代表 base64，a 表示 ascii 码")])]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://lin-xin.github.io"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("btoa")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("atob")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// https://lin-xin.github.io")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// aHR0cHM6Ly9saW4teGluLmdpdGh1Yi5pbw==")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// https://lin-xin.github.io复制代码btoa")]),t._v("\n")])])]),e("ul",[e("li",[t._v("参数中带中文，已经超出了 8 位 ASCII 编码的字符范围，浏览器就会报错。所以需要先对中文进行 encodeURIComponent 编码处理。")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"哈喽 世界"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("btoa")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("encodeURIComponent")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("decodeURIComponent")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("atob")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// JUU1JTkzJTg4JUU1JTk2JUJEJTIwJUU0JUI4JTk2JUU3JTk1JThD")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哈喽 世界")]),t._v("\n")])])]),e("h2",{attrs:{id:"服务器的概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#服务器的概念"}},[t._v("#")]),t._v(" 服务器的概念")]),t._v(" "),e("ul",[e("li",[t._v("分两种\n"),e("ul",[e("li",[t._v("硬件主机")]),t._v(" "),e("li",[t._v("24 小时服务的软件程序，可以用 node 的 server 模块穿件一个 clientServer 并监听端口，就可以对外提供服务来了")])])]),t._v(" "),e("li",[t._v("内容分为\n"),e("ul",[e("li",[t._v("静态文件服务器")]),t._v(" "),e("li",[t._v("动态文件服务器")])])])]),t._v(" "),e("h2",{attrs:{id:"代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代理"}},[t._v("#")]),t._v(" 代理")]),t._v(" "),e("h3",{attrs:{id:"定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),e("ul",[e("li",[t._v("代理是位于客户端与服务端之间的 HTTP 实体")]),t._v(" "),e("li",[t._v("它既是 web 服务器又是客户端")]),t._v(" "),e("li",[t._v("代理的 url 包括主机名，普通没有\n"),e("img",{attrs:{src:"https://note.youdao.com/yws/public/resource/c9f1b9f836ce443c9e328d9da17c3c84/xmlnote/5BB0842ECFE84C86948C30F835C5847A/13606",alt:"image"}})])]),t._v(" "),e("h3",{attrs:{id:"应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用"}},[t._v("#")]),t._v(" 应用")]),t._v(" "),e("p",[t._v("我的理解，就和中间件一样可以对请求和响应根据需求做出处理比如")]),t._v(" "),e("ul",[e("li",[t._v("网站访问控制：儿童过滤器，公司、在入口部署")]),t._v(" "),e("li",[t._v("安全防火墙")]),t._v(" "),e("li",[t._v("反向代理（在服务器之前代替服务器，称为替代物，会假扮服务器的 ip 端口）")])]),t._v(" "),e("h3",{attrs:{id:"代理如何获取流量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代理如何获取流量"}},[t._v("#")]),t._v(" 代理如何获取流量")]),t._v(" "),e("ol",[e("li",[t._v("通过在浏览器设置代理，称为正向代理\n"),e("ul",[e("li",[t._v("浏览器设置代理、chrome 用一个扩展程序")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.barretlee.com/blog/2016/08/25/pac-file/",target:"_blank",rel:"noopener noreferrer"}},[t._v("pac 文件"),e("OutboundLink")],1)])])]),t._v(" "),e("li",[t._v("在网络基础设备中导入代理，称为拦截代理")]),t._v(" "),e("li",[t._v("修改 dns，添加代理")]),t._v(" "),e("li",[t._v("服务器设置重定向，称为反向代理")])]),t._v(" "),e("h2",{attrs:{id:"网关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#网关"}},[t._v("#")]),t._v(" 网关")]),t._v(" "),e("ul",[e("li",[t._v("对比代理，网关可以处理不同协议间如 http/ftp 的对话，代理只处理 http 请求,但实际上两者区别也比较模糊，因为代理也要处理不同版本间的 http，商业化的代理也会支持 ssl、ftp")]),t._v(" "),e("li",[t._v("无论是 Apache 还是 Nginx，首先它们是 HTTP 服务器，其次实现代理和反向代理只是它们的一个功能而不是全部")])]),t._v(" "),e("h3",{attrs:{id:"tcp-编程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp-编程"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/897692888725344/923056653167136",target:"_blank",rel:"noopener noreferrer"}},[t._v("TCP 编程"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("Socket 是一套完整的 TCP,UDP 协议的接口。\n你浏览的网页（网址以 http 开头)都是 http 协议传输到你的浏览器的, 而 http 是基于 Socket 之上的。\nsocket 连接：socket 连接就是所谓的长连接，理论上客户端和服务器端一旦建立起连接将不会主动断掉；但是由于各种环境因素可能会是连接断开\nSocket 是一个针对 TCP 和 UDP 编程的接口，可以借助它建立 TCP 连接等等。而 TCP 和 UDP 协议属于传输层 ，而 http 是个应用层的协议，它实际上也建立在 TCP 协议之上。(HTTP 是轿车，提供了封装或者显示数据的具体形式；Socket 是发动机，提供了网络通信的能力。)")]),t._v(" "),e("p",[t._v('Socket 定义： 就是利用模式"打开 open->write/read->关闭 close"来实现的，socket 是一种特殊的文件。')]),t._v(" "),e("p",[t._v("HTTP 协议：简单对象访问协议，对应于应用层 ，HTTP 协议是基于 TCP 连接的")]),t._v(" "),e("p",[t._v("TCP 协议： 对应于传输层")]),t._v(" "),e("p",[t._v("IP 协议： 对应于网络层")]),t._v(" "),e("p",[t._v("TCP/IP 是传输层协议，主要解决数据如何在网络中传输；而 HTTP 是应用层协议，主要解决如何包装数据。")]),t._v(" "),e("p",[t._v("Socket 是对 TCP/IP 协议的封装，Socket 本身并不是协议，而是一个调用接口（API），通过 Socket，我们才能使用 TCP/IP 协议")]),t._v(" "),e("p",[t._v("http 连接：http 连接就是所谓的短连接，即客户端向服务器端发送一次请求，服务器端响应后连接即会断掉;\nsocket 连接：socket 连接就是所谓的长连接，理论上客户端和服务器端一旦建立起连接将不会主动断掉；但是由于各种环境因素可能会是连接断开")]),t._v(" "),e("p",[t._v('Socket 是一个针对 TCP 和 UDP 编程的接口，可以借助它建立 TCP 连接等等。而 TCP 和 UDP 协议属于传输层 ，而 http 是个应用层的协议，它实际上也建立在 TCP 协议之上。(HTTP 是轿车，提供了封装或者显示数据的具体形式；Socket 是发动机，提供了网络通信的能力。)\nSocket 定义： 就是利用模式"打开 open->write/read->关闭 close"来实现的，socket 是一种特殊的文件。')]),t._v(" "),e("p",[t._v("Socket 的网络连接步骤\n建立 Socket 连接至少需要一对套接字，其中一个运行于客户端，称为 ClientSocket ，另一个运行于服务器端，称为 ServerSocket 。\n套接字之间的连接过程分为三个步骤：服务器监听，客户端请求，连接确认。\n服务器监听：服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态，等待客户端的连接请求\n客户端请求：指客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。\n连接确认：当服务器端套接字监听到或者说接收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发给客户端，一旦客户端确认了此描述，双方就正式建立连接。而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。")]),t._v(" "),e("h2",{attrs:{id:"重定向与负载均衡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重定向与负载均衡"}},[t._v("#")]),t._v(" 重定向与负载均衡")]),t._v(" "),e("p",[t._v("原因")]),t._v(" "),e("ol",[e("li",[t._v("可靠，保证一个出错，还有其他的顶替")]),t._v(" "),e("li",[t._v("更快返回响应")]),t._v(" "),e("li",[t._v("减少网络拥塞")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("通用重定向")]),t._v(" "),e("ol",[e("li",[t._v("HTTP 重定向 301\n"),e("ul",[e("li",[t._v("缺点：时延增加，增加服务器的负担，处理不了故障")])])]),t._v(" "),e("li",[t._v("DNS 重定向\n"),e("ul",[e("li",[t._v("dns 轮转")]),t._v(" "),e("li",[t._v("不会平衡单个客户端的负载")]),t._v(" "),e("li",[t._v("负载均衡算法")]),t._v(" "),e("li",[t._v("邻接路由算法")]),t._v(" "),e("li",[t._v("故障屏蔽算法")])])]),t._v(" "),e("li",[t._v("MAC 转发\n"),e("ul",[e("li",[t._v("在交换机上编写程序，将对应 MAC 地址流量，转发到代理缓存上，通常将骑牛转发给几个代理缓存，并在其中平衡负载或者备用 HTTP 服务器，")]),t._v(" "),e("li",[t._v("注意 MAC 转发是点对点的，只能一跳远")])])]),t._v(" "),e("li",[t._v("IP 地址转发\n"),e("ul",[e("li",[t._v("IP 地址转发通 MAC 转发类似，更加自由，没有一跳远的限制，只需要位于交换机的上游，称为 NAT，网络地址转换")]),t._v(" "),e("li",[t._v("对称路由的限制，来去的路线必须一致")]),t._v(" "),e("li",[t._v("完全 NAT：源 IP 地址为交换机的 IP，缺点：无法确认唯一客户端，无法实现付费")]),t._v(" "),e("li",[t._v("半 NAT：源 IP 不变，缺点：需要确保实现对称路由")])])]),t._v(" "),e("li",[t._v("网元控制协议 NECP\n"),e("ul",[e("li",[t._v("网元是指路由器、交换机等设备网络元素")]),t._v(" "),e("li",[t._v("服务器元素 SE 是指 web 服务器和代理缓存等提供请求设备")])])])])]),t._v(" "),e("li",[e("p",[t._v("代理重定向")]),t._v(" "),e("ul",[e("li",[t._v("显式浏览器配置")]),t._v(" "),e("li",[t._v("代理自动配置 PAC 协议，\n"),e("ul",[e("li",[t._v("让浏览器获取 PAC 文件，说明了每个 URL 关联的代理，为 PAC 文件关联一个特定的服务器")])])]),t._v(" "),e("li",[t._v("WPAD 代理自动发现协议\n"),e("ul",[e("li",[t._v("不要求用户手工配置 dialing 设置，不依赖流量拦截，为 web 浏览器提供一种发现并使用附近代理的范式")])])])])]),t._v(" "),e("li",[e("p",[t._v("缓存重定向：因为需要分配到可能包含特定内容的位置，要求可靠、高效且能感知内容")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("WCCP 重定向")]),t._v("，使路由器将 web 流量重定向到代理缓存中，负责路由器和缓存服务器之间的通信，这样路由器就可以对缓存验证，在缓存中负载均衡，并将特定类型的流量发送给特定的缓存\n"),e("ul",[e("li",[t._v("GRE 分组封装：支持 WCCP 的路由器用服务器 IP 地址将 HTTP 分组封装起来，将其重定向到特定的服务器上。")]),t._v(" "),e("li",[t._v("服务组：由一组支持 WCCP 的路由器和缓存组成，可以交换 WCCP 报文")])])])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("ICP 因特网缓存协议")]),t._v("：允许缓存在兄弟缓存中查找命中的内容，会同时询问附近的多个缓存，看是否有特定 URL，返回 HIT 或 MISS，以一层为单位查询，打开 HTTP 连接传输")]),t._v(" "),e("li",[e("strong",[t._v("CARP 缓存阵列路由协议")]),t._v("：使用多个代理服务器将负载分散到一组服务器上，是 ICP 的替代品，可以通过单次查找确定对应缓存服务器的位置")]),t._v(" "),e("li",[e("strong",[t._v("HTCP 超文本缓存协议")]),t._v("：允许兄弟缓存之间通过 URL 和所有的骑牛以及响应首部来相互查询文档是否存在，而且允许对方修改资源")])])])]),t._v(" "),e("h2",{attrs:{id:"国际化编码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#国际化编码"}},[t._v("#")]),t._v(" 国际化编码")]),t._v(" "),e("ul",[e("li",[t._v("客户端的 Accept-Charset、Accept-Language")]),t._v(" "),e("li",[t._v("服务端的 Content-type 中的 charset 和 content-Language 首部")]),t._v(" "),e("li",[t._v("字符集：把字符转换为二进制码的编码算法")]),t._v(" "),e("li",[t._v("字符集标记由 IANA 的 MIME 字符集注册机构标准化")])]),t._v(" "),e("h3",{attrs:{id:"内容和传输编码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内容和传输编码"}},[t._v("#")]),t._v(" 内容和传输编码")]),t._v(" "),e("ol",[e("li",[t._v("content-length 是压缩后或包含内容编码后的大小")]),t._v(" "),e("li",[t._v("除非使用分块编码，否则是必须的报文实体字段")]),t._v(" "),e("li",[t._v("content-length 的作用\n"),e("ol",[e("li",[t._v("检测出服务器崩溃导致的"),e("strong",[t._v("报文截尾")]),t._v(" "),e("ul",[e("li",[t._v("早期是用正确关闭连接的方法划定报文结束 ，但是如果没有 content-length 无法判别服务器崩溃异常导致的连接关闭")]),t._v(" "),e("li",[t._v("若有缓存代理服务器，若有错误没有识别，会存储不完成的内容并重复使用，缓存服务器不会处理没有 content-length 的报文")]),t._v(" "),e("li",[t._v("HTTP1.1 规定若检测到无效长度需要通知用户")])])]),t._v(" "),e("li",[t._v("对共享"),e("strong",[t._v("持久连接")]),t._v("的多个报文正确分段\n"),e("ul",[e("li",[t._v("content-length 首部对持久连接必不可少，因为持久连接，无法通过连接关闭判断报文结束")]),t._v(" "),e("li",[t._v("如果采用分块编码可以没有 content-length 首部")])])])])]),t._v(" "),e("li",[t._v("内容编码：发送前进行编码，与内容的具体格式细节紧密相关，gzip 压缩文本，jpeg 不能用 gzip\n"),e("ul",[e("li",[t._v("压缩")]),t._v(" "),e("li",[t._v("搅乱或加密")]),t._v(" "),e("li",[t._v("Content-Encoding：用于指定报文主体已经采用的编码方式，属于端到端首部，即在整个传输过程中有效。")]),t._v(" "),e("li",[t._v("Accept-Encoding：用于告知服务器客户端能够处理的编码方式和相对优先级，属于端到端首部，即"),e("strong",[t._v("在整个传输过程")]),t._v("中有效。")])])]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.geek-share.com/detail/2715577569.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("传输编码和分块编码"),e("OutboundLink")],1),t._v(" "),e("ul",[e("li",[t._v("HTTP 分块传输编码允许服务器为动态生成的内容维持 HTTP 持久链接")]),t._v(" "),e("li",[t._v("可以通过传输编码把报文扰乱保证安全，不过有了 SSL 就不太考虑用此了")]),t._v(" "),e("li",[t._v("Transfer-Encoding：用于指定传输报文主体时使用的编码方式，属于逐跳首部，即只在两个"),e("strong",[t._v("节点间")]),t._v("有效。")]),t._v(" "),e("li",[t._v("TE：用于告知服务器客户端能够处理的编码方式和相对优先级，属于逐跳首部，即只在两个节点间有效。")])])])]),t._v(" "),e("h2",{attrs:{id:"vary-首部"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vary-首部"}},[t._v("#")]),t._v(" Vary 首部：")]),t._v(" "),e("ul",[e("li",[t._v("定义了服务器由什么的不同而发送不同的实体内容")]),t._v(" "),e("li",[t._v("若所提供的文档取决于 User-Agent 首部，vary 首部就必须包含 User-Agent")]),t._v(" "),e("li",[t._v("所服务器 Vary：User-Agent，cookie，大量不同的 User-Agent，cookie 会产生非常多的变体，缓存必须为每个变体保存相应文档版本")]),t._v(" "),e("li",[t._v("Vary: User-Agent\n​ 例如你提供给移动端的内容是不同的，可用防止你客户端误使用了用于桌面端的缓存。 并可帮助 Google 和其他搜索引擎来发现你的移动端版本的页面，同时告知他们不需要 Cloaking。")])]),t._v(" "),e("h2",{attrs:{id:"trailer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#trailer"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Trailer",target:"_blank",rel:"noopener noreferrer"}},[t._v("Trailer"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("Trailer 是一个响应首部，允许发送方在分块发送的消息后面添加额外的元信息，这些元信息可能是随着消息主体的发送动态生成的，比如消息的完整性校验，消息的数字签名，或者消息经过处理之后的最终状态等。")])])}),[],!1,null,null,null);a.default=n.exports}}]);