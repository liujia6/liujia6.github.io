(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{454:function(t,s,a){"use strict";a.r(s);var e=a(22),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"bash-入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bash-入门"}},[t._v("#")]),t._v(" Bash 入门")]),t._v(" "),a("h2",{attrs:{id:"变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),a("p",[t._v("Bash 没有数据类型的概念，所有的变量值都是字符串")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("命令")]),t._v(" "),a("th",[t._v("解释")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("variable=value")]),t._v(" "),a("td",[t._v("变量声明")])]),t._v(" "),a("tr",[a("td",[t._v("${!string*}或${!string@}")]),t._v(" "),a("td",[t._v("返回所有匹配给定字符串 string 的变量名。")])]),t._v(" "),a("tr",[a("td",[t._v("a=z")]),t._v(" "),a("td",[t._v("变量 a 赋值为字符串 z")])]),t._v(" "),a("tr",[a("td",[t._v('c="a string and $b"')]),t._v(" "),a("td",[t._v("引用其他变量的值")])]),t._v(" "),a("tr",[a("td",[t._v("e=$(ls -l foo.txt) 或者"),a("code",[t._v("ls -l foo.txt")])]),t._v(" "),a("td",[t._v("是命令的执行结果，$(...)可以嵌套，比如$(ls $(pwd))。")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("反斜杠可以出书")])]),t._v(" "),a("tr",[a("td",[t._v("f=$((5 * 7))")]),t._v(" "),a("td",[t._v("是数学运算的结果")])]),t._v(" "),a("tr",[a("td",[t._v("$foo")]),t._v(" "),a("td",[t._v("读取变量 foo")])]),t._v(" "),a("tr",[a("td",[t._v("${foo}")]),t._v(" "),a("td",[t._v("也表示变量，可以用于变量名与其他字符连用的情况")])]),t._v(" "),a("tr",[a("td",[t._v("unset foo 或 foo=''或 foo=")]),t._v(" "),a("td",[t._v("删除一个变量")])]),t._v(" "),a("tr",[a("td",[t._v("export")]),t._v(" "),a("td",[t._v("列出环境变量")])]),t._v(" "),a("tr",[a("td",[t._v("$?")]),t._v(" "),a("td",[t._v("上一个命令的退出码，用来判断上一个命令是否执行成功。返回值是 0，表示上一个命令执行成功；如果是非零，上一个命令执行失败")])]),t._v(" "),a("tr",[a("td",[t._v("$$")]),t._v(" "),a("td",[t._v("当前 Shell 的进程 ID，可以用来命名临时文件")])]),t._v(" "),a("tr",[a("td",[t._v("$_")]),t._v(" "),a("td",[t._v("上一个命令的最后一个参数")])]),t._v(" "),a("tr",[a("td",[t._v("$!")]),t._v(" "),a("td",[t._v("最近一个后台执行的异步命令的进程 ID")])]),t._v(" "),a("tr",[a("td",[t._v("$0")]),t._v(" "),a("td",[t._v("当前 Shell 的名称（在命令行直接执行时）或者脚本名（在脚本中执行时）")])]),t._v(" "),a("tr",[a("td",[t._v("$-")]),t._v(" "),a("td",[t._v("当前 Shell 的启动参数。")])]),t._v(" "),a("tr",[a("td",[t._v("$@和$#")]),t._v(" "),a("td",[t._v("脚本的参数数量")])]),t._v(" "),a("tr",[a("td",[t._v("${varname:-word}")]),t._v(" "),a("td",[t._v("如果变量 varname 存在且不为空，则返回它的值，否则返回 word")])]),t._v(" "),a("tr",[a("td",[t._v("${varname:=word}")]),t._v(" "),a("td",[t._v("如果变量 varname 存在且不为空，则返回它的值，否则将它设为 word，并且返回 word")])]),t._v(" "),a("tr",[a("td",[t._v("${varname:+word}")]),t._v(" "),a("td",[t._v("如果变量名存在且不为空，则返回 word，否则返回空值.测试变量是否存在")])]),t._v(" "),a("tr",[a("td",[t._v("${varname:?message}")]),t._v(" "),a("td",[t._v("如果变量 varname 存在且不为空，则返回它的值，否则打印出 varname: message，并中断脚本的执行。如果省略了 message，则输出默认的信息“parameter null or not set.”。它的目的是防止变量未定义")])])])]),t._v(" "),a("h2",{attrs:{id:"环境变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境变量"}},[t._v("#")]),t._v(" 环境变量")]),t._v(" "),a("ul",[a("li",[t._v("/etc/profile\n"),a("ul",[a("li",[t._v("系统级别的环境变量")]),t._v(" "),a("li",[t._v("/etc/profile 会首先执行/etc/profile.d/目录下的所有*.sh 文件。")]),t._v(" "),a("li",[t._v("需要注销系统才能生效")])])]),t._v(" "),a("li",[t._v("～/.bashrc 文件值对当前用户有用\n"),a("ul",[a("li",[t._v("~/.bashrc ~/bash_file 是当前用户下对配置信息。")]),t._v(" "),a("li",[t._v("修改后用 source 命令更新")])])])]),t._v(" "),a("h3",{attrs:{id:"export-set-env-declare-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#export-set-env-declare-的区别"}},[t._v("#")]),t._v(" export/set/env/declare 的区别")]),t._v(" "),a("ul",[a("li",[t._v("env：显示当前"),a("strong",[t._v("用户")]),t._v("的"),a("strong",[t._v("环境变量")]),t._v("/usr/bin/env，但不会显示其"),a("strong",[t._v("自定义变量")]),t._v("。")]),t._v(" "),a("li",[t._v("export：功能同 env 一样，也是显示当前用户的环境变量，只不过该命令的输出是按"),a("strong",[t._v("变量名进行排序")]),t._v("的。")]),t._v(" "),a("li",[t._v("declare：显示当前 Shell 中定义的所有变量，包括用户的"),a("strong",[t._v("环境变量和自定义变量")]),t._v("，该命令的输出按变量名进行排序。")]),t._v(" "),a("li",[t._v("set：功能同 declare 一样，显示当前 Shell 中定义的所有变量，包括用户的环境变量和自定义变量。")])]),t._v(" "),a("p",[t._v("根据上面的说明，我们可以得出下面的结论：")]),t._v(" "),a("ul",[a("li",[t._v("env 和 export 显示的是环境变量。")]),t._v(" "),a("li",[t._v("set 和 declare 显示的是环境变量和自定义变量。")])]),t._v(" "),a("p",[t._v("要查看全局变量，可以使用 env 或 printenv 命令")]),t._v(" "),a("p",[t._v("命令 env、printenv 和 set 之间的差异很细微。set 命令会显示出全局变量、局部变量以 及用户定义变量。它还会按照字母顺序对结果进行排序。env 和 printenv 命令同 set 命 令的区别在于前两个命令不会对变量排序，也不会输出局部变量和用户定义变量。在这 种情况下，env 和 printenv 的输出是重复的。不过 env 命令有一个 printenv 没有的功能， 这使得它要更有用一些。")]),t._v(" "),a("p",[t._v("局部环境变量用的是小写字母\n系统环境变量都是大写字母。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("header 1")]),t._v(" "),a("th",[t._v("header 2")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("printenv HOME")]),t._v(" "),a("td",[t._v("显示个别环境变量的值，")])]),t._v(" "),a("tr",[a("td",[t._v("echo $HOME")]),t._v(" "),a("td",[t._v("引用某个环境变量的")])])])]),t._v(" "),a("h2",{attrs:{id:"declare"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#declare"}},[t._v("#")]),t._v(" declare")]),t._v(" "),a("p",[t._v("declare 命令可以声明一些特殊类型的变量，为变量设置一些限制，比如声明只读类型的变量和整数类型的变量。")]),t._v(" "),a("p",[t._v("declare 命令输出当前环境的所有变量，包括函数在内，等同于不带有任何参数的 set 命令")]),t._v(" "),a("h2",{attrs:{id:"shellscript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shellscript"}},[t._v("#")]),t._v(" shellScript")]),t._v(" "),a("p",[t._v("login shell")]),t._v(" "),a("ul",[a("li",[t._v("通过完整登录流程是运行的 shell\n"),a("ul",[a("li",[t._v("读取 etc/profile 文件")]),t._v(" "),a("li",[t._v("读取 etc/profile.d/.sh 脚本（PATH/USER/HOSTNAME/HISTSIZE 等）")]),t._v(" "),a("li",[t._v("读取/etc/profile.d/*.sh(颜色、语言、指令别名)")]),t._v(" "),a("li",[t._v("~/.bash_profile（用户个性化配置，常用软件的 path）、~/bash_login、~/.profile【只依次读取其中一个】")]),t._v(" "),a("li",[t._v("~/.bash_rc、/etc/bashrc")]),t._v(" "),a("li",[t._v("使用 source 指令重新加载")])])])]),t._v(" "),a("p",[t._v("non-login shell")]),t._v(" "),a("ul",[a("li",[t._v("不需要登录即可运行的 shell，如 su，和原 bash 下的新 bash 动作\n"),a("ul",[a("li",[t._v("~/.bashrc、/etc/bashrc")]),t._v(" "),a("li",[t._v("读取/etc/profile.d/*.sh(颜色、语言、指令别名)")]),t._v(" "),a("li",[t._v("~/.bash_logout （退出登录时运行、执行备份、缓存、临时文件清理的任务）")])])])]),t._v(" "),a("h3",{attrs:{id:"shebang"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shebang"}},[t._v("#")]),t._v(" Shebang")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("脚本的第一行通常是指定解释器，即这个脚本必须通过什么解释器执行。这一行以#!字符开头，这个字符称为 Shebang，所以这一行就叫做 Shebang 行。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("#!")]),t._v("后面就是脚本解释器的位置，Bash 脚本的解释器一般是/bin/sh 或/bin/bash。")])])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[t._v("#!/bin/sh")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 或者")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/bin/bash")]),t._v("\n")])])]),a("p",[t._v("有 Shebang 行的时候，可以直接调用执行。\n"),a("code",[t._v("./script.sh")]),t._v("\n如果没有 Shebang 行，就只能手动将脚本传给解释器来执行\n"),a("code",[t._v("bash ./script.sh")]),t._v(" 或者"),a("code",[t._v("/bin/sh ./script.sh")])]),t._v(" "),a("h3",{attrs:{id:"source-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#source-命令"}},[t._v("#")]),t._v(" source 命令")]),t._v(" "),a("ol",[a("li",[t._v("执行一个脚本，通常用于重新加载一个配置文件.source .bashrc")]),t._v(" "),a("li",[t._v("在脚本内部加载外部库。"),a("code",[t._v("source ./lib.sh")])])]),t._v(" "),a("h3",{attrs:{id:"权限"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#权限"}},[t._v("#")]),t._v(" 权限")]),t._v(" "),a("p",[t._v("chmod")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("脚本需要有执行权限才能执行")])]),t._v(" "),a("li",[a("p",[t._v("访问权限分为文件和目录")])]),t._v(" "),a("li",[a("p",[t._v("文件或目录的访问权限分为只读（r），可写（w）和可执行（x）三种：以文件为例，文件被创建时，文件所有者自动拥有对该文件的读、写和可执行权限")])]),t._v(" "),a("li",[a("p",[t._v("有三种不同类型的用户可对文件或目录进行访问：文件所有者，同一用户组用户和其他用户。所有者一般是文件的创建者。")])]),t._v(" "),a("li",[a("p",[t._v("权限参数 mode 主要针对 Linux 和 Unix 操作系统，Window 的权限默认是可读、可写、不可执行，所以权限位数字表示为 0o666，转换十进制表示为 438。")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://fishc.com.cn/forum.php?mod=image&aid=41231&size=400x300&key=51bb87ad6e2579a8&type=1",alt:"搜狗截图20151223035154.png"}}),a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/7/29/16c3e70d6486d6fd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 给所有用户执行权限")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" +x script.sh\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 给所有用户读权限和执行权限")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" +rx script.sh\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 或者")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("755")]),t._v(" script.sh "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 常用755权限")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只给脚本拥有者读权限和执行权限")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" u+rx script.sh\n")])])]),a("p",[t._v("sh 执行脚本命令没有权限也能正常执行")]),t._v(" "),a("ul",[a("li",[t._v("sh+脚本名称，可以不必事先设定 shell 的执行权限。因为这个是将 test.sh 作为参数传给 sh(bash)命令来执行的。这时不是 test.sh 自己来执行，而是被人家调用执行，所以不要执行权限。")]),t._v(" "),a("li",[t._v("如果直接运行./test.sh，就会报权限问题")])]),t._v(" "),a("h3",{attrs:{id:"echo-输出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#echo-输出"}},[t._v("#")]),t._v(" echo 输出")]),t._v(" "),a("ul",[a("li",[t._v("echo -n 取消行尾的换行")]),t._v(" "),a("li",[t._v("echo -e 解释特殊字符")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 加上斜杠/会将下一行跟当前行放在一起解释。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\nbar\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 等同于 echo foo bar")]),t._v("\n")])])]),a("h2",{attrs:{id:"目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://wangdoc.com/bash/stack.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("目录"),a("OutboundLink")],1)]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("命令")]),t._v(" "),a("th",[t._v("解释")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("cd -")]),t._v(" "),a("td",[t._v("返回前一次的目录")])]),t._v(" "),a("tr",[a("td",[t._v("pushd dirname")]),t._v(" "),a("td",[t._v("进入目录 dirname，并将该目录放入堆栈")])]),t._v(" "),a("tr",[a("td",[t._v("popd")]),t._v(" "),a("td",[t._v("会移除堆栈的顶部记录，并进入新的堆栈顶部目录")])]),t._v(" "),a("tr",[a("td",[t._v("popd -n")]),t._v(" "),a("td",[t._v("仅删除堆栈顶部的记录，不改变目录，执行完成后还停留在当前目录")])]),t._v(" "),a("tr",[a("td",[t._v("pushd +3")]),t._v(" "),a("td",[t._v("从栈顶算起的 3 号目录（从 0 开始），移动到栈顶")])]),t._v(" "),a("tr",[a("td",[t._v("dirs")]),t._v(" "),a("td",[t._v("显示目录堆栈的内容")])])])]),t._v(" "),a("h2",{attrs:{id:"扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展"}},[t._v("#")]),t._v(" 扩展")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("命令")]),t._v(" "),a("th",[t._v("目录")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("~")]),t._v(" "),a("td",[t._v("/home/me，自动扩展成当前用户的主目录")])]),t._v(" "),a("tr",[a("td",[t._v("~foo")]),t._v(" "),a("td",[t._v("/home/foo")])]),t._v(" "),a("tr",[a("td",[t._v("~root")]),t._v(" "),a("td",[t._v("/root")])])])]),t._v(" "),a("h3",{attrs:{id:"匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配"}},[t._v("#")]),t._v(" 匹配")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("字符")]),t._v(" "),a("th",[t._v("匹配")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("\\*")])]),t._v(" "),a("td",[t._v("任意数量的任意字符,只匹配当前目录，不会匹配子目录。例如子目录有一个 a.txt 用"),a("code",[t._v("\\*/\\*.txt")]),t._v("表示。")])]),t._v(" "),a("tr",[a("td",[t._v("?")]),t._v(" "),a("td",[t._v("任意单个字符。例如 ls ??.txt 表示匹配当前目录下的 ab.txt")])]),t._v(" "),a("tr",[a("td",[t._v("globstar 参数："),a("code",[t._v("\\*\\*")])]),t._v(" "),a("td",[t._v("零个或多个子目录,"),a("code",[t._v("\\*\\*/\\*.txt")]),t._v("表示匹配当前和所有子目录下的 txt 文件")])])])]),t._v(" "),a("h2",{attrs:{id:"转义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转义"}},[t._v("#")]),t._v(" 转义")]),t._v(" "),a("p",[t._v("Bash 只有一种数据类型，就是字符串。不管用户输入什么数据，Bash 都视为字符串。因此，字符串相关的引号和转义，对 Bash 来说就非常重要")]),t._v(" "),a("ul",[a("li",[t._v("单引号：\n"),a("ul",[a("li",[t._v("用于保留字符的字面含义，各种特殊字符在单引号里面，都会变为普通字符，比如星号（*）、美元符号（$）、反斜杠（\\）等。")])])]),t._v(" "),a("li",[t._v("双引号\n"),a("ul",[a("li",[t._v("里面不会进行文件名扩展.三个特殊字符除外：美元符号（$）、反引号（`）和反斜杠（\\）。这三个字符在双引号之中，依然有特殊含义，会被 Bash 自动扩展。换行符在双引号之中就失去了这种特殊作用，只用来换行，所以可以输入多行。echo 命令会将换行符原样输出，显示的时候正常解释为换行。")])])])]),t._v(" "),a("h2",{attrs:{id:"here-字符串-here-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#here-字符串-here-string"}},[t._v("#")]),t._v(" Here 字符串（Here string）")]),t._v(" "),a("p",[t._v("使用三个小于号（"),a("code",[t._v("<<<")]),t._v("）表示 Here 字符串。")]),t._v(" "),a("p",[a("code",[t._v("<<< string")]),t._v("\n它的作用是将"),a("code",[t._v("string通过标准输入，传递给命令")]),t._v("。")]),t._v(" "),a("p",[t._v("有些命令直接接受给定的参数，与通过标准输入接受参数，结果是不一样的。所以才有了这个语法，使得将字符串通过标准输入传递给命令更方便，比如 cat 命令只接受标准输入传入的字符串。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hi there'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 等同于")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hi there'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v("\n")])])]),a("h3",{attrs:{id:"环境变量-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境变量-2"}},[t._v("#")]),t._v(" 环境变量")]),t._v(" "),a("ul",[a("li",[t._v("set 命令可以显示所有变量（包括环境变量和自定义变量），以及所有的 Bash 函数。")]),t._v(" "),a("li",[t._v("env 命令或 printenv 命令，可以显示所有环境变量。")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printenv")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PATH")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 或者")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$PATH")]),t._v("\n注意，printenv命令后面的变量名，不用加前缀$。\n")])])]),a("h2",{attrs:{id:"字符串操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串操作"}},[t._v("#")]),t._v(" 字符串操作")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("命令")]),t._v(" "),a("th",[t._v("用法")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("获取字符串长度")]),t._v(" "),a("td",[t._v("${#varname}")])]),t._v(" "),a("tr",[a("td",[t._v("脚本的参数个数")]),t._v(" "),a("td",[t._v("$#")])]),t._v(" "),a("tr",[a("td",[t._v("字符串提取子串：返回变量$varname 的子字符串，从位置 offset 开始（从 0 开始计算），长度为 length")]),t._v(" "),a("td",[t._v("${varname:offset:length}")])]),t._v(" "),a("tr",[a("td",[t._v("如果 pattern 匹配变量 variable 的"),a("code",[t._v("开头")]),t._v("， 删除"),a("code",[t._v("最短")]),t._v("匹配（非贪婪匹配）的部分，返回剩余部分")]),t._v(" "),a("td",[t._v("${variable#pattern}")])]),t._v(" "),a("tr",[a("td",[t._v("如果 pattern 匹配变量 variable 的开头，删除"),a("code",[t._v("最长")]),t._v("匹配（贪婪匹配）的部分，返回剩余部分")]),t._v(" "),a("td",[t._v("${variable##pattern}")])]),t._v(" "),a("tr",[a("td",[t._v("将头部匹配的部分，替换成其他内容 replace")]),t._v(" "),a("td",[t._v("${variable/#pattern/string}")])]),t._v(" "),a("tr",[a("td",[t._v("如果 pattern 匹配变量 variable 的结尾,删除最短匹配（非贪婪匹配）的部分，返回剩余部分")]),t._v(" "),a("td",[t._v("${variable%pattern}")])]),t._v(" "),a("tr",[a("td",[t._v("如果 pattern 匹配变量 variable 的结尾， 删除最长匹配（贪婪匹配）的部分，返回剩余部分")]),t._v(" "),a("td",[t._v("${variable%%pattern}")])]),t._v(" "),a("tr",[a("td",[t._v("将尾部匹配的部分，替换成其他内容")]),t._v(" "),a("td",[t._v("${variable/%pattern/string}")])]),t._v(" "),a("tr",[a("td",[t._v("如果 pattern 匹配变量 variable 的一部分，最长匹配（贪婪匹配）的那部分被 string 替换，但仅替换第一个匹配")]),t._v(" "),a("td",[t._v("${variable/pattern/string}")])]),t._v(" "),a("tr",[a("td",[t._v("如果 pattern 匹配变量 variable 的一部分，最长匹配（贪婪匹配）的那部分被 string 替换，所有匹配都替换")]),t._v(" "),a("td",[t._v("${variable//pattern/string}")])]),t._v(" "),a("tr",[a("td",[t._v("变量转为大写")]),t._v(" "),a("td",[t._v("${varname^^}")])]),t._v(" "),a("tr",[a("td",[t._v("变量转为小写")]),t._v(" "),a("td",[t._v("${varname,,}")])])])]),t._v(" "),a("p",[t._v("记忆总结：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("\\#")]),t._v(" 是头部匹配")]),t._v(" "),a("li",[t._v("% 是尾部匹配")]),t._v(" "),a("li",[t._v("单个%或#是非贪婪匹配，两个是贪婪匹配")]),t._v(" "),a("li",[t._v("没有指定都是直接删除匹配部分")])]),t._v(" "),a("h2",{attrs:{id:"条件判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#条件判断"}},[t._v("#")]),t._v(" 条件判断")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" commands"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\ncommands\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("elif commands"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\ncommands"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("else\ncommands"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fi")]),t._v("\n")])])]),a("h3",{attrs:{id:"test-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test-命令"}},[t._v("#")]),t._v(" test 命令")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 写法一")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" expression\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 写法二，[]必须有空格")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" expression "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 写法三，[]必须有空格，还支持正则")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" expression "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" -a "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("：如果 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" 存在，则为true。\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" -b "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("：如果 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" 存在并且是一个块（设备）文件，则为true。\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" -c "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("：如果 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" 存在并且是一个字符（设备）文件，则为true。\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" -d "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("：如果 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" 存在并且是一个目录，则为true。\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" -e "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("：如果 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" 存在，则为true。\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" -f "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("：如果 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" 存在并且是一个普通文件，则为true。\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" -g "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("：如果 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" 存在并且设置了组 ID，则为true。\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" -G "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("：如果 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" 存在并且属于有效的组 ID，则为true。\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" -h "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("：如果 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" 存在并且是符号链接，则为true。\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" -k "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("：如果 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" 存在并且设置了它的“sticky bit”，则为true。\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" -L "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("：如果 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" 存在并且是一个符号链接，则为true。\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" -N "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("：如果 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" 存在并且自上次读取后已被修改，则为true。\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" -O "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("：如果 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" 存在并且属于有效的用户 ID，则为true。\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" -p "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("：如果 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" 存在并且是一个命名管道，则为true。\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" -r "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("：如果 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" 存在并且可读（当前用户有可读权限），则为true。\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" -s "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("：如果 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" 存在且其长度大于零，则为true。\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" -S "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("：如果 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" 存在且是一个网络 socket，则为true。\n")])])]),a("h3",{attrs:{id:"string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" string")]),t._v(" "),a("ul",[a("li",[t._v("[ string ]：如果 string 不为空（长度大于 0），则判断为真。")]),t._v(" "),a("li",[t._v("[ -n string ]：如果字符串 string 的长度大于零，则判断为真。")]),t._v(" "),a("li",[t._v("[ -z string ]：如果字符串 string 的长度为零，则判断为真。")]),t._v(" "),a("li",[t._v("[ string1 = string2 ]：如果 string1 和 string2 相同，则判断为真。")]),t._v(" "),a("li",[t._v("[ string1 == string2 ] 等同于[ string1 = string2 ]。")]),t._v(" "),a("li",[t._v("[ string1 != string2 ]：如果 string1 和 string2 不相同，则判断为真。")]),t._v(" "),a("li",[t._v("[ string1 '>' string2 ]：如果按照字典顺序 string1 排列在 string2 之后，则判断为真。")]),t._v(" "),a("li",[t._v("[ string1 '<' string2 ]：如果按照字典顺序 string1 排列在 string2 之前，则判断为真。")])]),t._v(" "),a("h3",{attrs:{id:"number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[t._v("#")]),t._v(" number")]),t._v(" "),a("ul",[a("li",[t._v("[ integer1 -eq integer2 ]：如果 integer1 等于 integer2，则为 true。")]),t._v(" "),a("li",[t._v("[ integer1 -ne integer2 ]：如果 integer1 不等于 integer2，则为 true。")]),t._v(" "),a("li",[t._v("[ integer1 -le integer2 ]：如果 integer1 小于或等于 integer2，则为 true。")]),t._v(" "),a("li",[t._v("[ integer1 -lt integer2 ]：如果 integer1 小于 integer2，则为 true。")]),t._v(" "),a("li",[t._v("[ integer1 -ge integer2 ]：如果 integer1 大于或等于 integer2，则为 true。")]),t._v(" "),a("li",[t._v("[ integer1 -gt integer2 ]：如果 integer1 大于 integer2，则为 true。")])]),t._v(" "),a("h3",{attrs:{id:"正则判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则判断"}},[t._v("#")]),t._v(" 正则判断")]),t._v(" "),a("p",[t._v("[[ string1 =~ regex ]]")]),t._v(" "),a("h3",{attrs:{id:"逻辑判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑判断"}},[t._v("#")]),t._v(" 逻辑判断")]),t._v(" "),a("ul",[a("li",[t._v("AND 运算：&&，或者 -a")]),t._v(" "),a("li",[t._v("OR 运算：||，或者-o")]),t._v(" "),a("li",[t._v("NOT 运算：!")])]),t._v(" "),a("h3",{attrs:{id:"算术判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算术判断"}},[t._v("#")]),t._v(" 算术判断")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"true"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fi")]),t._v("\n")])])]),a("h2",{attrs:{id:"循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环"}},[t._v("#")]),t._v(" 循环")]),t._v(" "),a("h3",{attrs:{id:"while-循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#while-循环"}},[t._v("#")]),t._v(" while 循环")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("while condition; do\ncommands\ndone\n")])])]),a("h3",{attrs:{id:"util-循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#util-循环"}},[t._v("#")]),t._v(" util 循环")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("until condition; do\ncommands\ndone\n")])])]),a("h3",{attrs:{id:"for-in-循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-in-循环"}},[t._v("#")]),t._v(" for...in 循环")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("for i in *.png; do\nls -l $i\ndone\n\n\nfor (( i=0; i<5; i=i+1 )); do\necho $i\ndone\n")])])]),a("h2",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#创建函数")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第一种")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# codes")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第二种")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# codes")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 函数调用")]),t._v("\nfn "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 表示fn调用并传参$1和$2")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用函数输出")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("result")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'func1'")]),t._v("或者result"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("func1"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n")])])]),a("p",[t._v("删除一个函数，可以使用 unset 命令。"),a("code",[t._v("unset -f functionName")])]),t._v(" "),a("h2",{attrs:{id:"函数变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数变量"}},[t._v("#")]),t._v(" 函数变量")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("变量")]),t._v(" "),a("th",[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("$1~$9，${10}")]),t._v(" "),a("td",[t._v("函数的第一个到第 9 个的参数。第 10 个参数")])]),t._v(" "),a("tr",[a("td",[t._v("$0")]),t._v(" "),a("td",[t._v("函数所在的脚本名。")])]),t._v(" "),a("tr",[a("td",[t._v("$#")]),t._v(" "),a("td",[t._v("函数的参数总数。")])]),t._v(" "),a("tr",[a("td",[t._v("$@")]),t._v(" "),a("td",[t._v("函数的全部参数，参数之间使用空格分隔。")])]),t._v(" "),a("tr",[a("td",[t._v("$*")]),t._v(" "),a("td",[t._v("函数的全部参数，参数之间使用变量$IFS 值的第一个字符分隔，默认为空格，但是可以自定义。")])])])]),t._v(" "),a("p",[t._v("local foo 说明是函数内的局部变量，否则是属于全局变量")]),t._v(" "),a("h2",{attrs:{id:"数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),a("h2",{attrs:{id:"新建数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新建数组"}},[t._v("#")]),t._v(" 新建数组")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("ARRAY")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value1 value2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". valueN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 等同于")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("ARRAY")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\nvalue1\nvalue2\nvalue3\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n$ "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("mp3s")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" *.mp3 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" // 将当前目录的所有 MP3 文件，放进一个数组\n")])])]),a("h3",{attrs:{id:"数组操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组操作"}},[t._v("#")]),t._v(" 数组操作")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 读取数组某个位置上元素，不指定默认输出第一个元素")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 循环数组元素")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[t._v("i")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("}")]),t._v('"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("done")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 赋值数组")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("hobbies")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${activities"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("}")]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取数组的长度")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("#")]),t._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("*"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("#")]),t._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提取数组成员")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("position"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("length}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# push成员")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d e f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除成员")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("unset")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h2",{attrs:{id:"重定向"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重定向"}},[t._v("#")]),t._v(" 重定向")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://c.biancheng.net/view/942.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux Shell 重定向（输入输出重定向）精讲"),a("OutboundLink")],1)]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("命令")]),t._v(" "),a("th",[t._v("示例")]),t._v(" "),a("th",[t._v("解释")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("echo > file")]),t._v(" "),a("td",[t._v("echo 123 > a.txt")]),t._v(" "),a("td",[t._v("输出重定向到 a.txt 文件")])]),t._v(" "),a("tr",[a("td",[t._v("echo >> file")]),t._v(" "),a("td",[t._v("echo 123 >> a.txt")]),t._v(" "),a("td",[t._v("追加 123 到 a.txt 文件")])]),t._v(" "),a("tr",[a("td",[t._v("&>")]),t._v(" "),a("td",[t._v("./a.sh &> a.txt")]),t._v(" "),a("td",[t._v("正常重定向不会输出错误，错误会在控制台上出现，而"),a("code",[t._v("&>")]),t._v(" 符号将所有的输出都会发送到同一个位置，包括错误输出")])]),t._v(" "),a("tr",[a("td",[t._v("dev/null")]),t._v(" "),a("td",[t._v("ls -al > /dev/null")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("2>")]),t._v(" "),a("td",[t._v("ls -al badfile 2> test4")]),t._v(" "),a("td",[t._v("只重定向错误消息")])]),t._v(" "),a("tr",[a("td",[t._v("|")]),t._v(" "),a("td",[t._v("echo 'yes' |")]),t._v(" "),a("td",[t._v("表示管道，上一条命令的输出，作为下一条命令参数，如 echo 'yes'")])])])]),t._v(" "),a("h2",{attrs:{id:"后台作业"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#后台作业"}},[t._v("#")]),t._v(" 后台作业")]),t._v(" "),a("p",[t._v("./a.sh & 加上一个&号即可让脚本在后台作业二控制台可以继续输入")]),t._v(" "),a("h2",{attrs:{id:"sed-编辑器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sed-编辑器"}},[t._v("#")]),t._v(" sed 编辑器")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("命令")]),t._v(" "),a("th",[t._v("解释")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("echo \"This is a test\" | sed 's/test/big test/'")]),t._v(" "),a("td",[t._v("s 命令会用斜线间指定的第二个文本字符串来替换第 一个文本字符串模式。在本例中是 big test 替换了 test")])]),t._v(" "),a("tr",[a("td",[t._v("sed 's/dog/cat/' data1.txt")]),t._v(" "),a("td",[t._v("将 data1.txt 文件中的 dog 变成 cat")])]),t._v(" "),a("tr",[a("td",[t._v("sed -e 's/brown/green/; s/dog/cat/' data1.txt")]),t._v(" "),a("td",[t._v("；分隔多个 sed 命令")])])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("s/pattern/replacement/flags 有4种可用的替换标记：\n数字，表明新文本将替换第几处模式匹配的地方；\ng，表明新文本将会替换所有匹配的文本；\np，表明原先行的内容要打印出来；\nw file，将替换的结果写到文件中。\n")])])]),a("h3",{attrs:{id:"grep"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grep"}},[t._v("#")]),t._v(" grep")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("命令")]),t._v(" "),a("th",[t._v("解释")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("grep linux ./ -rn")]),t._v(" "),a("td",[t._v("在当前文件夹下查找包含 linux 的行")])]),t._v(" "),a("tr",[a("td",[t._v("grep match_pattern file_name")]),t._v(" "),a("td",[t._v("在文件中搜索一个单词，命令会返回一个包含**“match_pattern”**的文本行：")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v("参考")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247484810&idx=1&sn=0b622ae617b863ef1cc3a32c17b8b755&chksm=cea24a41f9d5c357199073c1e4692b7da7dcbd1809cf634a6cfec8c64c12250efc5274992f06&token=1082669959&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"}},[t._v("快速入门大厂后端面试必备的 Shell 编程"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=n.exports}}]);