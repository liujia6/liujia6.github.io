(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{475:function(t,a,s){"use strict";s.r(a);var e=s(22),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"gitlab-ci"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-ci"}},[t._v("#")]),t._v(" Gitlab-CI")]),t._v(" "),s("h2",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),s("p",[t._v("Gitlab CI/CD 是一款用于"),s("a",{attrs:{href:"https://github.com/ascoders/weekly/blob/v2/101.%E7%B2%BE%E8%AF%BB%E3%80%8A%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%20vs%20%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98%20vs%20%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2%E3%80%8B.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("持续集成（CI），持续交付（CD）"),s("OutboundLink")],1),t._v("的工具，相似的工具有 Jenkins、Travis CI、GoCD 等。")]),t._v(" "),s("ul",[s("li",[t._v("CI 即持续集成，Continuous Integration，目标：持续集成，持续测试（保证代码质量）")]),t._v(" "),s("li",[t._v("CD 即持续交付，即 Continuous Delivery，目标:  持续部署（自动发布版本，供用户使用)。")]),t._v(" "),s("li",[t._v("从 GitLab 8.0 开始，GitLab CI 就已经集成在 GitLab 中，我们只要在项目中添加一个 .gitlab-ci.yml 文件，然后添加一个 Runner，即可进行持续集成。")]),t._v(" "),s("li",[t._v(".gitlab-ci.yml 文件使用 yaml 语法，"),s("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/07/yaml.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("语法介绍请戳"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("与 jenkins 对比")]),t._v(" "),s("ul",[s("li",[t._v("gitlab-ci 的优势在于比较配置和使用简单，能在 gitlab 上直接看到执行过程，不需要配 webhook，集成在了 gitlab 上。")]),t._v(" "),s("li",[t._v("jenkins 的优势在于编译服务和代码仓库分离，而且编译配置文件不需要在工程中配置，并且 jenkins 依靠它丰富的插件，可以配置很多 gitlab-ci 不存在的功能，比如说看编译状况统计等")])]),t._v(" "),s("h2",{attrs:{id:"gitlab-runner"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-runner"}},[t._v("#")]),t._v(" gitlab-runner")]),t._v(" "),s("ul",[s("li",[t._v("gitlab 的自动化操作都是在 runner 机器中运行,我们需要注册 runner")]),t._v(" "),s("li",[t._v("runner 分为 shared runner 和 specified runner.")])]),t._v(" "),s("h3",{attrs:{id:"gitlab-操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-操作"}},[t._v("#")]),t._v(" gitlab 操作")]),t._v(" "),s("p",[t._v("gitlab 上有关 gitlab-ci 的配置有两处")]),t._v(" "),s("ul",[s("li",[t._v("一处是 CI/CD 可以查看构建任务 pipeline、job 的执行情况")]),t._v(" "),s("li",[t._v("一处是 setting 里面对 ci 的设置")])]),t._v(" "),s("img",{attrs:{src:"https://i.loli.net/2020/12/12/IVjWRdYUlOKbCsn.png",alt:"image-20201212122028807"}}),t._v(" "),s("ul",[s("li",[s("p",[t._v("一次提交触发一次 CI&CD 即执行一次脚本对应一个 pipeline")])]),t._v(" "),s("li",[s("p",[t._v("一个 pipeline 对应 stages 下的所有 job")])]),t._v(" "),s("li",[s("p",[t._v("一个 stage 可以有多个 job；")])])]),t._v(" "),s("h3",{attrs:{id:"skip-pipeline"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#skip-pipeline"}},[t._v("#")]),t._v(" Skip Pipeline")]),t._v(" "),s("ul",[s("li",[t._v("commit message 上加上[ci skip]  或者[skip ci]就可以跳过 pipeline 执行。")]),t._v(" "),s("li",[t._v("在一次 git push 调用中进行多次更改时，GitLab 最多创建四个分支和标签管道。此限制不影响任何更新的合并请求管道。所有更新的合并请求在使用管道处理合并请求时都会创建一个管道。")])]),t._v(" "),s("h2",{attrs:{id:"stages"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stages"}},[t._v("#")]),t._v(" stages")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("gitlab-ci 的 pipeline 由一个个 stage 顺序执行，每个 stage 可以有多个 job")])]),t._v(" "),s("li",[s("p",[t._v("job 是并行执行的\n所有 build 的 jobs 执行成功后，commit 才会标记为 success，所有的 build 的 jobs 执行成功，")])]),t._v(" "),s("li",[s("p",[t._v("任何一个前置的 jobs 失败了，commit 会标记为 failed 并且下一个 stages 的 jobs 都不会执行。")])]),t._v(" "),s("li",[s("p",[t._v("默认定义为 build，test 和 deploy。")])]),t._v(" "),s("li",[s("p",[t._v("如果一个 job 没有指定 stage，那么这个任务会分配到 test stage。")]),t._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stages")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" build\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" release_deploy\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" dev"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("deploy\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" prod_deploy\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"jobs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jobs"}},[t._v("#")]),t._v(" Jobs")]),t._v(" "),s("ul",[s("li",[t._v(".gitlab-ci.yml 允许指定无限量 jobs。")]),t._v(" "),s("li",[t._v("每个 jobs 必须有一个唯一的名字，而且不能是上面提到的关键字。")]),t._v(" "),s("li",[t._v("job 由一列参数来定义 jobs 的行为。")]),t._v(" "),s("li",[t._v("所属同一个 stage 的 job 都是并行的")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("job_name:\n")])])]),s("h3",{attrs:{id:"pages"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pages"}},[t._v("#")]),t._v(" pages")]),t._v(" "),s("p",[t._v("一个特殊的 job，用于上传静态内容到 GitLab，可用于服务于您的网站。需要满足以下条件")]),t._v(" "),s("ul",[s("li",[t._v("任何静态内容都必须放在"),s("code",[t._v("public/")]),t._v(" directory. 目录")]),t._v(" "),s("li",[s("code",[t._v("artifacts")]),t._v(" ：path ："),s("code",[t._v("public/")]),t._v(" 目录必须有")])]),t._v(" "),s("p",[t._v("下面的示例只是将所有文件从项目的根目录移动到 public/目录")]),t._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("pages")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" deploy\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" mkdir .public\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" cp "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("r * .public\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" mv .public public\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("artifacts")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 必须有")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("paths")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" public\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("only")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" master\n")])])]),s("h3",{attrs:{id:"script"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#script"}},[t._v("#")]),t._v(" script")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('script:\n\t- echo "📦 开始打包"\n\t- ssh xxx@xxxxxx "\n        rm -rf \\`ls -d /xxx/www/* | grep -v -E \'\\.tar\\.gz$\'\\` &&\n        cd /xxx/www &&\n        tar xvzf ${PKG_NAME} &&\n        rm ${PKG_NAME}"\n     # 长命令可以通过引号包裹，再用&&连接表示顺序执行命令\n')])])]),s("h3",{attrs:{id:"变量-variables"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量-variables"}},[t._v("#")]),t._v(" 变量：variables")]),t._v(" "),s("p",[t._v("变量可以被覆盖，并且是按照以下优先级依次降低")]),t._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/triggers/README.html#making-use-of-trigger-variables",target:"_blank",rel:"noopener noreferrer"}},[t._v("Trigger variables"),s("OutboundLink")],1),t._v(", "),s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/pipelines/schedules.html#using-variables",target:"_blank",rel:"noopener noreferrer"}},[t._v("scheduled pipeline variables"),s("OutboundLink")],1),t._v(", and "),s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/variables/README.html#override-a-variable-by-manually-running-a-pipeline",target:"_blank",rel:"noopener noreferrer"}},[t._v("manual pipeline run variables"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("li",[t._v("Project-level "),s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/variables/README.html#custom-environment-variables",target:"_blank",rel:"noopener noreferrer"}},[t._v("variables"),s("OutboundLink")],1),t._v(" or "),s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/variables/README.html#protect-a-custom-variable",target:"_blank",rel:"noopener noreferrer"}},[t._v("protected variables"),s("OutboundLink")],1),t._v(". 项目 CI 设置的变量")]),t._v(" "),s("li",[t._v("Group-level "),s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/variables/README.html#group-level-environment-variables",target:"_blank",rel:"noopener noreferrer"}},[t._v("variables"),s("OutboundLink")],1),t._v(" or "),s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/variables/README.html#protect-a-custom-variable",target:"_blank",rel:"noopener noreferrer"}},[t._v("protected variables"),s("OutboundLink")],1),t._v(". gitlab 分组下 CI 设置的变量")]),t._v(" "),s("li",[t._v("Instance-level "),s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/variables/README.html#instance-level-cicd-environment-variables",target:"_blank",rel:"noopener noreferrer"}},[t._v("variables"),s("OutboundLink")],1),t._v(" or "),s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/variables/README.html#protect-a-custom-variable",target:"_blank",rel:"noopener noreferrer"}},[t._v("protected variables"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/variables/README.html#inherit-environment-variables",target:"_blank",rel:"noopener noreferrer"}},[t._v("Inherited environment variables"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/yaml/README.html#job-variables",target:"_blank",rel:"noopener noreferrer"}},[t._v("YAML 定义的 job 级别变量"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/yaml/README.html#variables",target:"_blank",rel:"noopener noreferrer"}},[t._v("YAML 定义的全局变量"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/variables/README.html#deployment-variables",target:"_blank",rel:"noopener noreferrer"}},[t._v("部署环境变量"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://docs.gitlab.com/ce/ci/variables/README.html#predefined-variables-environment-variables",target:"_blank",rel:"noopener noreferrer"}},[t._v("预定义的环境变量"),s("OutboundLink")],1),t._v(" (优先级最低)")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("variables"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BUSINESS_LINE")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" $"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BUSINESS_LINE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"job-的执行条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#job-的执行条件"}},[t._v("#")]),t._v(" job 的执行条件")]),t._v(" "),s("p",[t._v("only（定义 job 执行条件）和 except（定义了 job 不被执行的条件）两个参数定义了 job 被创建的条件:")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("except 和 only 如果没有指定 name，默认是 tags 和 branches")])]),t._v(" "),s("li",[s("p",[t._v("only 和 except 如果都存在在一个 job 声明中，则所需引用将会被 only 和 except 所定义的分支过滤.")])]),t._v(" "),s("li",[s("p",[t._v("only 和 except 允许使用正则")])]),t._v(" "),s("li",[s("p",[t._v("only 和 except 允许使用指定仓库地址，但是不 forks 仓库")])])]),t._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("only")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#都是或者的关系")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" tags      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tag 分支 commit 之后触发")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" triggers  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# API 触发")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("branches")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当你的Git Refs对应的是一个分支时触发")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" tags      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当你的Git Refs对应的是一个标签时触发")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" pushes    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当你使用git push时触发")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" web       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当你使用Web界面的Run Pipeline时触发")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" merge_requests "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#当你创建或者更新一个merge_requests时触发")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" schedules "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 每日构建触发")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /^issue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("."),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("*$/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# job将会只在issue-开头的refs下执行")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" branches@gitlab"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("org/gitlab"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ce  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#在父仓库gitlab-org/    gitlab-ce有提交时运行。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 对分支的限制触发,只在分支是master和schedules的时候触发")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("refs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" master\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" schedules\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kubernetes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" active\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 变量条件触发，当RELEASE变量是staging或者STAGING存在时触发")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("variables")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' $RELEASE == "staging"\n      '),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" $STAGING\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' ($CI_COMMIT_BRANCH == "master" '),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(' $CI_COMMIT_BRANCH == "develop") '),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("&&")]),t._v(" $MY_VARIABLE\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 文件变化才触发")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("changes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Dockerfile\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" docker/scripts/*\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" dockerfiles/"),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("**/*")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" more_scripts/"),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("*.")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("rb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("py"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("sh"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("rules")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$CI_PIPELINE_SOURCE == \"merge_request_event\"'")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("when")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" manual\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("allow_failure")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$CI_PIPELINE_SOURCE == \"schedule\"'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(' ($CI_COMMIT_BRANCH == "master" '),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(' $CI_COMMIT_BRANCH == "develop") '),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("&&")]),t._v(" $MY_VARIABLE\n")])])]),s("p",[s("img",{attrs:{src:"https://i.loli.net/2020/12/13/TKO5iznorx2Vv46.png",alt:"image-20201213200855935"}})]),t._v(" "),s("h3",{attrs:{id:"image-services"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#image-services"}},[t._v("#")]),t._v(" image/services")]),t._v(" "),s("p",[t._v("该关键字指定一个任务（job）所使用的 docker 镜像，例如"),s("code",[t._v("image: python:latest")]),t._v("使用 Python 的最新镜像。")]),t._v(" "),s("p",[t._v("镜像下载的策略：")]),t._v(" "),s("ul",[s("li",[t._v("never： 当使用这个策略，会禁止 Gitlab Runner 从 Docker hub 或者其他地方下拉镜像，只能使用自己手动下拉的镜像")]),t._v(" "),s("li",[t._v("if-not-present： 当使用这个策略，Runner 会先检测本地是否有镜像，有的话使用该镜像，如果没有再去下拉。这个策略如果再配合定期删除镜像，就能达到比较好的效果。")]),t._v(" "),s("li",[t._v("always： 这个是 gitlab-ci 默认使用的策略，即每一次都是重新下拉镜像，导致的结果就是比较耗时间")])]),t._v(" "),s("h3",{attrs:{id:"artifacts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#artifacts"}},[t._v("#")]),t._v(" artifacts")]),t._v(" "),s("p",[t._v("artifacts 被用于在 job 作业成功后将制定列表里的文件或文件夹附加到 job 上，传递给下一个 job ，如果要在两个 job 之间传递 artifacts，你必须设置 dependencies,下面有几个例子")]),t._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("artifacts")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$CI_JOB_NAME"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# artifacts压缩包重命名")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("untracked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 传递所有git没有追踪的文件")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("when")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" on_failure "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当job执行失败时，上传artifacts,还有on_success 这个值是默认的，当job成功时上传artifacts。always 不管失败与否，都上传")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("artifacts")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" expire_in "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置 artifacts 上传包的失效时间. 如果不设置，artifacts 的打包是永远存在于 gitlab上 的，'3 mins 4 sec','2 hrs 20 min','2h20min','6 mos 1 day','47 yrs 6 mos and 4d','3 weeks and 2 days'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("paths")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" binaries/ "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#传递所有binaries和.config：")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" .config\n")])])]),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://juejin.cn/post/6844904045581172744#heading-11",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gitlab-CI 使用教程"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://docs.gitlab.com/ee/ci/README.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gitlab-ci-官方文档"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);