(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{460:function(t,s,a){"use strict";a.r(s);var n=a(22),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),a("h2",{attrs:{id:"作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[t._v("#")]),t._v(" 作用域")]),t._v(" "),a("ul",[a("li",[t._v("编译\n"),a("ul",[a("li",[t._v("分词/词法分析")]),t._v(" "),a("li",[t._v("解析/语法分析")]),t._v(" "),a("li",[t._v("代码生成")])])]),t._v(" "),a("li",[t._v("演员表\n"),a("ul",[a("li",[t._v("引擎\n"),a("ul",[a("li",[t._v("负责整个 js 程序的编译和执行过程")])])]),t._v(" "),a("li",[t._v("编译器\n"),a("ul",[a("li",[t._v("负责词法分析和代码生成等")])])]),t._v(" "),a("li",[t._v("作用域\n"),a("ul",[a("li",[t._v("负责手机和维护所有声明的变量以及查询")])])])])]),t._v(" "),a("li",[t._v("当变量出现在赋值操作的左侧时进行 LHS 查询，出现在右侧时进行 RHS 查询。赋值操作的左侧或右侧\n"),a("ul",[a("li",[t._v("不成功的 RHS 引用会导致抛出 ReferenceError 异常。不成功的 LHS 引用会导致自动隐式\n地创建一个全局变量（非严格模式下），该变量使用 LHS 引用的目标作为标识符，或者抛\n出 ReferenceError 异常（严格模式下）。")])])]),t._v(" "),a("li",[t._v("作用域是根据名称查找变量的一套规则，当作用域隔离操作符号嵌套，例如函数嵌套时，就发生了作用域的嵌套，当我们在查找当前作用域的对应变量找不到时，引擎就会在外层嵌套的作用域继续找，直到找到为止。")]),t._v(" "),a("li",[t._v("词法作用域\n"),a("ul",[a("li",[t._v("定义在词法阶段的作用域")]),t._v(" "),a("li",[t._v("无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由函数被声明时所处\n的位置决定。")]),t._v(" "),a("li",[t._v("任何声明在某个作用域内的变量，都将附属于这个作用域。")]),t._v(" "),a("li",[t._v("函数声明提升")])])])]),t._v(" "),a("h2",{attrs:{id:"执行环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行环境"}},[t._v("#")]),t._v(" 执行环境")]),t._v(" "),a("p",[t._v("执行环境定义了变量或者函数有权访问的其他数据")]),t._v(" "),a("p",[t._v("一个执行环境包含以下数据")]),t._v(" "),a("p",[t._v("变量对象、作用域链、this")]),t._v(" "),a("h3",{attrs:{id:"可执行代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可执行代码"}},[t._v("#")]),t._v(" 可执行代码")]),t._v(" "),a("p",[t._v("全局代码、函数代码、eval代码")]),t._v(" "),a("h3",{attrs:{id:"活动对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#活动对象"}},[t._v("#")]),t._v(" 活动对象")]),t._v(" "),a("p",[t._v("在函数上下文中，我们用活动对象来表示变量对象")]),t._v(" "),a("p",[t._v("只是变量对象是规范上的或者说是引擎实现上的，不可在 JavaScript 环境中访问，只有到当进入一个执行上下文中，这个执行上下文的变量对象才会被激活，所以才叫 activation object 呐，而只有被激活的变量对象，也就是活动对象上的各种属性才能被访问。")]),t._v(" "),a("p",[t._v("活动对象是在进入函数上下文时刻被创建的，它通过函数的 arguments 属性初始化。arguments 属性值是 Arguments 对象。")]),t._v(" "),a("h3",{attrs:{id:"执行上下文的生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文的生命周期"}},[t._v("#")]),t._v(" 执行上下文的生命周期")]),t._v(" "),a("p",[t._v("执行上下文的生命周期包括三个阶段：创建阶段→执行阶段→回收阶段")]),t._v(" "),a("p",[a("strong",[t._v("1.创建阶段")]),t._v("\n当函数被调用，但未执行任何其内部代码之前，会做以下三件事：")]),t._v(" "),a("ol",[a("li",[t._v("创建变量对象：首先初始化函数的参数arguments，提升函数声明和变量声明。")]),t._v(" "),a("li",[t._v("创建作用域链（Scope Chain）：在执行期上下文的创建阶段，作用域链是在变量对象之后创建的。作用域链本身包含变量对象。作用域链用于解析变量。当被要求解析变量时，JavaScript 始终从代码嵌套的最内层开始，如果最内层没有找到变量，就会跳转到上一层父作用域中查找，直到找到该变量。")]),t._v(" "),a("li",[t._v("确定this指向")]),t._v(" "),a("li",[t._v("在一段 JS 脚本执行之前，要先解析代码（所以说 JS 是解释执行的脚本语言），解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来。变量先暂时赋值为undefined，函数则先声明好可使用。这一步做完了，然后再开始正式执行程序。")])]),t._v(" "),a("p",[t._v("另外，一个函数在执行之前，也会创建一个函数执行上下文环境，跟全局上下文差不多，不过 函数执行上下文中会多出this arguments和函数的参数。")]),t._v(" "),a("h2",{attrs:{id:"闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),a("ol",[a("li",[t._v("闭包是指有权访问另一个函数内部变量的函数")]),t._v(" "),a("li",[t._v("当函数可以记住并访问所在的词法作用域，即使函数是在当前词法作用域之外执行，这时就产生了闭包")]),t._v(" "),a("li",[t._v("当在函数内部定义了其他函数时，就创建了闭包。")])]),t._v(" "),a("h3",{attrs:{id:"作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[t._v("#")]),t._v(" 作用")]),t._v(" "),a("ul",[a("li",[t._v("读取函数内部的变量,闭包可形成静态私有变量，即共享的局部私有变量")]),t._v(" "),a("li",[t._v("让这些变量始终保持在内存中，即闭包可以使得它诞生环境一直存在。封装对象的私有属性和私有方法")])]),t._v(" "),a("h3",{attrs:{id:"特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[t._v("#")]),t._v(" 特性")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("闭包内的 this 指向和匿名函数相同都是指向 window，要在外函数借用 this 才能正常获取")])]),t._v(" "),a("li",[a("p",[t._v("闭包内保存的变量不会被垃圾回收机制回收，会一直保存，滥用闭包会造成内存泄露")])])]),t._v(" "),a("h3",{attrs:{id:"闭包在-chrome、引擎的应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包在-chrome、引擎的应用"}},[t._v("#")]),t._v(" 闭包在 chrome、引擎的应用")]),t._v(" "),a("ol",[a("li",[t._v("原始类型放在栈中，引用类型放在堆中，栈中因为要存放当前的执行上下文，空间较小，堆的空间较大")]),t._v(" "),a("li",[t._v("js 引擎会先编译，发现有引用外部变量，就会把这个变量放到堆中名为 closure 的变量当中，放到堆中就能够实现变量的保持，栈中的变量是在执行完后就销毁的")])]),t._v(" "),a("h2",{attrs:{id:"彻底搞懂-this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#彻底搞懂-this"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://coffe1891.gitbook.io/frontend-hard-mode-interview/1/1.2.3",target:"_blank",rel:"noopener noreferrer"}},[t._v("彻底搞懂 this"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是什么"}},[t._v("#")]),t._v(" 是什么")]),t._v(" "),a("p",[t._v("它指向当前代码运行时所处的上下文环境")]),t._v(" "),a("ul",[a("li",[t._v("new 绑定\n"),a("ul",[a("li",[t._v("const a = new A();")])])]),t._v(" "),a("li",[t._v("显式绑定\n"),a("ul",[a("li",[t._v("const b = A.bind(this);")])])]),t._v(" "),a("li",[t._v("隐式绑定\n"),a("ul",[a("li",[t._v("a.foo();")]),t._v(" "),a("li",[t._v("为上下文对象")]),t._v(" "),a("li",[t._v("对象属性引用链中只有最顶层或者说最后一层会影响调用位置")])])]),t._v(" "),a("li",[t._v("默认绑定\n"),a("ul",[a("li",[t._v("在严格模式下绑定为 undefined，否则为 window 对象")])])]),t._v(" "),a("li",[t._v("绑定丢失\n"),a("ul",[a("li",[t._v("当函数重命名后")])])]),t._v(" "),a("li",[t._v("定时器中的 this 为 window，不是函数本身")])]),t._v(" "),a("h3",{attrs:{id:"进阶理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进阶理解"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://zh.javascript.info/reference-type",target:"_blank",rel:"noopener noreferrer"}},[t._v("进阶理解"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("为确保 "),a("code",[t._v("user.hi()")]),t._v(" 调用正常运行，JavaScript 玩了个小把戏 —— 点 "),a("code",[t._v("'.'")]),t._v(" 返回的不是一个函数，而是一个特殊的 "),a("a",{attrs:{href:"https://tc39.github.io/ecma262/#sec-reference-specification-type",target:"_blank",rel:"noopener noreferrer"}},[t._v("Reference Type"),a("OutboundLink")],1),t._v(" 的值。")])]),t._v(" "),a("li",[t._v("任何例如赋值 "),a("code",[t._v("hi = user.hi")]),t._v(" 等其他的操作，都会将 Reference Type 作为一个整体丢弃掉，而会取 "),a("code",[t._v("user.hi")]),t._v("（一个函数）的值并继续传递。所以任何后续操作都“丢失”了 "),a("code",[t._v("this")]),t._v("。")]),t._v(" "),a("li",[t._v("因此，"),a("code",[t._v("this")]),t._v(" 的值仅在函数直接被通过点符号 "),a("code",[t._v("obj.method()")]),t._v(" 或方括号 "),a("code",[t._v("obj['method']()")]),t._v(" 语法（此处它们作用相同）调用时才被正确传递。还有很多种解决这个问题的方式，例如 "),a("a",{attrs:{href:"https://zh.javascript.info/bind#solution-2-bind",target:"_blank",rel:"noopener noreferrer"}},[t._v("func.bind()"),a("OutboundLink")],1),t._v("。")])]),t._v(" "),a("h2",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),a("h3",{attrs:{id:"命名函数表达式-nfe"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命名函数表达式-nfe"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://zh.javascript.info/function-object",target:"_blank",rel:"noopener noreferrer"}},[t._v("命名函数表达式（NFE）"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("Named Function Expression,指带有名字的函数表达式")]),t._v(" "),a("ul",[a("li",[t._v("它(func)允许函数在内部引用自己。")]),t._v(" "),a("li",[t._v("它(func)在函数外是不可见的。")]),t._v(" "),a("li",[t._v("适用于函数递归，更加可靠的内部名称")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("sayHi")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("who")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("who"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("Hello, ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("who"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Guest"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 现在一切正常")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" welcome "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sayHi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsayHi "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("welcome")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Hello, Guest（嵌套调用有效）")]),t._v("\n")])])]),a("h3",{attrs:{id:"new-function-语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new-function-语法"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://zh.javascript.info/new-function",target:"_blank",rel:"noopener noreferrer"}},[t._v('"new Function" 语法'),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("创建函数的语法：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" func "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("arg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("argN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" functionBody"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("使用 "),a("code",[t._v("new Function")]),t._v(" 创建的函数，它的 "),a("code",[t._v("[[Environment]]")]),t._v(" 指向全局词法环境，而不是函数所在的外部词法环境。因此，我们不能在 "),a("code",[t._v("new Function")]),t._v(" 中直接使用外部变量。不过这样是好事，这有助于降低我们代码出错的可能。并且，从代码架构上讲，显式地使用参数传值是一种更好的方法")]),t._v(" "),a("li",[t._v("避免了与使用压缩程序而产生冲突的问题。\n"),a("ul",[a("li",[t._v("如果能访问外部变量，压缩后变量名称修改，会导致Function内的变量找不到，较为安全")])])]),t._v(" "),a("li",[t._v("使用new Function代替eval")])]),t._v(" "),a("h3",{attrs:{id:"惰性载入函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#惰性载入函数"}},[t._v("#")]),t._v(" 惰性载入函数")]),t._v(" "),a("ul",[a("li",[t._v("函数重写")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("createHXR")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xxx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("createXHR")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("createXHR")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ActiveXObject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Microsoft.XMLHTTP'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("声明时指定，利用闭包的特性，可以在函数内部改变外部变量的值，这样就可以实现惰性载入。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" createXHR "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xxx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        xhr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        xhr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ActiveXObject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Microsoft.XMLHTTP'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"箭头函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数"}},[t._v("#")]),t._v(" 箭头函数")]),t._v(" "),a("ul",[a("li",[t._v("箭头函数使用更加常见的词法作用域取消了传统的 this 机制")]),t._v(" "),a("li",[t._v("箭头函数常用于回调函数中，例如事件处理器或者定时器的回调函数\n"),a("ul",[a("li",[t._v("事件处理器的 this 指向事件的触发元素")]),t._v(" "),a("li",[t._v("定时器回调函数的 this 为 window 对象")])])]),t._v(" "),a("li",[t._v("尽量避免使用 var self = this;否定 this 机制")])]),t._v(" "),a("h3",{attrs:{id:"轮询任务中-settimout-和-setinterval-以及-requestanimationframe-使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#轮询任务中-settimout-和-setinterval-以及-requestanimationframe-使用"}},[t._v("#")]),t._v(" 轮询任务中 setTimout 和 setInterval 以及 requestAnimationFrame 使用")]),t._v(" "),a("ul",[a("li",[t._v("使用 "),a("code",[t._v("setInterval")]),t._v(" "),a("ol",[a("li",[t._v("标准中，setInterval ()如果前一次代码没有执行完，则会跳过此次代码的执行。")]),t._v(" "),a("li",[t._v("浏览器中，setInterval()如果前一次代码没有执行完，不会跳过此次代码，而是将其插在队列中，等待前一次代码执行完后立即执行。")]),t._v(" "),a("li",[t._v("Node 中，setInterval()会严格按照间隔时间执行。")]),t._v(" "),a("li",[a("code",[t._v("func")]),t._v(" 函数的实际调用间隔要比代码中设定的时间间隔要短！")])])]),t._v(" "),a("li",[t._v("使用嵌套的 "),a("code",[t._v("setTimeout")]),t._v(" "),a("ul",[a("li",[t._v("就能确保延时的固定（这里是 100 毫秒）。这是因为下一次调用是在前一次调用完成时再调度的。")])])]),t._v(" "),a("li",[t._v("使用 "),a("code",[t._v("requestAnimationFrame")]),t._v(" "),a("ul",[a("li",[t._v("requestAnimationFrame 是一个比 setInterval 更高级的定时器，可以让我们更精确的控制时间间隔，并且可以控制帧率。")]),t._v(" "),a("li",[t._v("一般使用于 css 动画，因为它可以控制帧率，而 setInterval 只能控制时间间隔。\n"),a("ul",[a("li",[t._v("不卡的情况下，一般一秒内调用 60 次")])])])])])]),t._v(" "),a("h3",{attrs:{id:"立即执行函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#立即执行函数"}},[t._v("#")]),t._v(" 立即执行函数")]),t._v(" "),a("p",[t._v("一、是不必为函数命名，避免了污染全局变量")]),t._v(" "),a("p",[t._v("二、是 IIFE 内部形成了一个单独的作用域，可以封装一些外部无法读取的私有变量。")]),t._v(" "),a("h4",{attrs:{id:"作用-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用-2"}},[t._v("#")]),t._v(" 作用")]),t._v(" "),a("p",[t._v("这种方法把一些变量封装在闭包的内部，只暴露一些接口跟外界通信：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("模块化开发，防止污染全局变量（避免使用全局变量）")]),t._v(" "),a("li",[t._v("可以访问函数内部变量并且让它一直保存在内存中")])]),t._v(" "),a("h2",{attrs:{id:"原型和原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型和原型链"}},[t._v("#")]),t._v(" "),a("strong",[t._v("原型和原型链")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("prototype（原型对象）")]),t._v(" "),a("ul",[a("li",[t._v("只有函数对象才有该属性")]),t._v(" "),a("li",[t._v("new 一个函数后生成的对象，会共享函数的 prototype 上的属性和方法，通过改构造函数产生的对象，可以继承该原型的属性和方法")])])]),t._v(" "),a("li",[a("p",[t._v("__proro__")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("proto")]),t._v("属性指向当前对象的原型对象，即构造函数的 prototype 属性")]),t._v(" "),a("li",[t._v("对象或者函数对象都有该属性")]),t._v(" "),a("li",[t._v("原型链\n"),a("ul",[a("li",[t._v("原型也是对象，所以也会有原型，所以会形成原型链，一般原型链的末端是对象的原型为 null//Object.prototype."),a("em",[t._v("proto")]),t._v("===null。空对象的原型为 null，还有 null 和 undefined 也没有原型。")]),t._v(" "),a("li",[t._v("在函数内部查找某个属性和方法时会沿着它的原型链查找，具体是查找它的"),a("em",[t._v("proto")]),t._v("指向的原型对象，默认是指向它的 prototype 即 obj.__proto.__=obj.prototype，如果"),a("em",[t._v("proto")]),t._v("指向被修改，它会去找这个被修改了的对象而不是它的 prototype，")])])])])]),t._v(" "),a("li",[a("p",[t._v("constructor")]),t._v(" "),a("ul",[a("li",[t._v("constructor 是显式原型 prototype 的一个属性 也就是说只能通过 obj.prototype.contructor 来访问,它指向原型的构造函数")]),t._v(" "),a("li",[t._v("如果用一个新对象覆盖函数的 prototype 属性值，新对象没有 constructor 属性，实例不能通过 constructor 指向正确的构造函数。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" person1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nperson1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("获取实例对象 obj 的原型对象，有三种方法。")]),t._v(" "),a("ul",[a("li",[t._v("obj."),a("strong",[t._v("proto")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("proto")]),t._v("属性只有浏览器才需要部署，其他环境可以不部署")])])]),t._v(" "),a("li",[t._v("obj.constructor.prototype\n"),a("ul",[a("li",[t._v("在手动改变原型对象时，可能会失效")])])]),t._v(" "),a("li",[t._v("Object.getPrototypeOf(obj)\n"),a("ul",[a("li",[t._v("推荐使用")])])])])]),t._v(" "),a("li",[a("p",[t._v("a.isPrototypeOf(b)//判断 a 是不是 b 的原型")])]),t._v(" "),a("li",[a("p",[t._v("如果用 delete 删除实例属性，就会沿用原型属性")])])]),t._v(" "),a("p",[t._v("Object, Function, Array 等等这些都被称作是构造“函数”，他们都是函数。而所有的函数都是构造函数 Function 的实例。从原型链机制的的角度来说，那就是说所有的函数都能通过原型链找到创建他们的 Function 构造函数的构造原型 Function.protorype 对象，所以：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Object "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// return true")]),t._v("\n")])])]),a("p",[t._v("与此同时，又因为 Function.prototype 是一个对象，所以他的构造函数是 Object. 从原型链机制的的角度来说，那就是说所有的函数都能通过原型链找到创建他们的 Object 构造函数的构造原型 Object.prototype 对象，所以：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Function "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// return true")]),t._v("\n")])])]),a("p",[t._v("有趣的是根据我们通过原型链机制对 instanceof 进行的分析，我们不难得出一个结论：Function instanceof Function 依然返回 true, 原理是一样的")]),t._v(" "),a("ol",[a("li",[t._v("Function 是构造函数，所以它是函数对象")]),t._v(" "),a("li",[t._v("函数对象都是由 Function 构造函数创建而来的，原型链机制解释为：函数对象的原型链中存在 Function.prototype")]),t._v(" "),a("li",[t._v("instanceof 查找原型链中的每一个节点，如果 Function.prototype 的构造函数 Function 的原型链中被查到，返回 true")])]),t._v(" "),a("p",[t._v("因此下面代码依然返回 true")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Function "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// still true")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://img2018.cnblogs.com/blog/1632878/201905/1632878-20190507094639999-1584111224.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://www.cnblogs.com/Grace-zyy/p/8206002.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("继承"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("要传实例的原因就是因为原型是对象，如果修改了子类的原型那么父类的原型也将随之更改，很危险")]),t._v(" "),a("h3",{attrs:{id:"原型链继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型链继承"}},[t._v("#")]),t._v(" 原型链继承")]),t._v(" "),a("p",[t._v("就是将父类的实例赋值给子类的原型（A.prototype=B=prototype 这样的话原型对象直接复制当然可以，但是我们这里要实现的是继承，子类如果和父类共用一个原型对象，那么子类就无法扩展自己的属性了）")]),t._v(" "),a("p",[t._v("缺点：1、新实例无法向父类构造函数传参。")]),t._v(" "),a("p",[t._v("2、继承单一（这点是因为直接将一个实例赋值给原型，而不能合并多个实例对象）")]),t._v(" "),a("p",[t._v("3、包含引用类型值的原型会被实例（子类）共享。（原型上的属性是共享的，一个实例修改了原型属性，另一个实例的原型属性也会被修改！）")]),t._v(" "),a("h3",{attrs:{id:"构造函数继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数继承"}},[t._v("#")]),t._v(" 构造函数继承")]),t._v(" "),a("p",[t._v("用.call()和.apply()将父类构造函数引入子类函数（在子类函数中做了父类函数的自执行（复制））")]),t._v(" "),a("p",[t._v("缺点 ：方法都在构造函数内部不能函数复用。（应该意思就是没有原型链继承吧）")]),t._v(" "),a("p",[t._v("特点：")]),t._v(" "),a("ol",[a("li",[t._v("解决了 superType 中的私有属性变公有的问题，可以传递参数")]),t._v(" "),a("li",[t._v("没有继承原型")]),t._v(" "),a("li",[t._v("解决原型链继承的缺点")])]),t._v(" "),a("h3",{attrs:{id:"组合继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合继承"}},[t._v("#")]),t._v(" 组合继承")]),t._v(" "),a("p",[t._v("组合原型链继承和借用构造函数继承）（常用）")]),t._v(" "),a("p",[t._v("特点：结合了两种模式的优点，传参和复用")]),t._v(" "),a("p",[t._v("缺点：调用了两次父类的构造函数（耗内存），子类的构造函数会代替原型上的那个父类构造函数。")]),t._v(" "),a("h3",{attrs:{id:"原型式继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型式继承"}},[t._v("#")]),t._v(" 原型式继承")]),t._v(" "),a("p",[t._v("用一个空函数包装一个对象，然后返回这个函数的调用，这个函数就变成了个可以随意增添属性的实例或对象。object.create()就是这个原理。原型式继承本质其实就是个浅拷贝，以一个对象为模板复制出新的对象")]),t._v(" "),a("p",[t._v("特点：类似于复制一个对象，用函数来包装。借助一个空对象来是实现继承的好处是子类可以添加属于自己的方法而不会影响父类")]),t._v(" "),a("p",[t._v("缺点：")]),t._v(" "),a("ol",[a("li",[t._v("所有实例都会继承原型上的属性。")]),t._v(" "),a("li",[t._v("无法实现复用。（新实例属性都是后面添加的）")]),t._v(" "),a("li",[t._v("无法实现多态，多继承")])]),t._v(" "),a("h3",{attrs:{id:"寄生式继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#寄生式继承"}},[t._v("#")]),t._v(" 寄生式继承")]),t._v(" "),a("p",[t._v("就是在原型式继承返回新对象之前在空对象上直接添加新方法，还是那个封装函数")]),t._v(" "),a("h3",{attrs:{id:"寄生组合继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#寄生组合继承"}},[t._v("#")]),t._v(" 寄生组合继承")]),t._v(" "),a("p",[t._v("寄生组合式继承与组合继承的区别就在于寄生的是通过将父类的原型链新对象赋值给子类，而组合继承是将父类的实例赋值给子类 原型链，这样通过实例的方式会将父类的属性也一并赋值给子类，而几声组合继承的父类属性为空，是新建的一个空对象")]),t._v(" "),a("p",[t._v("区别就在于有实例属性和实例属性为空，只是将原型对象赋值过去了")]),t._v(" "),a("p",[t._v("其实寄生组合继承相比较组合继承的有区别就是，坏的就在于父类自己的属性在子类的原型链上，比较混乱，而好的父类的属性在 F 中间对象上，这样就可以比较好的区分子类自己的属性和原型链上的属性。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inherit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("Target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Origin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("F")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("F")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Origin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Target")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("F")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Target")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//把Target的构造函数指向归位")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Target")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("uber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Origin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//为了让我们知道Target真正继承自谁")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("将 F 变为私有变量")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" inhert "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("F")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//闭包，变成私有化变量，在函数外部无法调用")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("Target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Origin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("F")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Origin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Target")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("F")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Target")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//把Target的构造函数指向归位")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Target")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("uber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Origin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//为了让我们知道Target真正继承自谁")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("strong",[t._v("类数组")]),t._v("：只要属性是非负整数，带有 length 属性的对象")]),t._v(" "),a("h2",{attrs:{id:"进制转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进制转换"}},[t._v("#")]),t._v(" 进制转换")]),t._v(" "),a("p",[t._v("将十进制转为多进制，第二个参数指定要转换的进制")]),t._v(" "),a("p",[t._v('(56).toString(); //返回"56"')]),t._v(" "),a("p",[t._v('(5).toString(2);//返回字符串"101"')]),t._v(" "),a("p",[t._v("将多进制转为十进制，第二个参数是这个数本身的进制数")]),t._v(" "),a("p",[t._v("如果基数是 0 返回十进制，如果是不能正确返回的 parseInt('141',3)，141 超出的 3 进制，返回 1")]),t._v(" "),a("ul",[a("li",[t._v('如果字符串 string 以"0x"或者"0X"开头, 则基数是 16 (16 进制).')]),t._v(" "),a("li",[t._v('如果字符串 string 以"0"开头, 基数是 8（八进制）或者 10（十进制），那么具体是哪个基数由实现环境决定。ECMAScript 5 规定使用 10，但是并不是所有的浏览器都遵循这个规定。因此，'),a("strong",[t._v("永远都要明确给出 radix 参数的值")]),t._v("。")]),t._v(" "),a("li",[t._v("如果字符串 string 以其它任何值开头，则基数是 10 (十进制)。")])]),t._v(" "),a("p",[a("strong",[t._v("parseInt")]),t._v("(101,2)//返回 5 parseInt(8,3)//返回 NaN parseInt(16,3)//返回 1 parseInt('dsff66',16)//返回 13")]),t._v(" "),a("p",[t._v("如何利用位操作判断一个整数是不是 2 的整数次方")]),t._v(" "),a("p",[t._v("这道题其实思路很多，但是比较简单的方法我感觉是"),a("strong",[t._v("先把这个数转化为二进制，如果是 2 的整数次方，那么第一位是 1，其余都是 0")]),t._v("。如果满足了这个，那么这个数就是 2 的整数次方")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("2^4=16\n\n2^5=32\n\n2^6=64\n\n2^7=128\n\n2^8=256\n\n2^9=512\n\n2^10=1024\n\n2^11=2048\n\n2^12=4096\n")])])]),a("h2",{attrs:{id:"堆栈的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆栈的区别"}},[t._v("#")]),t._v(" 堆栈的区别")]),t._v(" "),a("ul",[a("li",[t._v("堆栈空间分配区别：\n"),a("ul",[a("li",[t._v("栈（操作系统）：由操作系统自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈；")]),t._v(" "),a("li",[t._v("堆（操作系统）： 一般由程序员分配释放，若程序员不释放，程序结束时可能由 OS 回收，分配方式倒是类似于链表。")])])]),t._v(" "),a("li",[t._v("堆栈缓存方式区别：\n"),a("ul",[a("li",[t._v("栈使用的是一级缓存， 他们通常都是被调用时处于存储空间中，调用完毕立即释放；")]),t._v(" "),a("li",[t._v("堆是存放在二级缓存中，生命周期由虚拟机的垃圾回收算法来决定（并不是一旦成为孤儿对象就能被回收）。所以调用这些对象的速度要相对来得低一些。")])])]),t._v(" "),a("li",[t._v("堆栈数据结构区别：\n"),a("ul",[a("li",[t._v("堆（数据结构）：堆可以被看成是一棵树，如：堆排序；")]),t._v(" "),a("li",[t._v("栈（数据结构）：一种先进后出的数据结构。")])])])]),t._v(" "),a("p",[t._v("还有一个问题是否所有的基本类型都储存在栈中呢？")]),t._v(" "),a("p",[t._v("并不是，当一个基本类型被闭包引用之后，就可以长期存在于内存中，这个时候即使他是基本类型，也是会被存放在堆中的。")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.cxymsg.com/guide/memory.html#%E5%86%85%E5%AD%98%E5%9B%9E%E6%94%B6",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.cxymsg.com/guide/memory.html#%E5%86%85%E5%AD%98%E5%9B%9E%E6%94%B6"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("https://www.jianshu.com/p/b8ed21e8a4fb")])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"垃圾回收和定时器回调"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收和定时器回调"}},[t._v("#")]),t._v(" 垃圾回收和定时器回调")]),t._v(" "),a("p",[t._v("当一个函数传入 "),a("code",[t._v("setInterval/setTimeout")]),t._v(" 时，将为其创建一个内部引用，并保存在调度程序中。这样，即使这个函数没有其他引用，也能防止垃圾回收器（GC）将其回收。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在调度程序调用这个函数之前，这个函数将一直存在于内存中")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("对于 "),a("code",[t._v("setInterval")]),t._v("，传入的函数也是一直存在于内存中，直到 "),a("code",[t._v("clearInterval")]),t._v(" 被调用。")]),t._v(" "),a("p",[t._v("如果函数引用了外部变量（译注：闭包），那么只要这个函数还存在，外部变量也会随之存在。它们可能比函数本身占用更多的内存。因此，当我们不再需要调度函数时，最好取消它，即使这是个（占用内存）很小的函数。")]),t._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[t._v("setInterVal 是精准的时间间隔")]),t._v(" "),a("li",[t._v("setTimeout 是每次在回调执行完后再调度的")]),t._v(" "),a("li",[t._v("定时器的函数会一直保持在内存不释放外部引用的闭包变量，尽量用 clear 取消掉可以取消函数的内存占用")]),t._v(" "),a("li",[t._v("一般认为的最佳方案是："),a("strong",[t._v("用 setTimeout 模拟 setInterval，或者特殊场合直接用 requestAnimationFrame")])]),t._v(" "),a("li",[t._v("JS 高程中有提到，JS 引擎会对 setInterval 进行优化，如果当前事件队列中有 setInterval 的回调，不会重复添加。不过，仍然是有很多问题")])]),t._v(" "),a("h2",{attrs:{id:"array-sort-的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-sort-的理解"}},[t._v("#")]),t._v(" Array.sort()的理解")]),t._v(" "),a("p",[t._v("原题目：")]),t._v(" "),a("ul",[a("li",[t._v("使用 sort() 对数组 [3, 15, 8, 29, 102, 22] 进行排序，输出结果")])]),t._v(" "),a("p",[t._v("我的答案：")]),t._v(" "),a("ul",[a("li",[t._v("[102, 15, 22, 29, 3, 8]")])]),t._v(" "),a("p",[t._v("解析：")]),t._v(" "),a("p",[t._v("根据MDN上对Array.sort()的解释，默认的排序方法会将数组元素转换为字符串，然后比较字符串中字符的UTF-16编码顺序来进行排序。所以'102' 会排在 '15' 前面。以下是MDN中的解释原文：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("返回值大于0 即a-b > 0 ， a 和 b 交换位置\n返回值大于0 即a-b < 0 ， a 和 b 位置不变\n返回值等于0 即a-b = 0 ， a 和 b 位置不变\n")])])]),a("h2",{attrs:{id:"slice-substring-substr的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#slice-substring-substr的区别"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://blog.csdn.net/qq_44352182/article/details/89889778",target:"_blank",rel:"noopener noreferrer"}},[t._v("slice\\substring\\substr的区别"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("substr和substring都只是string的方法，slice都可，splice只能操作数组")]),t._v(" "),a("ul",[a("li",[t._v("substring，若start>stop，则会交换两者，若任一方为负数，则先变为0")]),t._v(" "),a("li",[t._v("substr(start,length),如果start为负数，那么start=str.length+start，如果length为负数或者0，那么返回空字符串")]),t._v(" "),a("li",[t._v("slice，如果 start或者stop为负数，那么负数的选项从数组尾部开始算起的位置，最后一个数字为-1，")])]),t._v(" "),a("h3",{attrs:{id:"区别数组的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别数组的方法"}},[t._v("#")]),t._v(" 区别数组的方法")]),t._v(" "),a("ul",[a("li",[t._v("constructor alert(arr.constructor === Array); // true")]),t._v(" "),a("li",[t._v("object.prototype.toString.call")]),t._v(" "),a("li",[t._v("instanceOf 例如 alert(arr instanceof Array); // true")]),t._v(" "),a("li",[t._v("Array.isArray()")])]),t._v(" "),a("p",[t._v("instanceOf 缺陷，因为 instanceOf 是沿着原型链查找，所以[] instanceOf Object//true")])])}),[],!1,null,null,null);s.default=r.exports}}]);