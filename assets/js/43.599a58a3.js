(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{458:function(t,e,s){"use strict";s.r(e);var a=s(22),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" git")]),t._v(" "),s("p",[t._v("基本命令："),s("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("常用 git 命令清单"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[t._v("#")]),t._v(" "),s("strong",[t._v("分支")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -a               查看所有分支\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote show origin       可以展示远程的信息\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote prune origin   删除远程所有已经删除的分支，但是本地没有更新远程的分支\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -D gh-pages 删除分支（不管它有没有merge）\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch --prune       删除远程所有已经删除但是本地没有依然有的分支\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -D "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branchname"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  删除本地没有被合并的分支\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程主机名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("本地分支名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("          推送本地test分支到远程，远程没有就新建\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push --all origin        将所有本地分支都推送到origin主机。\nGit branch -m oldbranchname newbranchname  本地分支重命名\n")])])]),s("h3",{attrs:{id:"git-修改本地或远程分支名称"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-修改本地或远程分支名称"}},[t._v("#")]),t._v(" Git 修改本地或远程分支名称")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -m oldBranch newBranch  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#将本地分支重命名")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push --delete origin oldBranch  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#删除远程分支（远端无此分支则跳过该步骤）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin newBranch  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#将重命名后的分支推到远端")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --set-upstream-to origin/newBranch "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#把修改后的本地分支与远程分支关联")]),t._v("\n")])])]),s("h3",{attrs:{id:"master-分支自动创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#master-分支自动创建"}},[t._v("#")]),t._v(" master 分支自动创建")]),t._v(" "),s("p",[t._v("因为 git 的分支必须指向一个 commit，没有任何 commit 就没有任何分支")]),t._v(" "),s("p",[t._v("提交第一个 commit 后，例如在空仓库里添加一个 README 文件，git 则回自动创建 master 分支")]),t._v(" "),s("h2",{attrs:{id:"merge"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#merge"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://backlog.com/git-tutorial/cn/stepup/stepup1_4.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("merge"),s("OutboundLink")],1)]),t._v(" "),s("ul",[s("li",[s("p",[t._v("fast-forward（快进）合并")]),t._v(" "),s("ul",[s("li",[t._v("没有冲突，直接移动 HEAD 到最新的 commit")]),t._v(" "),s("li",[t._v("如果执行了 Fast Forward，开发者根本不会看到这个分支，就像在 master 直接 commit 一样。")]),t._v(" "),s("li",[t._v("一旦删除分支或者分支指针往前走，很难体现该处提交是合并自某个分支的。")])])]),t._v(" "),s("li",[s("p",[t._v("non fast-forward")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("在 merge 分支上有其他分支的最新提交并与自己的提交有冲突，会产生 non fast-forward 合并，会多出一个 commit")])]),t._v(" "),s("li",[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge --no-ff -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commit描述"')]),t._v(" 要合并的分支名\n")])])])])])])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://segmentfault.com/img/bV9qte?w=1008&h=836",alt:"img"}}),t._v(" "),s("p",[t._v("Merge 和 rebase 都是合并历史记录，但是各自的特征不同。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("merge")]),t._v("\n保持修改内容的历史记录，但是历史记录会很复杂。")]),t._v(" "),s("li",[s("strong",[t._v("rebase")]),t._v("\n历史记录简单，是在原有提交的基础上将差异内容反映进去。\n因此，可能导致原本的提交内容无法正常运行。")])]),t._v(" "),s("p",[t._v("您可以根据开发团队的需要分别使用 merge 和 rebase。\n例如，想简化历史记录，")]),t._v(" "),s("ul",[s("li",[t._v("在 topic 分支中更新 merge 分支的最新代码，请使用 rebase。")]),t._v(" "),s("li",[t._v("向 merge 分支导入 topic 分支的话，先使用 rebase，再使用 merge。")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.jianshu.com/p/58a166f24c81",target:"_blank",rel:"noopener noreferrer"}},[t._v("git-merge 完全解析"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"撤销更改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#撤销更改"}},[t._v("#")]),t._v(" "),s("strong",[t._v("撤销更改")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2021/01/09/TfbZnAsQI5majG9.png",alt:"image-20210109103451980"}})]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard HEAD^^       --回到前两次提交\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commitid"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  回到commitId所属次数的提交状态\n")])])]),s("p",[t._v("git reset --hard HEAD^^ --回到前两次提交\ngit reset --hard <commitid> 回到 commitId 所属次数的提交状态")]),t._v(" "),s("p",[t._v("如果我们使用了 git reset --hard <commitID> 不小心撤掉了一次重要的修改，也是可以补救回来的\n我们通过 git flog 命令找到对应 commit 记录的 commit，然后再执行 git reset --hard <commitID>就可以恢复到我们指定那一次提交的状态中")]),t._v(" "),s("h2",{attrs:{id:"revert"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#revert"}},[t._v("#")]),t._v(" revert")]),t._v(" "),s("p",[t._v("git revert <commitID> 撤消指定 commit，作为一个新的 commit。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2021/01/09/wgPDu4iGK5BYsTo.png",alt:"image-20210109103515706"}})]),t._v(" "),s("p",[t._v("如果你已经 push 到线上代码库, reset 删除指定 commit 以后,你 git push 可能导致一大堆冲突.需要用 git push -f 才能 push 上去，但是这种做法有风险，如果我们用 git revert 并不会有任何冲突，所以相对来说一般用 git revert 来撤销已经的 push 操作")]),t._v(" "),s("h2",{attrs:{id:"重写历史-amend"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重写历史-amend"}},[t._v("#")]),t._v(" "),s("strong",[t._v("重写历史 --amend")])]),t._v(" "),s("p",[t._v("--amend 选项可以让当前提交合并到上一次提交中作为一次提交")]),t._v(" "),s("p",[t._v("git commit --amend 最终你只会有一个提交 - 第二次提交将代替第一次提交的结果。将最后一次的提交信息载入到编辑器中供你修改。 当保存并关闭编辑器后，编辑器会将更新后的提交信息写入新提交中，它会成为新的最后一次提交。")]),t._v(" "),s("p",[t._v("git commit --amend -m ’xxx‘ 修改上次提交的信息")]),t._v(" "),s("p",[t._v("git commit --amend --no-edit 跳过修改提交信息环节")]),t._v(" "),s("p",[t._v("vscdoe 自带的 git 工具也有相关简单操作，知道对应操作后不难理解")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2021/01/09/QJpr5LRkgv6sUmw.png",alt:"image-20210109103557081"}})]),t._v(" "),s("h2",{attrs:{id:"cherrypick"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cherrypick"}},[t._v("#")]),t._v(" cherryPick")]),t._v(" "),s("p",[t._v("我们可能会有这样一个使用场景，在分支 branch-a 需要分支 branch-b 的某次提交，这个时候我们就可以先找到 branch-b 的那次提交记录的 id，然后在 branch-a 分支进行 git cherry-pick b-commit-id 将 branch-b 分支的提交记录拿过来了")]),t._v(" "),s("p",[t._v("比如在功能性迭代开发中发现一个 bug，并提交了一个 commit 进行修复，但是发现该 bug 也存在线上的发布版本上，必须要尽快对线上进行修复，此时可以使用 git cherry-pick 将 bug 修复的 commit 嫁接到 fix 分支上进行代码修复，并及时发布，解决线上 bug。")]),t._v(" "),s("p",[t._v("git cherry-pick <commit-id> 将指定 commit 添加到当前分支")]),t._v(" "),s("p",[t._v("git cherry-pick -x <commit_id> 增加 -x 参数，表示保留原提交的作者信息进行提交。")]),t._v(" "),s("p",[t._v("git cherry_pick <start-commit-id>…<end-commit-id> 它的范围就是 start-commit-id 到 end-commit-id 之间所有的 commit，但是它这是一个 (左开，右闭] 的区间，也就是说，它将不会包含 start-commit-id 的 commit。")]),t._v(" "),s("p",[t._v("git cherry-pick <start-commit-id>^...<end-commit-id> 包含 start-commit-id 的话，就需要使用 ^ 标记一下，就会变成一个 [左闭，右闭] 的区间，具体命令如下")]),t._v(" "),s("h3",{attrs:{id:"从其他代码库-cherry-pick-commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从其他代码库-cherry-pick-commit"}},[t._v("#")]),t._v(" 从其他代码库 cherry-pick commit")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git remote add endel git://github.com/endel/rest-client.git\n\ngit fetch endel want-cherry-pick-branch\n\ngit log endel/want-cherry-pick-branch\n\ngit cherry-pick 97fedac\n")])])]),s("h2",{attrs:{id:"rebase-变基"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rebase-变基"}},[t._v("#")]),t._v(" "),s("strong",[t._v("rebase 变基")])]),t._v(" "),s("p",[t._v("你可以使用 rebase 变基命令将提交到某一分支上的所有修改都移至另一分支上，就好像“重新播放”一样。")]),t._v(" "),s("p",[t._v("效果和 git merge 命令相比类似，但是各有不同的用处")]),t._v(" "),s("ul",[s("li",[t._v("rebase 操作可以把本地未 push 的分叉提交历史整理成直线；")]),t._v(" "),s("li",[t._v("rebase 的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。")])]),t._v(" "),s("p",[s("strong",[t._v("使用原则")]),t._v("：一般我们这样做的目的是为了确保在向远程分支推送时能保持提交历史的整洁")]),t._v(" "),s("p",[t._v("所以，原则是只对尚未推送或分享给别人的"),s("strong",[t._v("本地修改")]),t._v("执行变基操作清理历史， 从不对已推送至别处的提交执行变基操作")]),t._v(" "),s("p",[s("strong",[t._v("使用场景")]),t._v("：比如当我们向他人维护的开源项目提交修改时，肯定要先在自己的分支中进行开发，然后再提交，但如果我们变基后再提交，维护人员就不用进行整合工作了，直接快速合并即可。")]),t._v(" "),s("p",[s("strong",[t._v("git rebase 原理")]),t._v(" ：其实是先将 HEAD 指向目标分支和当前分支的共同祖先 commit 节点，然后将当前分支上的 commit 一个一个的 cherryPick 到目标分支上，cherryPick 完以后再将 HEAD 指向当前分支。")]),t._v(" "),s("p",[t._v("具体使用方法可以看"),s("a",{attrs:{href:"https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA",target:"_blank",rel:"noopener noreferrer"}},[t._v("gitBook 变基"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("strong",[t._v("使用：")])]),t._v(" "),s("p",[s("code",[t._v("git rebase \\<basebranch> \\<topicbranch>")]),t._v(" 将主题分支变基到目标分支上，即把 topicbranch 放到 basebranch 后面提交")]),t._v(" "),s("p",[s("code",[t._v("git rebase --onto master server client")]),t._v("取出 client 分支，找出 server 分支之后的分歧的补丁， 然后把它们在 master 分支上重放一遍")]),t._v(" "),s("p",[t._v('在 rebase 的过程中，也许会出现冲突(conflict). 在这种情况，Git 会停止 rebase 并会让你去解决 冲突；在解决完冲突后，用"git-add"命令去更新这些内容的索引(index), 然后，你无需执行 git-commit,只要执行:')]),t._v(" "),s("p",[s("code",[t._v("git rebase --continue")]),t._v(" 这样 git 会继续应用(apply)余下的补丁。")]),t._v(" "),s("p",[t._v('在任何时候，你可以用 git rebase --abort 来终止 rebase 的行动，并且"mywork" 分支会回到 rebase 开始前的状态。')]),t._v(" "),s("p",[t._v("git pull = git fetch + git merge")]),t._v(" "),s("p",[t._v("git pull --rebase = git fetch + git rebase")]),t._v(" "),s("p",[t._v("当一个分支下有多人协作，那么就算在同时开发由于不同的人会在同一个分支下产生多个提交记录，那么如果这时候你 push 会报错，当提示你再 pull 代码的时候就会自动合并产生一次 merge 提交，如果我们用 git pull --rebase 就可以将直接提交，并且分支是只有一条线的，但是这时如果有冲突的话 rebase 会暂停等你解决冲突")]),t._v(" "),s("h2",{attrs:{id:"交互式变基"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#交互式变基"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://blog.csdn.net/zwlove5280/article/details/46649799",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("交互式变基")]),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("rebase 除了可以把本地未 push 的分叉提交历史整理成直线，")]),t._v(" "),s("p",[t._v("还有一个功能就是使用交互式变基-i 参数来灵活地修改整理 commit 历史，如 commit 的合并、顺序调整、任意一次或批量的 commit 提交信息修改都可使用交互式变基实现")]),t._v(" "),s("p",[t._v("语法："),s("code",[t._v("git rebase -i [startpoint] [endpoint]")])]),t._v(" "),s("p",[t._v("git rebase -i HEAD~4 省略 endpoint，意思是修改从最近一次提交开始的 4 次提交记录")]),t._v(" "),s("p",[t._v("执行命令后会弹出一个文本文件如下，我们进行相应修改后，关闭文本框，命令行就会继续操作")]),t._v(" "),s("p",[t._v("常用的几个标识命令")]),t._v(" "),s("ul",[s("li",[t._v("pick 就是表示该提交对象正在使用，普通提交默认就是 pick")]),t._v(" "),s("li",[t._v("reword 就是在提交的同时你可以编辑 commit message，它会在执行的时候弹出一个文本让你编辑信息，当你退出的时候，会继续执行命令")]),t._v(" "),s("li",[t._v("edit 可以编辑指定提交的文件 *，*也会应用此提交，但是会在应用时停止，提示用户使用 "),s("em",[t._v("git commit --amend")]),t._v(" 执行提交，以便对提交进行修补。 当用户执行 "),s("em",[t._v("git commit --amend")]),t._v(" 完成提交后，还需要执行 "),s("em",[t._v("git rebase --continue")]),t._v(" 继续变基操作。Git 会对用户进行相应的提示。 实际上用户在变基暂停状态执行修补提交可以执行多次，相当于把一个提交分解为多个提交。而且 "),s("em",[t._v("edit")]),t._v(" 动作也可以实现 "),s("em",[t._v("reword")]),t._v(" 的动作，因此对于老版本的 Git 没有 "),s("em",[t._v("reword")]),t._v(" 可用，则可以使用此动作。")]),t._v(" "),s("li",[t._v("squash，合并此条记录到前一个记录中，并且会弹出一个文本，上面有两次提交的 message，需要手动修改为合并后的 message，如果连续修改几个记录为 squash，那么会产生叠加合并，可以同时合并几个 commit")]),t._v(" "),s("li",[t._v("fixup ，合并此条记录到前一个记录中，但是直接忽略此条 commit message，最终显示前一个记录的 message，连续修改同样也可以同时合并几个 commit 并且取早的一次提交 message")]),t._v(" "),s("li",[t._v("通过删除指定行来直接删除指定提交")]),t._v(" "),s("li",[t._v("通过交换行的顺序实现 commit 顺序的调整")])]),t._v(" "),s("p",[t._v("合并的过程中如果遇到冲突，解决后需要 git add ，然后 git rebase --continue，如果想中止，使用 git rebase --abort。")]),t._v(" "),s("p",[t._v("改为 reword 后弹出文本框如下有指定提交的 commit message，我们修改再保存")]),t._v(" "),s("p",[t._v("改为 quash 后文本显示两次的提交信息，我们修改保存本次的提交信息")]),t._v(" "),s("h2",{attrs:{id:"patch-补丁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#patch-补丁"}},[t._v("#")]),t._v(" "),s("strong",[t._v("patch 补丁")])]),t._v(" "),s("p",[t._v("patch 补丁即为根据 git diff 生成的文本内容文件，最简单的生成方法为 git diff > test.patch")]),t._v(" "),s("p",[t._v("生成 patch 文件后，在项目下使用 git apply test.patch，会根据 patch 文件内的信息，在现有文件中添加或删除内容")]),t._v(" "),s("p",[t._v("使用场景：假如发现某个项目有 bug，而自己又没有 git 的提交权限，那么此时最合适的解决方法就是用 diff 命令做一个补丁发给项目成员。项目成员通过 patch 命令可以立刻知道你的意图。")]),t._v(" "),s("p",[s("code",[t._v("git patch formate-patch -s <start-commit> <end-commit>")]),t._v("可以批量生成 patch 文件,-s 参数代表生成自己的 GPG 签名信息")]),t._v(" "),s("h2",{attrs:{id:"submodule"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#submodule"}},[t._v("#")]),t._v(" "),s("strong",[t._v("submodule")])]),t._v(" "),s("p",[t._v("含有子仓库的父仓库在 clone 时，子仓库目录为空，在 clone 时下载包括子仓库的内容")]),t._v(" "),s("p",[s("code",[t._v("git clone --recursive submodules url")]),t._v(" "),s("strong",[t._v("如果 clone 时忘记用上面的--recurse-submodules 命令了可以再使用 一下命令将仓库中的子仓库 clone 下来")])]),t._v(" "),s("p",[s("code",[t._v("git submodule update --init --recursive")])]),t._v(" "),s("p",[t._v("注意：此处拉的是父仓库记录的每个子仓库的某个 commit，而不是最新的子仓库 commit，如下图所示记录的子仓库的的 commitID, 如果需要拉到最新的远程仓库的一次 commit，需要用到**–-remote 参数**")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("git submodule update --init --recursive --remote")]),t._v(" 按照远程最新 commit 初始化子仓库")]),t._v(" "),s("li",[s("code",[t._v("git submodule update --recursive --remote")]),t._v(" 更新本地仓库，与远程仓库同步")])]),t._v(" "),s("p",[s("strong",[t._v("添加子仓库")])]),t._v(" "),s("p",[s("code",[t._v("git submodule add https://github.com/chaconinc/DbConnector path")]),t._v(" 子模块会将子项目放到一个与仓库同名的目录中，本例中是 “DbConnector”")]),t._v(" "),s("p",[s("strong",[t._v("远程数据更新 所有 子模块")]),t._v(" "),s("code",[t._v("git submodule update --remote")])]),t._v(" "),s("p",[s("strong",[t._v("foreach 子模块命令，它能在每一个子模块中运行任意命令")]),t._v(" "),s("code",[t._v("git submodule foreach 'git stash'")]),t._v(" "),s("code",[t._v("git submodule foreach 'git checkout -b featureA'")])]),t._v(" "),s("p",[s("strong",[t._v("删除 submodule")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("1. 在“.gitmodules”文件中删除相应配置信息。\n2. 执行“git rm –cached ”命令将子模块所在的文件从git中删除。\n")])])]),s("p",[s("strong",[t._v("修改 submodule 的 url 和分支")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("1. 修改.gitmodules文件的对应url和branch\n2. 执行git submodule sync ，该命令是为了让将新的URL更新到文件`.git/config`；\n3. 执行git submodule update --force --recursive --init --remote。该命令会抓取修改过的最新的shared仓库并初始化。\n")])])]),s("p",[s("strong",[t._v("合并 submodule 作为仓库代码")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" submodule update --init\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 先备份仓库文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" src/shared ./\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 卸载子仓库")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" submodule deinit src/shared\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除git submodule缓存")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" --cached src/shared\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 再把文件移回正确位置")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" shared/* src/shared\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除备份")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -rf shared\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'feat: 合并shared'")]),t._v("\n")])])]),s("h2",{attrs:{id:"tag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tag"}},[t._v("#")]),t._v(" "),s("strong",[t._v("tag")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -a v1.0.0 -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"内容：v1.0.0"')]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#创建标签")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tagname"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("               "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#轻量标签")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag                         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#列出所有tag")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin v1.0.0           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#推送标签")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -d v1.0.0                 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#删除本地")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin :refs/tags/v1.0.0     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#删除远程的")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag                        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#显示所有的tag")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -l "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'v1.0.*'")]),t._v("                 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看某个版本系列的tag")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" show v0.0.6                 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看标签的详情，可以看到你commit的内容")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin --tags  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#把所有不在远程仓库服务器上的标签全部传送到那里。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout branchName tagName  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#从tag且切分支")]),t._v("\n")])])]),s("h2",{attrs:{id:"default-config"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#default-config"}},[t._v("#")]),t._v(" default.config")]),t._v(" "),s("p",[t._v("当我们用 git branch -m oldBranch newBranch 修改当前分支的名字，我们再 push 时会出现以下提示")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2021/01/09/YKUArWSjR4BQ5qO.png",alt:"image-20210109104053375"}})]),t._v(" "),s("p",[t._v("我们可以配置 push.default")]),t._v(" "),s("p",[t._v("The "),s("strong",[t._v("current")]),t._v(" in this setup means that by default you will "),s("strong",[t._v("only push the current branch")]),t._v(" when you do "),s("strong",[t._v("git push")])]),t._v(" "),s("p",[t._v("Other options are:")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("nothing : Do not push anything")])]),t._v(" "),s("li",[s("p",[t._v("matching : Push all matching branches (default)")])]),t._v(" "),s("li",[s("p",[t._v("tracking : Push the current branch to whatever it is tracking")])]),t._v(" "),s("li",[s("p",[t._v("current : Push the current branch")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("simple")]),t._v(": (new in Git 1.7.11) like upstream, but refuses to push if the upstream branch's name is different from the local one")]),t._v(" "),s("p",[t._v("This is the safest option and is well-suited for beginners.")]),t._v(" "),s("p",[t._v("This mode has become the default in Git 2.0.")])])]),t._v(" "),s("p",[t._v("查看当前的 push.default 配置:")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global push.default\n")])])]),s("p",[t._v("修改配置:")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global push.default curr\n")])])]),s("h2",{attrs:{id:"修改远程仓库地址并推代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改远程仓库地址并推代码"}},[t._v("#")]),t._v(" "),s("strong",[t._v("修改远程仓库地址并推代码")])]),t._v(" "),s("p",[t._v("查看远程仓库的 url")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote -v\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" origin  git@github.com:USERNAME/REPOSITORY.git "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" origin  git@github.com:USERNAME/REPOSITORY.git "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("push"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("使用 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote set-url 命令将远程的 URL 从 SSH 更改为 HTTPS。\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote set-url origin https://github.com/USERNAME/REPOSITORY.git\n")])])]),s("h2",{attrs:{id:"配置别名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置别名"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://juejin.cn/post/6844903976245133326#heading-1",target:"_blank",rel:"noopener noreferrer"}},[t._v("配置别名"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("别名配置保存在 ~/.gitconfig 文件")]),t._v(" "),s("p",[t._v("git config --global alias.rc 'rebase --continue'")]),t._v(" "),s("h2",{attrs:{id:"node常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node常用命令"}},[t._v("#")]),t._v(" node常用命令")]),t._v(" "),s("ul",[s("li",[t._v("获取最近的commit-id: "),s("code",[t._v("git rev-parse --short HEAD")])]),t._v(" "),s("li",[t._v("获取最近的commit-message: "),s("code",[t._v("git log -1 --pretty=%B")])])]),t._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://git-scm.com/book/zh/v2/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GIT-BOOK"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://juejin.im/post/5925a2d9a22b9d0058b0fd9b#heading-3",target:"_blank",rel:"noopener noreferrer"}},[t._v("cherry-pick"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://juejin.im/post/5a7a5860f265da4e8409175c",target:"_blank",rel:"noopener noreferrer"}},[t._v("patch 的妙用"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/mengff/p/11608864.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("git rebase 使用场景"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/42929114",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 误操作救命篇一： 如何将改动撤销？"),s("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=r.exports}}]);