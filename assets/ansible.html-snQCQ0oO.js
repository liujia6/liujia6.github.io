import{_ as s,c as n,o as a,a as e}from"./app-B_HqqEoK.js";const t={},l=e(`<h1 id="ansible" tabindex="-1"><a class="header-anchor" href="#ansible"><span>ansible</span></a></h1><h2 id="ansible-到底解决了什么问题" tabindex="-1"><a class="header-anchor" href="#ansible-到底解决了什么问题"><span>Ansible 到底解决了什么问题？</span></a></h2><p>使用 ansible 可以实现多个对主机执行自动化任务操作，使用 yml 配置文件</p><ul><li>自动化：避免运维工作中重复的工作，以及人的不确定性问题</li><li>模块化：手工写 shell，甚至手工写 python，要做到模块化和标准化，太困难了。Ansible 将大部分运维工作都抽象并标准化成一个个模块（module）。</li><li>标准化：所有的模块的使用方式都是一样的，减少学习成本</li><li>幂等的. 采用声明式的描述方式，无论被执行了多少次结果都应该是我们所声明的。</li></ul><h2 id="ansible-提供两种方式去完成任务" tabindex="-1"><a class="header-anchor" href="#ansible-提供两种方式去完成任务"><span>Ansible 提供两种方式去完成任务</span></a></h2><ol><li>ad-hoc 命令，如果我们敲入一些命令去比较快的完成一些事情,而不需要将这些执行的命令特别保存下来, 这样的命令就叫做 ad-hoc 命令. -&gt;<a href="http://einverne.github.io/post/2020/05/ansible-introduction.html#module" target="_blank" rel="noopener noreferrer">参考链接</a></li><li>写 Ansible playbook.</li></ol><p>前者可以解决一些简单的任务, 后者解决较复杂的任务.</p><h2 id="host-文件" tabindex="-1"><a class="header-anchor" href="#host-文件"><span>host 文件</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">[\${branch}]</span>
<span class="line">\${hostIp} ansible_connection=ssh ansible_ssh_user=\${user} ansible_ssh_pass=\${pass}</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>参数</li></ul><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line">ansible_ssh_host  <span class="token comment">#将要连接的远程主机名.与你想要设定的主机的别名不同的话,可通过此变量设置.</span></span>
<span class="line">ansible_ssh_port  <span class="token comment">#ssh端口号.如果不是默认的端口号,通过此变量设置.</span></span>
<span class="line">ansible_ssh_user  <span class="token comment">#默认的 ssh 用户名</span></span>
<span class="line">ansible_ssh_pass   <span class="token comment">#ssh 密码(这种方式并不安全,我们强烈建议使用 --ask-pass 或 SSH 密钥)</span></span>
<span class="line">ansible_sudo_pass  <span class="token comment"># sudo 密码(这种方式并不安全,我们强烈建议使用 --ask-sudo-pass)</span></span>
<span class="line">ansible_sudo_exe (new in version 1.8) <span class="token comment">#sudo 命令路径(适用于1.8及以上版本)</span></span>
<span class="line">ansible_connection <span class="token comment"># 与主机的连接类型.比如:local, ssh 或者 paramiko. Ansible 1.2 以前默认使用 paramiko.1.2 以后默认使用 &#39;smart&#39;,&#39;smart&#39; 方式会根据是否支持 ControlPersist, 来判断&#39;ssh&#39; 方式是否可行.</span></span>
<span class="line">ansible_ssh_private_key_file  <span class="token comment">#ssh 使用的私钥文件.适用于有多个密钥,而你不想使用 SSH 代理的情况.</span></span>
<span class="line">ansible_shell_type <span class="token comment">#目标系统的shell类型.默认情况下,命令的执行使用 &#39;sh&#39; 语法,可设置为 &#39;csh&#39; 或 &#39;fish&#39;.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编写-playbook" tabindex="-1"><a class="header-anchor" href="#编写-playbook"><span>编写 Playbook</span></a></h2><p>运维管理就是一场表演，入口文件就是导演，它规定了演员是谁、出演什么角色、到哪表演；任务列表就是角色的剧本，每一条任务就是一句台词。</p><ul><li>导演的职责：编写入口文件的内容</li><li>角色的职责：playbook 的具体操作逻辑都是由角色来实现的，在规范中对于角色目录下的内容都有明确定义，最常见的就是 files、tasks、templates、vars 四个文件夹，其中 tasks 就是存放剧本的位置，其他文件夹都是表演中使用的道具。</li></ul><p>术语解释</p><ul><li>Hosts 执行的远程主机列表</li><li>files： 存放文件，这里的文件不经过任何变化直接复制到被控主机。通常 files 目录用来存放程序的安装包文件，由 copy 模块操作。</li><li>tasks：yml 格式定义任务列表，playbook 执行后会按入口文件定义的顺序依次执行角色文件夹内 main.yml 文件。</li><li>templates：文件夹内存放模板文件，模板文件以 JinJa2 格式编写的，执行时会将相应变量替换成真正内容后，再复制到被控主机。通常 templates 目录用来存放软件的配置文件、辅助文件，对需要动态调整的内容以参数替换形成模板，由 template 模块操作。</li><li>vars：文件夹内存放以 yml 格式定义参数文件，playbook 查找参数时会默认搜索 vars 目录下 main.yml 文件。</li><li>Handlers 和 notity 结合使用: 作为触发条件</li><li>tags 标签，指定某条任务执行，用于选择运行 playbook 中的部分代码。</li></ul><p>roles 标准目录</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line">├── defaults</span>
<span class="line">│   └── main.yml</span>
<span class="line">├── files</span>
<span class="line">│   └── nginx.tar.gz</span>
<span class="line">├── handlers  <span class="token comment"># 被动触发的任务</span></span>
<span class="line">│   └── main.yml</span>
<span class="line">├── tasks     <span class="token comment"># 被动的执行任务</span></span>
<span class="line">│   ├── config.yml</span>
<span class="line">│   └── main.yml</span>
<span class="line">└── templates   <span class="token comment"># 存放不同的配置文件</span></span>
<span class="line">    └── nginx.conf</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options"><span>options</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">// 参数-e传入变量，这样传入的变量在整个playbook中都可以被调用，属于全局变量</span>
<span class="line">ansible-playbook ansible.yaml -e &quot;HOST=\${HOST}&quot; -i ./hosts</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>playbook命令的详细语法如下：
    ansible-playbook [options] playbook.yml [playbook2 ...]
    -u REMOTE_USER, --user=REMOTE_USER ＃ ssh 连接的用户名
    -k, --ask-pass ＃ssh登录认证密码
    -s, --sudo ＃sudo 到root用户，相当于Linux系统下的sudo命令
    -U SUDO_USER, --sudo-user=SUDO_USER ＃sudo 到对应的用户
    -K, --ask-sudo-pass ＃用户的密码（—sudo时使用）
    -T TIMEOUT, --timeout=TIMEOUT ＃ ssh 连接超时，默认 10 秒
    -C, --check ＃ 指定该参数后，执行 playbook 文件不会真正去执行，而是模拟执行一遍，然后输出本次执行会对远程主机造成的修改
    -e EXTRA_VARS, --extra-vars=EXTRA_VARS ＃ 设置额外的变量如：key=value 形式 或者 YAML or JSON，以空格分隔变量，或用多个-e -f FORKS, --forks=FORKS ＃ 进程并发处理，默认 5
    -i INVENTORY, --inventory-file=INVENTORY ＃ 指定 hosts 文件路径，默认 default=/etc/ansible/hosts
    -l SUBSET, --limit=SUBSET ＃ 指定一个 pattern，对- hosts:匹配到的主机再过滤一次 --list-hosts ＃ 只打印有哪些主机会执行这个 playbook 文件，不是实际执行该 playbook --list-tasks ＃ 列出该 playbook 中会被执行的 task --private-key=PRIVATE_KEY_FILE ＃ 私钥路径 --step ＃ 同一时间只执行一个 task，每个 task 执行前都会提示确认一遍 --syntax-check ＃ 只检测 playbook 文件语法是否有问题，不会执行该 playbook
    -t TAGS, --tags=TAGS ＃当 play 和 task 的 tag 为该参数指定的值时才执行，多个 tag 以逗号分隔 --skip-tags=SKIP_TAGS ＃ 当 play 和 task 的 tag 不匹配该参数指定的值时，才执行
    -v, --verbose ＃输出更详细的执行过程信息，-vvv可得到所有执行过程信息。
</code></pre><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>ansible 配合 gitlab-ci 实现推服务器示例</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token key atrule">script</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">-</span> echo \\&quot;$<span class="token punctuation">{</span>HOST<span class="token punctuation">}</span>\\&quot; ansible_ssh_user=$<span class="token punctuation">{</span>USER<span class="token punctuation">}</span> ansible_ssh_pass=$<span class="token punctuation">{</span>PASS<span class="token punctuation">}</span> ansible_ssh_host=$<span class="token punctuation">{</span>HOST<span class="token punctuation">}</span> <span class="token punctuation">&gt;</span> hosts</span>
<span class="line">  <span class="token punctuation">-</span> echo ansible<span class="token punctuation">-</span>playbook ansible.yaml <span class="token punctuation">-</span>e hosts=$<span class="token punctuation">{</span>HOST<span class="token punctuation">}</span> <span class="token punctuation">-</span>i ./hosts</span>
<span class="line">  <span class="token punctuation">-</span> ansible<span class="token punctuation">-</span>playbook ansible.yaml <span class="token punctuation">-</span>e &quot;HOST=$<span class="token punctuation">{</span>HOST<span class="token punctuation">}</span>  DEST_PATH=$<span class="token punctuation">{</span>ROOT_PATH<span class="token punctuation">}</span>/$<span class="token punctuation">{</span>MICROAPP_NAME<span class="token punctuation">}</span> ROOT_PATH=$<span class="token punctuation">{</span>ROOT_PATH<span class="token punctuation">}</span> FILE_NAME=$<span class="token punctuation">{</span>FILE_NAME<span class="token punctuation">}</span>&quot; <span class="token punctuation">-</span>i ./hosts</span>
<span class="line">  <span class="token punctuation">-</span> rm <span class="token punctuation">-</span>f hosts</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token comment"># cat user.yml</span></span>
<span class="line"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> create user</span>
<span class="line">  <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all</span>
<span class="line">  <span class="token key atrule">user</span><span class="token punctuation">:</span> root</span>
<span class="line">  sudo_yes<span class="token punctuation">:</span>yes</span>
<span class="line">  <span class="token key atrule">gather_facts</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment">#gather_facts参数指定了在以下任务部分执行前，是否先执行setup模块获取主机相关信息，这在后面的task会使用到setup获取的信息时用到；</span></span>
<span class="line">  <span class="token key atrule">vars</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">user</span><span class="token punctuation">:</span> <span class="token string">&quot;test&quot;</span></span>
<span class="line">  <span class="token key atrule">tasks</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> create  user</span>
<span class="line">    <span class="token key atrule">user</span><span class="token punctuation">:</span> name=&quot;<span class="token punctuation">{</span><span class="token punctuation">{</span> user <span class="token punctuation">}</span><span class="token punctuation">}</span>&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ansible-常用模块" tabindex="-1"><a class="header-anchor" href="#ansible-常用模块"><span>Ansible 常用模块</span></a></h2><h3 id="shell-模块" tabindex="-1"><a class="header-anchor" href="#shell-模块"><span>shell 模块</span></a></h3><table><thead><tr><th>参数</th><th>解释</th><th></th></tr></thead><tbody><tr><td>chdir</td><td>运行 command 命令前先 cd 到这个目录</td><td></td></tr><tr><td>creates</td><td>如果这个参数对应的文件存在，就不运行 command</td><td></td></tr><tr><td>executable</td><td>将 shell 切换为 command 执行，这里的所有命令需要使用绝对路径</td><td></td></tr><tr><td>removes</td><td>如果这个参数对应的文件<strong>不存在</strong>，就<strong>不运行 command</strong></td><td></td></tr></tbody></table><h3 id="file-模块" tabindex="-1"><a class="header-anchor" href="#file-模块"><span>file <a href="https://hoxis.github.io/ansible-files-modules-file.html" target="_blank" rel="noopener noreferrer">模块</a></span></a></h3><p>设置文件夹的权限是非常常见的操作，所以就有了 file 任务。</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&#39;ensure folder /app/nginx is created&#39;</span></span>
<span class="line">  <span class="token key atrule">file</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">&#39;/app/nginx&#39;</span></span>
<span class="line">    <span class="token key atrule">owner</span><span class="token punctuation">:</span> <span class="token string">&#39;nginx&#39;</span> <span class="token comment">#owner：指定文件的所属用户。</span></span>
<span class="line">    <span class="token key atrule">group</span><span class="token punctuation">:</span> <span class="token string">&#39;nginx&#39;</span> <span class="token comment"># group：指定文件的所属用户组。</span></span>
<span class="line">    <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">&#39;0700&#39;</span></span>
<span class="line">    <span class="token key atrule">state</span><span class="token punctuation">:</span> <span class="token string">&#39;directory&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>state 属性的值可以为： <ul><li>absent：不存在。可以理解为删除该文件或文件夹。</li><li>directory：文件夹。如果该文件夹不存在，则创建。</li><li>file：文件。如果不存在，则创建。</li><li>touch：与 linux 的 touch 实现相同的效果。</li></ul></li></ul><h3 id="service" tabindex="-1"><a class="header-anchor" href="#service"><span>Service</span></a></h3><p>在服务安装完成后，最常用的操作就是启动服务了。同时，它会根据不同的操作决定使用何种 service 实现。支持：BSD init, OpenRC, SysV, Solaris SMF, systemd, upstart。这就是封装的强大。用户只需要描述他的期望，剩下的机器能解决的，都由机器解决。</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ensure svn service started</span>
<span class="line">  <span class="token key atrule">service</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> svnserver</span>
<span class="line">    <span class="token key atrule">state</span><span class="token punctuation">:</span> started</span>
<span class="line">    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>enabled 属性值为 true 代表开机自动启动。state 属性值可以为：</p><ul><li>reloaded：服务是被重新加载过的。</li><li>restarted：服务是被重启过的。</li><li>started：服务是启动的。</li><li>stopped：服务是停止的。</li></ul><p>示例：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> deploy</span>
<span class="line">  <span class="token key atrule">hosts</span><span class="token punctuation">:</span> <span class="token string">&#39;{{ HOST }}&#39;</span></span>
<span class="line">  <span class="token key atrule">tasks</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> delete dir</span>
<span class="line">      <span class="token key atrule">file</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">&#39;{{ DEST_PATH }}&#39;</span></span>
<span class="line">        <span class="token key atrule">state</span><span class="token punctuation">:</span> absent</span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> unarchive file</span>
<span class="line">      <span class="token key atrule">unarchive</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">src</span><span class="token punctuation">:</span> <span class="token string">&#39;{{ FILE_NAME }}&#39;</span></span>
<span class="line">        <span class="token key atrule">dest</span><span class="token punctuation">:</span> <span class="token string">&#39;{{ ROOT_PATH }}&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="unarchive-模块" tabindex="-1"><a class="header-anchor" href="#unarchive-模块"><span>unarchive 模块</span></a></h3><table><thead><tr><th>copy</th><th>no</th><th>yes</th><th>yes/no</th><th>在解压文件之前，是否先将文件复制到远程主机，默认为 yes。若为 no，则要求目标主机上压缩包必须存在。</th></tr></thead><tbody><tr><td>creates</td><td>yes</td><td></td><td></td><td>指定一个文件名，当该文件存在时，则解压指令不执行</td></tr><tr><td>dest</td><td>yes</td><td></td><td></td><td>远程主机上的一个路径，即文件解压的路径</td></tr><tr><td>grop</td><td>no</td><td></td><td></td><td>解压后的目录或文件的属组</td></tr><tr><td>list_files</td><td>no</td><td>no</td><td>yes/no</td><td>如果为 yes，则会列出压缩包里的文件，默认为 no，2.0 版本新增的选项</td></tr><tr><td>mode</td><td>no</td><td></td><td></td><td>解压后文件的权限</td></tr><tr><td>src</td><td>no</td><td></td><td></td><td>如果 copy 为 yes，则需要指定压缩文件的源路径</td></tr><tr><td>owner</td><td>no</td><td></td><td></td><td>解压后文件或目录的属主</td></tr></tbody></table><h3 id="yum-模块" tabindex="-1"><a class="header-anchor" href="#yum-模块"><span>Yum 模块</span></a></h3><table><thead><tr><th><strong>参数名</strong></th><th><strong>是否必须</strong></th><th><strong>默认值</strong></th><th><strong>选项值</strong></th><th><strong>参数说明</strong></th></tr></thead><tbody><tr><td>conf_file</td><td>no</td><td></td><td></td><td>设定远程 yum 执行时所依赖的 yum 配置文件</td></tr><tr><td>disable_gpg_check</td><td>no</td><td>no</td><td>yes/no</td><td>在安装包前检查包，只会影响 state 参数为<em>present</em>或者<em>latest</em>的时候</td></tr><tr><td>list</td><td>no</td><td></td><td></td><td>只能由 ansible 调用，不支持 playbook，这个干啥的大家都懂</td></tr><tr><td>name</td><td>yes</td><td></td><td></td><td>你需要安装的包的名字，也能如此使用<em>name=python=2.7</em>安装 python2.7</td></tr><tr><td>state</td><td>no</td><td>present</td><td>present/latest/absent</td><td>用于描述安装包最终状态，<em>present/latest</em>用于安装包，<em>absent</em>用于 remove 安装包</td></tr><tr><td>update_cache</td><td>no</td><td>no</td><td>yes/no</td><td>用于安装包前执行更新 list,只会影响 state 参数为<em>present/latest</em>的时候</td></tr></tbody></table><p><strong>ping 模块</strong></p><p>ping 模块尝尝用于检测网络是否通畅</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">ansible <span class="token parameter variable">-i</span> hosts all <span class="token parameter variable">-m</span> <span class="token function">ping</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="其他模块" tabindex="-1"><a class="header-anchor" href="#其他模块"><span>其他模块</span></a></h3><ul><li><p><a href="https://hoxis.github.io/ansible-commands-modules-command-shell-raw.html" target="_blank" rel="noopener noreferrer">Ansible 命令相关模块之 command, shell, raw 模块</a></p></li><li><p><a href="https://hoxis.github.io/ansible-commands-modules-others.html" target="_blank" rel="noopener noreferrer">Ansible 命令相关模块之 expect, script, telnet 模块</a></p></li><li><p><a href="https://hoxis.github.io/ansible-files-modules-copy.html" target="_blank" rel="noopener noreferrer">Ansible 常用文件操作模块之 copy 模块</a></p></li><li><p><a href="https://hoxis.github.io/ansible-files-modules-file.html" target="_blank" rel="noopener noreferrer">Ansible 常用文件操作模块之 file 模块</a></p></li><li><p><a href="https://hoxis.github.io/ansible-files-modules-template.html" target="_blank" rel="noopener noreferrer">Ansible 常用文件操作模块之 template 模块</a></p></li><li><p><a href="https://hoxis.github.io/ansible-system-modules.html" target="_blank" rel="noopener noreferrer">Ansible 常用系统模块之 service/systemd/ping 模块</a></p></li><li><p>user 模块：管理用户（创建用户的时候，这边有个提醒：是密码方面，可以使用加密）</p></li><li><p>fetch 模块：从远程主机拉取文件到管理主机（和 copy 的功能相反），但是只能拉取单个文件（多个文件的话可以打包拉取）</p></li><li><p>yum 软件包管理模块：（状态默认为 present、也就是 install）</p></li><li><p>setup 模块（同样无参数，输出主机的信息，信息较多，这里就不写了，只写命令）</p></li><li><p>cron 模块：定时任务模块</p></li><li><p>script：本地脚本复制到远程主机执行</p></li></ul><ul><li>条件判断</li></ul><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token key atrule">name</span><span class="token punctuation">:</span> Ensure nginx exists</span>
<span class="line">  <span class="token key atrule">command</span><span class="token punctuation">:</span> /sbin/shutdown <span class="token punctuation">-</span>t now  <span class="token comment"># 执行命令的子任务类型。</span></span>
<span class="line">  <span class="token key atrule">yum</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx</span>
<span class="line">    <span class="token key atrule">state</span><span class="token punctuation">:</span> present</span>
<span class="line">  <span class="token key atrule">when</span><span class="token punctuation">:</span> ansible_os_family == &quot;CentOS&quot;  <span class="token comment">#只有 ansible_os_family == &quot;CentOS&quot; 为 true 时才执行该子任务。</span></span>
<span class="line">  <span class="token comment"># when: ansible_distribution == &quot;CentOS&quot; and ansible_distribution_major_version == &quot;6&quot;  # 表示与的关系</span></span>
<span class="line">  <span class="token comment"># when: ansible_distribution == &quot;CentOS&quot;  or ansible_distribution == &quot;Debian&quot; )  或的关系</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="循环遍历" tabindex="-1"><a class="header-anchor" href="#循环遍历"><span>循环遍历</span></a></h3><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="line"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Ensure soft exists</span>
<span class="line">  <span class="token key atrule">yum</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&#39;{{ item }}&#39;</span></span>
<span class="line">    <span class="token key atrule">state</span><span class="token punctuation">:</span> present</span>
<span class="line">  <span class="token key atrule">when</span><span class="token punctuation">:</span> ansible_os_family == &quot;CentOS&quot;</span>
<span class="line">  <span class="token key atrule">with_items</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> gcc</span>
<span class="line">    <span class="token punctuation">-</span> gcc<span class="token punctuation">-</span>c++</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><p><a href="https://github.com/ansible/ansible-examples" target="_blank" rel="noopener noreferrer">ansible-examples</a></p><p><a href="https://ansible-tran.readthedocs.io/en/latest/index.html#" target="_blank" rel="noopener noreferrer"> Ansible 中文权威指南</a></p><p><a href="https://showme.codes/2019-09-19/understand-ansible/" target="_blank" rel="noopener noreferrer">这样理解 Ansible 更容易</a></p><p><a href="http://einverne.github.io/post/2020/05/ansible-introduction.html#module" target="_blank" rel="noopener noreferrer">Ansible 介绍及使用</a></p><p><a href="https://zhuanlan.zhihu.com/p/162698360" target="_blank" rel="noopener noreferrer">常见操作模块参考</a></p><p><a href="https://blog.csdn.net/chuanxincui/article/details/82864405" target="_blank" rel="noopener noreferrer">ansible 从零开始快速上手</a></p>`,59),i=[l];function p(o,c){return a(),n("div",null,i)}const d=s(t,[["render",p],["__file","ansible.html.vue"]]),u=JSON.parse('{"path":"/dev-ops/ansible.html","title":"ansible","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Ansible 到底解决了什么问题？","slug":"ansible-到底解决了什么问题","link":"#ansible-到底解决了什么问题","children":[]},{"level":2,"title":"Ansible 提供两种方式去完成任务","slug":"ansible-提供两种方式去完成任务","link":"#ansible-提供两种方式去完成任务","children":[]},{"level":2,"title":"host 文件","slug":"host-文件","link":"#host-文件","children":[]},{"level":2,"title":"编写 Playbook","slug":"编写-playbook","link":"#编写-playbook","children":[{"level":3,"title":"options","slug":"options","link":"#options","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"Ansible 常用模块","slug":"ansible-常用模块","link":"#ansible-常用模块","children":[{"level":3,"title":"shell 模块","slug":"shell-模块","link":"#shell-模块","children":[]},{"level":3,"title":"file 模块","slug":"file-模块","link":"#file-模块","children":[]},{"level":3,"title":"Service","slug":"service","link":"#service","children":[]},{"level":3,"title":"unarchive 模块","slug":"unarchive-模块","link":"#unarchive-模块","children":[]},{"level":3,"title":"Yum 模块","slug":"yum-模块","link":"#yum-模块","children":[]},{"level":3,"title":"其他模块","slug":"其他模块","link":"#其他模块","children":[]},{"level":3,"title":"循环遍历","slug":"循环遍历","link":"#循环遍历","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"updatedTime":1720052070000,"contributors":[{"name":"liujia6","email":"liujia11@qianxin.com","commits":1}]},"filePathRelative":"dev-ops/ansible.md"}');export{d as comp,u as data};
