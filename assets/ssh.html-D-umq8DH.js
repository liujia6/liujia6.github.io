import{_ as s,c as e,o as n,a}from"./app-BYS36vur.js";const l={},i=a(`<h1 id="ssh" tabindex="-1"><a class="header-anchor" href="#ssh"><span>ssh</span></a></h1><ul><li><a href="https://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="noopener noreferrer">SSH 原理与运用（一）：远程登录</a></li><li><a href="https://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html" target="_blank" rel="noopener noreferrer">SSH 原理与运用（二）：远程操作与端口转发</a></li></ul><h2 id="远程登录" tabindex="-1"><a class="header-anchor" href="#远程登录"><span>远程登录</span></a></h2><h3 id="ssh-配置公钥免密登录实战" tabindex="-1"><a class="header-anchor" href="#ssh-配置公钥免密登录实战"><span><a href="https://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="noopener noreferrer">ssh 配置公钥免密登录实战</a></span></a></h3><ol><li><p>生成 ssh 秘钥 <code>ssh-keygen -t rsa -C &quot;xxx@email.com&quot;</code>,</p></li><li><p>控制台问如果之前有生成过一次 ssh 地址，则需要输入本次的文件名例如 id_rsa_github，不然会覆盖之前的</p></li><li><p>执行 <code>vi ~/.ssh/config</code> 按照以下格式写入主机的简称 ，之后可以用 ssh \${hostNickName} 而不是ssh \${username}@\${hostIp}登录了</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">Host \${hostNickName}</span>
<span class="line">  HostName \${hostIp}</span>
<span class="line">  User \${username}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>windows 下执行<code>ssh-copy-id -i ~/.ssh/id_rsa.pub 服务器用户名@服务器地址</code></p><ul><li>本地 Mac 环境执行<code>ssh 服务器用户名@服务器地址 &quot;echo \\&quot;</code>cat .ssh/id_rsa.pub<code>\\&quot; &gt;&gt; .ssh/authorized_keys&quot;</code></li><li>ssh-copy-id 是用来将本地公钥拷贝到远程的 authorized_keys 文件的脚本命令，它还会将身份标识文件追加到远程机器的 ~/.ssh/authorized_keys 文件中，并给远程主机的用户主目录适当的的权限。</li></ul></li><li><p>以上执行完成后会让输入密码</p></li><li><p>完成啦！输入 ssh 225 即可登录服务器了！(这里 225 是我第一步配置的服务器 HOST 登录简称)</p></li><li><p>~/.ssh 下一共有 4 个文件，<code>config id_rsa id_rsa.pub known_hosts</code>，分别是配置文件，用于简单登录服务器，私钥和公钥，</p></li><li><p>第一次登录主机的时候会提示你<code>Are you sure you want to continue connecting (yes/no)? yes</code>,yes 完成后会将远程主机的公钥存放在此处</p></li></ol><h3 id="远程登录的原理" tabindex="-1"><a class="header-anchor" href="#远程登录的原理"><span>远程登录的原理</span></a></h3><p><strong>账号密码登录</strong>：保证主机提供的密码和账户名一致即可</p><ol><li>如何保证密码不被篡改 <ol><li>使用服务器的公钥将密码加密并使用私钥解密，如果一致则表示密码没有被篡改</li></ol></li><li>服务器的公钥没有证书中心 CA 公证，如何保证服务器的身份不被远程拦截（中间人攻击）， <ol><li>第一次登录时，系统提示并展示出服务器的公钥指纹，并要求确认，此时我们通过对比服务器公示出来的公钥指纹，确认核对即可</li><li>核对后，会将主机的公钥保存在.ssh/known_hosts 文件中，下次就可以不用核对了</li></ol></li></ol><p><strong>ssh 配置公钥免密码登录</strong>：通过预先将本机生成的用户公钥保存在远程主机上，登录时验证通信时本机是否有对应的私钥即可</p><ol><li>如何验证对方是否有是否有对应私钥呢 <ol><li>登录时，服务器发送一个随机字符</li><li>主机用私钥将随机字符加密</li><li>发送给服务器时，服务器用预先存储的用户公钥解密如果确认是否和发送时一致即可确认用户身份</li></ol></li><li>用户公钥存储 <ol><li>远程主机将用户的公钥，保存在登录后的用户主目录的$HOME/.ssh/authorized_keys 文件中。公钥就是一段字符串，只要把它追加在 authorized_keys 文件的末尾就行了</li></ol></li></ol><h2 id="管理本机的多个-ssh-密钥-多个远程仓库账号" tabindex="-1"><a class="header-anchor" href="#管理本机的多个-ssh-密钥-多个远程仓库账号"><span><a href="https://blog.csdn.net/agonie201218/article/details/89561961" target="_blank" rel="noopener noreferrer">管理本机的多个 ssh 密钥</a>（多个远程仓库账号）</span></a></h2><p>可以使用 ssh-agent 统一对私钥代理，也可以通过 config 文件，固定不同域名使用不同私钥</p><p>当切换到其他电脑时，直接复制 ssh 文件夹，并且执行</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">chmod 600 ~/.ssh/config</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="ssh-agent" tabindex="-1"><a class="header-anchor" href="#ssh-agent"><span>ssh-agent</span></a></h3><ul><li>使用场景： <ul><li>本机有多个用户需要登录不同的应用，例如公司的 gitlab 和 github 需要管理两个不一样的 ssh 密钥对，并在 clone 的时候切换用户，因为 ssh 默认使用的是 id_rsa 私钥，如果是需要切换到其他的可以用轻松切换 ssh-agent</li><li>当私钥设置了密码，我们又需要频繁的使用私钥进行认证时，ssh 代理可以帮助我们免去重复的输入密码的操作。</li></ul></li><li>使用 <ul><li><code>eval $(ssh-agent)</code><ul><li>开启 ssh-agent，输出进程 pid<code>Agent pid 1434</code></li><li><code>ssh-agent -k</code> 终止 ssh-agent 运行</li><li>eval <code>ssh-agent</code> 和 ssh-agent $shell 都是同样的运行 ssh-agent 命令</li></ul></li><li><code>ssh-add 私钥路径</code></li><li>AddKeysToAgent -&gt;ssh config 文件配置 <ul><li>是否自动将 key 加入到 <code>ssh-agent</code>，值可以为 no(default)/confirm/ask/yes。</li><li>如果是 yes，key 和密码都将读取文件并以加入到 agent ，就像 <code>ssh-add</code>。其他分别是询问、确认、不加入的意思。添加到 ssh-agent 意味着将私钥和密码交给它管理，让它来进行身份认证。</li></ul></li></ul></li><li>ssh-adds 使用 <ul><li><code>ssh-add -D</code> 删除所有私钥</li><li><code>ssh-add -l</code> 显示所有私钥列表</li><li><code>ssh-add -L</code> 查看代理中的私钥对应的公钥</li><li><code>ssh-add -d /path/of/key/key_name</code> 移除指定的私钥</li><li><code>ssh-add -x</code> 锁定 ssh 代理,锁定时需要指定锁定密码，锁定后的 ssh 代理暂时不能帮助我们管理私钥</li><li><code>ssh-add -X</code> 解锁 ssh 代理</li><li><code>ssh-add -d /path/of/key/key_name</code> 移除指定的私钥</li></ul></li></ul><h3 id="config" tabindex="-1"><a class="header-anchor" href="#config"><span>config</span></a></h3><p>ssh 程序可以从三个途径获取配置参数：</p><ul><li>命令行选型，比如 -i ~/.ssh/id_rsa，-p 6004，-l jingwei；</li><li>用户配置文件，放置在 ~/.ssh/config；</li><li>系统配置文件，放置在 /etc/ssh/ssh_config（区别于 /etc/ssh/sshd_config）。</li></ul><p><a href="https://www.hi-linux.com/posts/14346.html" target="_blank" rel="noopener noreferrer">参考-&gt;利用 SSH 的用户配置文件 Config 管理 SSH 会话</a></p><p><a href="https://deepzz.com/post/how-to-setup-ssh-config.html" target="_blank" rel="noopener noreferrer">参考-&gt;SSH Config 那些你所知道和不知道的事</a></p><p>配置不同的仓库指向不同的密钥文件，为不同网站应用各自的 SSH KEY</p><p>vi ~/.ssh/config</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">Host github.com<span class="token punctuation">(</span>可更改<span class="token punctuation">)</span>// 主机名字，不能重名</span>
<span class="line">    HostName github.com// 主机所在域名或IP</span>
<span class="line">    User <span class="token function">git</span>  // 用户名称</span>
<span class="line">    PreferredAuthentications publickey</span>
<span class="line">    IdentityFile ~/.ssh/id_rsa_github  私钥路径</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>SSH 客户端的 StrictHostKeyChecking 配置指令，<code>StrictHostKeyChecking=no</code>时可以实现当第一次连接服务器时自动接受新的公钥。不再有任何警告出现了。</li><li><strong>LocalForward</strong> 指定本地主机的端口通过 ssh 转发到指定远程主机。格式：LocalForward [bind_address:]post host:hostport，支持 IPv6。</li><li>取消 git 全局用户名/邮箱的设置，设置独立的 用户名/邮箱</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 取消全局 用户名/邮箱 配置</span></span>
<span class="line">$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> user.name</span>
<span class="line">$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> user.email</span>
<span class="line"><span class="token comment"># 进入项目文件夹，单独设置每个repo 用户名/邮箱</span></span>
<span class="line">$ <span class="token function">git</span> config user.email <span class="token string">&quot;xxxx@xx.com&quot;</span></span>
<span class="line">$ <span class="token function">git</span> config user.name <span class="token string">&quot;xxxx&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置-ssh-agent-登录" tabindex="-1"><a class="header-anchor" href="#配置-ssh-agent-登录"><span><a href="https://zhuanlan.zhihu.com/p/126117538" target="_blank" rel="noopener noreferrer">配置 ssh-agent 登录</a></span></a></h3><p>。/俄xxxxxxxxxxxxxxxxxxxxxxxxxx40-<a href="https://www.zsythink.net/archives/2422" target="_blank" rel="noopener noreferrer">ssh-agent 代理转发原理参考</a></p><p><a href="https://blog.csdn.net/miss1181248983/article/details/84555264?utm_medium=distribute.pc_relevant.none-task-blog-title-7&amp;spm=1001.2101.3001.4242" target="_blank" rel="noopener noreferrer">使用参考</a></p><p>现在有 server1、server2、server3 三台机器，其中 server1 已经可以免秘钥登陆 server2 和 server3，但 server2 和 server3 之间无法通过 ssh 登陆。通过 server1 的 ssh-agent 配置可以实现 server 免秘钥登录 server3</p><p>步骤如下</p><ul><li>编辑配置文件：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/ssh/sshd_config         #做下面更改</span></span>
<span class="line">AllowAgentForwarding <span class="token function">yes</span>   <span class="token comment"># 表示允许代理转发</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>启动 ssh-agent 服务：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token punctuation">[</span>root@server2 ~<span class="token punctuation">]</span><span class="token comment"># ssh-agent bash</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment"># ps aux |grep ssh-agent</span></span>
<span class="line">root     <span class="token number">24338</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">51416</span>   <span class="token number">580</span> ?        Ss   02:43   <span class="token number">0</span>:00 ssh-agent</span>
<span class="line">root     <span class="token number">24388</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">51416</span>  <span class="token number">1032</span> ?        Ss   02:44   <span class="token number">0</span>:00 ssh-agent <span class="token function">bash</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>添加私钥：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment"># ssh-add ~/.ssh/id_rsa</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>测试登陆：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment"># ssh -A server2          #这里 -A 不可省略，表示开启认证代理连接转发功能</span></span>
<span class="line">Last login: Mon Nov <span class="token number">26</span> 09:36:58 <span class="token number">2018</span> from server1</span>
<span class="line"></span>
<span class="line"><span class="token punctuation">[</span>root@server2 ~<span class="token punctuation">]</span><span class="token comment"># ssh  server3            #后面这里 -A可以省略</span></span>
<span class="line">Last login: Mon Nov <span class="token number">26</span> 09:37:28 <span class="token number">2018</span> from server1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>-ssh -A server2 #这里 -A 不可省略，表示开启认证代理连接转发功能</p><h2 id="远程执行命令" tabindex="-1"><a class="header-anchor" href="#远程执行命令"><span>远程执行命令</span></a></h2><ul><li><code>ssh server &quot;cd /; ls&quot;</code></li><li><code>$ ssh example &lt; test.sh</code> 远程执行本地脚本</li><li><code>ssh -t example &quot;top&quot;</code> 执行需要交互的命令</li></ul><h2 id="远程服务当本地用" tabindex="-1"><a class="header-anchor" href="#远程服务当本地用"><span>远程服务当本地用</span></a></h2><p>通过 LocalForward 将本地端口上的数据流量通过 ssh 转发到远程主机的指定端口。感觉你是使用的本地服务，其实你使用的远程服务。如远程服务器上运行着 Postgres，端口 5432（未暴露端口给外部）。那么，你可以：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">Host db</span>
<span class="line">    HostName db.example.com</span>
<span class="line">    LocalForward <span class="token number">5433</span> localhost:5432</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你连接远程主机时，它会在本地打开一个 5433 端口，并将该端口的流量通过 ssh 转发到远程服务器上的 5432 端口。</p><p>首先，建立连接：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ <span class="token function">ssh</span> db</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>之后，就可以通过 Postgres 客户端连接本地 5433 端口：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">$ psql <span class="token parameter variable">-h</span> localhost <span class="token parameter variable">-p</span> <span class="token number">5433</span> orders</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="代理" tabindex="-1"><a class="header-anchor" href="#代理"><span>代理</span></a></h2><p>有的时候你可能没法直接登录到某台服务器，而需要使用一台中间服务器进行中转，如公司内网服务器。首先确保你已经为服务器配置了公钥访问，并开启了 agent forwarding，那么你需要添加如下配置到 <code>~/.ssh/config</code>：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">Host gateway</span>
<span class="line">    HostName proxy.example.com</span>
<span class="line">    User root</span>
<span class="line">Host db</span>
<span class="line">    HostName db.internal.example.com                  <span class="token comment"># 目标服务器地址</span></span>
<span class="line">    User root                                         <span class="token comment"># 用户名</span></span>
<span class="line">    <span class="token comment"># IdentityFile ~/.ssh/id_ecdsa                    # 认证文件</span></span>
<span class="line">    ProxyCommand <span class="token function">ssh</span> gateway netcat <span class="token parameter variable">-q</span> <span class="token number">600</span> %h %p      <span class="token comment"># 代理命令</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,53),t=[i];function r(o,c){return n(),e("div",null,t)}const d=s(l,[["render",r],["__file","ssh.html.vue"]]),h=JSON.parse('{"path":"/dev-ops/ssh.html","title":"ssh","lang":"en-US","frontmatter":{"autoGroup-1":"linux"},"headers":[{"level":2,"title":"远程登录","slug":"远程登录","link":"#远程登录","children":[{"level":3,"title":"ssh 配置公钥免密登录实战","slug":"ssh-配置公钥免密登录实战","link":"#ssh-配置公钥免密登录实战","children":[]},{"level":3,"title":"远程登录的原理","slug":"远程登录的原理","link":"#远程登录的原理","children":[]}]},{"level":2,"title":"管理本机的多个 ssh 密钥（多个远程仓库账号）","slug":"管理本机的多个-ssh-密钥-多个远程仓库账号","link":"#管理本机的多个-ssh-密钥-多个远程仓库账号","children":[{"level":3,"title":"ssh-agent","slug":"ssh-agent","link":"#ssh-agent","children":[]},{"level":3,"title":"config","slug":"config","link":"#config","children":[]},{"level":3,"title":"配置 ssh-agent 登录","slug":"配置-ssh-agent-登录","link":"#配置-ssh-agent-登录","children":[]}]},{"level":2,"title":"远程执行命令","slug":"远程执行命令","link":"#远程执行命令","children":[]},{"level":2,"title":"远程服务当本地用","slug":"远程服务当本地用","link":"#远程服务当本地用","children":[]},{"level":2,"title":"代理","slug":"代理","link":"#代理","children":[]}],"git":{"updatedTime":1717615253000,"contributors":[{"name":"liujia6","email":"liujia11@qianxin.com","commits":1}]},"filePathRelative":"dev-ops/ssh.md"}');export{d as comp,h as data};
