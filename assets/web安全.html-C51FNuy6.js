import{_ as e,c as l,o as i,a as t}from"./app-BYS36vur.js";const r={},o=t('<h1 id="web-安全" tabindex="-1"><a class="header-anchor" href="#web-安全"><span>web 安全</span></a></h1><h2 id="点击劫持-clickjacking" tabindex="-1"><a class="header-anchor" href="#点击劫持-clickjacking"><span>点击劫持(clickjacking)</span></a></h2><p>原理：攻击者使用透明的 iframe 覆盖在网页上，诱使用户在点击，</p><ol><li>flash 点击劫持：用过 flash 游戏，让用户完成一系列复杂的操作</li><li>图片覆盖攻击 Cross Site Image Overlaying（XSIO）</li></ol><p>防护：</p><ul><li><strong>X-Frame-Options</strong><ul><li>X-Frame-Options HTTP 响应头是用来给浏览器指示允许一个页面可否在 &lt;frame&gt;, &lt;iframe&gt;或者 &lt;object&gt; 中展现的标记。网站可以使用此功能，来确保自己网站的内容没有被嵌到别人的网站中去，也从而避免了点击劫持 的攻击。</li></ul></li></ul><h2 id="csrf" tabindex="-1"><a class="header-anchor" href="#csrf"><span><a href="https://juejin.im/post/5ce55b3d5188253386140dd0#heading-4" target="_blank" rel="noopener noreferrer">CSRF</a></span></a></h2><p>CSRF(Cross Site Request Forgery)指的是跨站请求伪造</p><p><a href="https://tech.meituan.com/2018/10/11/fe-security-csrf.html" target="_blank" rel="noopener noreferrer">前端安全系列（二）：如何防止 CSRF 攻击？ - 美团技术团队</a></p><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h3><p>攻击者诱骗受害者访问第三方网站，该网站会向被攻击网站发送跨站请求，利用受害者的已注册凭证绕过验证，冒充其执行操作。</p><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h3><ol><li>发生在第三方域名</li><li>不能获取到 cookie 只是借用（在请求参数中加上 cookie 并让服务器验证），但是跨域请求拿不到 cookie</li></ol><h3 id="攻击方式" tabindex="-1"><a class="header-anchor" href="#攻击方式"><span>攻击方式</span></a></h3><p>由于 AJAX 是不支持跨域发送请求的，所以我们只能够用支持跨域请求的 img、script、form 表单来发起请求，这些请求的限制性很强</p><ol><li>通过 img\\iframe\\script 发起 get 请求 <ul><li>由于 get 请求只能获取信息，不会修改数据库中信息，所以一般 get 请求伪造的影响较小。</li></ul></li><li>通过 js 提交 form 表单发起 post 请求 <ul><li>post 请求一般是通过表单发送，而表单请求不能修改请求头，也不能带上 query，所以这就是 token 防止 csrf 的原因</li></ul></li></ol><h3 id="防护" tabindex="-1"><a class="header-anchor" href="#防护"><span><a href="https://zhuanlan.zhihu.com/p/40588156" target="_blank" rel="noopener noreferrer">防护</a></span></a></h3><p>根据 CSRF 的特点我们有以下防护措施</p><ol><li>校验请求来源 <ol><li>阻止不明请求 <ol><li><a href="https://blog.csdn.net/sinat_36521655/article/details/104844667" target="_blank" rel="noopener noreferrer">设置 cookies 的 sameSite 属性的值为 strict 或者 lax</a><ol><li>这样只有同源网站的请求才会带上 cookies。</li></ol></li><li>同源检测 <ol><li>根据 Origin 限制跨域请求</li><li>限制<a href="https://www.ruanyifeng.com/blog/2019/06/http-referer.html" target="_blank" rel="noopener noreferrer">referer</a>：把 Referrer Policy 的策略设置成 same-origin 可通过 CSP</li></ol></li></ol></li><li>请求时要求附加本域才能获取的信息 <ol><li>验证 csrf token：服务端随机生成 token，保存在服务端 session 中，同时保存到客户端中，客户端发送请求时，把 token 带到 HTTP 请求头或参数中，服务端接收到请求，验证请求中的 token 与 session 中的是否一致。 <ol><li>前后端不分离：token 可以直接在编译模板的过程中写到表单的隐藏字段中，这样发送请求不需要额外的操作；</li><li>前后端分离：双重 cookie 校验 <ol><li>token 可以在登录时写入到 cookies 中，发送请求时，js 读取 cookies 中的 token，并设置到 HTTP 请求头中。 axios 有相关配置如下 <img src="https://picx.zhimg.com/80/v2-7ea9e31f1d90b2eb816e93d680e6e82b_720w.webp?source=1940ef5c" alt="img"></li></ol></li></ol></li></ol></li><li>保证网络请求由真实用户发出 <ul><li>用户操作限制（验证码）</li></ul></li></ol></li><li>不使用 cookie，使用 token 校验用户身份，换用 token 标识用户身份，放到请求头里面</li></ol><h2 id="xss" tabindex="-1"><a class="header-anchor" href="#xss"><span><a href="https://juejin.cn/post/6844903685122703367#heading-13" target="_blank" rel="noopener noreferrer">XSS</a></span></a></h2><p>Cross-site scripting，跨站脚本攻击。攻击者通过注入恶意的脚本，在用户浏览网页的时候进行攻击，进行窃取用户信息或者其他非法行为</p><p><a href="https://tsejx.github.io/javascript-guidebook/computer-networks/web-security/xss/#%E9%98%B2%E5%BE%A1%E7%AD%96%E7%95%A5" target="_blank" rel="noopener noreferrer">XSS 跨站脚本攻击 - JavaScript Guidebook</a></p><p><a href="https://github.com/leizongmin/js-xss/blob/master/README.zh.md" target="_blank" rel="noopener noreferrer">js-xss/README.zh.md at master · leizongmin/js-xss</a></p><p>主要经过以下两个步骤</p><ol><li>攻击者提交恶意代码。</li><li>浏览器执行恶意代码。</li></ol><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h3><ol><li>存储型 XSS：也叫持久性 XSS。 <ol><li>恶意代码提交到服务端，前端再根据服务端数据渲染。</li><li><strong>常见于评论、私信、发博客</strong>。所有查看了该博客该评论的用户，都会执行这段恶意脚本</li><li>XSS 蠕虫：具有自我传播能力的 XSS 攻击，<strong>在恶意脚本中利用用户的登录状态进行关注、发微博、发私信等操作</strong>，发出的微博和私信可再带上攻击 URL，诱导更多人点击，不断放大攻击范围。这种窃用受害者身份发布恶意内容，层层放大攻击范围的方式，被称为“XSS 蠕虫”。</li></ol></li><li>反射性 XSS：也叫非持久性 XSS <ol><li>常见于 <strong>通过 URL 传递参数</strong> 的功能，如网站搜索、跳转等</li><li>恶意代码来自 URL 参数，前端未过滤直接渲染导致，攻击者诱导用户点击 <code>https://example.com/search?q=&lt;script&gt;alert(&#39;XSS&#39;);&lt;/script&gt;</code></li></ol></li><li>Dom 型 XSS：<code>前端</code>取出<code>URL</code>中的恶意代码执行，通过修改页面的 dom 节点形成的 XSS，称为 dom based XSS</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li>防范 XSS 是需要后端 RD 和前端 RD 共同参与的系统工程。 <ul><li>存储型和反射型由于代码是存储到服务端的，需要服务端做 xss 防范</li><li>而 DOM 型是纯前端获取与展示，需要前端做 xss 防范</li></ul></li><li>转义应该在输出 HTML 时进行，而不是在提交用户输入时。</li></ul><ol><li>存储型 XSS：</li><li>攻击代码通过 URL 提交给服务端</li><li>纯前端展示恶意代码</li></ol><h3 id="攻击方式-1" tabindex="-1"><a class="header-anchor" href="#攻击方式-1"><span>攻击方式</span></a></h3><ul><li>在 HTML 中内嵌的文本中，恶意内容以 script 标签形成注入。</li><li>在内联的 JavaScript 中，拼接的数据突破了原本的限制（字符串，变量，方法名等）。</li><li>在标签属性中，恶意内容包含引号，从而突破属性值的限制，注入其他属性或者标签。</li><li>在标签的 href、src 等属性中，包含 javascript: 等可执行代码。</li><li>在 onload、onerror、onclick 等事件中，注入不受控制代码。</li><li>在 style 属性和标签中，包含类似 background-image:url(&quot;javascript:…&quot;); 的代码（新版本浏览器已经可以防范）。</li><li>在 style 属性和标签中，包含类似 expression(…) 的 CSS 表达式代码（新版本浏览器已经可以防范）。</li></ul><h3 id="危害" tabindex="-1"><a class="header-anchor" href="#危害"><span>危害</span></a></h3><ol><li>document.cookie 获取 cookie 实现 cookie 劫持，可以通过绑定 IP 防御</li><li>通过动态插入 img，在 src 赋值上构造 get 请求构造 get 请求</li><li>通过动态添加 post 请求的 form 标签，构造 post 请求</li><li>也可以直接通过 ajax 请求发送构造请求</li></ol><h3 id="预防" tabindex="-1"><a class="header-anchor" href="#预防"><span>预防</span></a></h3><ul><li>避免使用.innerHTML：考虑使用.textContent 或.innerText 来设置元素的内容，它们不会解析 HTML 标签。</li><li>如果需要使用.innerHTML，则需要转义 HTML 内容 <ul><li>不同的上下文，如 HTML 属性、HTML 文字内容、HTML 注释、跳转链接、内联 JavaScript 字符串、内联 CSS 样式表等，所需要的转义规则不一致。 业务 RD 需要选取合适的转义库，并针对不同的上下文调用不同的转义规则。</li></ul></li><li>设置 cookie 的 httponly 缓解 xss，可以通过 trace 请求读取 httponly cookie。</li><li>避免使用 DOM 中的内联事件监听器</li><li>配置 CS 内容安全策略检查</li></ul><h2 id="csp-content-security-policy-内容安全策略检查" tabindex="-1"><a class="header-anchor" href="#csp-content-security-policy-内容安全策略检查"><span><a href="http://www.ruanyifeng.com/blog/2016/09/csp.html" target="_blank" rel="noopener noreferrer">CSP（Content Security Policy）内容安全策略检查</a></span></a></h2><ul><li><p>&quot;网页安全政策&quot;， CSP 的实质就是白名单制度，开发者明确告诉客户端，哪些外部资源可以加载和执行，等同于提供白名单</p></li><li><p>如果只允许加载自己域的图片，可以 加上这个 meta 标签<code>&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;img-src &#39;self&#39;;&quot;&gt;</code></p></li><li><p><code>Content-Security-Policy: script-src &#39;self&#39;</code></p></li><li><p><code>Content-Security-Policy: default-src &#39;self&#39;</code></p></li><li><p>或者后端设置这个 http 响应头，self 表示本域，如果加载其他域的图片浏览器会报错</p></li><li><p><img src="https://pic4.zhimg.com/v2-bf28b28cd47bbab12b052811d52a1223_b.jpg" alt="image"></p></li><li><p><code>Content-Security-Policy: script-src &#39;self&#39;; object-src &#39;none&#39;; style-src cdn.example.org third-party.org; child-src https:</code></p><ul><li>脚本：只信任当前域名</li><li><code>&lt;object&gt;</code>标签：不信任任何 URL，即不加载任何资源</li><li>样式表：只信任<code>cdn.example.org</code>和<code>third-party.org</code></li><li>框架（frame）：必须使用 HTTPS 协议加载</li><li>其他资源：没有限制</li></ul><p>参考：<a href="https://www.cnblogs.com/heyuqing/p/6215761.html" target="_blank" rel="noopener noreferrer">前端安全配置之 Content-Security-Policy(csp)</a></p></li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="https://www.bookstack.cn/read/Tencent-secguide/JavaScript%E5%AE%89%E5%85%A8%E6%8C%87%E5%8D%97.md" target="_blank" rel="noopener noreferrer">Node 安全指南 - 《鹅厂(腾讯)代码安全指南》 - 书栈网 · BookStack</a></li></ul>',40),a=[o];function n(s,c){return i(),l("div",null,a)}const p=e(r,[["render",n],["__file","web安全.html.vue"]]),d=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/web%E5%AE%89%E5%85%A8.html","title":"web 安全","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"点击劫持(clickjacking)","slug":"点击劫持-clickjacking","link":"#点击劫持-clickjacking","children":[]},{"level":2,"title":"CSRF","slug":"csrf","link":"#csrf","children":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"攻击方式","slug":"攻击方式","link":"#攻击方式","children":[]},{"level":3,"title":"防护","slug":"防护","link":"#防护","children":[]}]},{"level":2,"title":"XSS","slug":"xss","link":"#xss","children":[{"level":3,"title":"分类","slug":"分类","link":"#分类","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[{"level":3,"title":"攻击方式","slug":"攻击方式-1","link":"#攻击方式-1","children":[]},{"level":3,"title":"危害","slug":"危害","link":"#危害","children":[]},{"level":3,"title":"预防","slug":"预防","link":"#预防","children":[]}]},{"level":2,"title":"CSP（Content Security Policy）内容安全策略检查","slug":"csp-content-security-policy-内容安全策略检查","link":"#csp-content-security-policy-内容安全策略检查","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"updatedTime":1717615253000,"contributors":[{"name":"liujia6","email":"liujia11@qianxin.com","commits":1}]},"filePathRelative":"计算机基础/web安全.md"}');export{p as comp,d as data};
