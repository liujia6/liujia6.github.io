import{_ as e,c as r,o as t,a as l}from"./app-BYS36vur.js";const o={},s=l('<h1 id="异步" tabindex="-1"><a class="header-anchor" href="#异步"><span>异步</span></a></h1><h2 id="promise" tabindex="-1"><a class="header-anchor" href="#promise"><span>promise</span></a></h2><p>缺点</p><ul><li>Promise 可以很好地处理单一异步结果，不适用于： <ul><li>多次触发的事件：如果要处理这种情况，可以了解一下响应式编程（ reactive programming ），这是一种很聪明的链式的处理普通事件的方法。数据流：支持此种情形的标准正在制定中。</li></ul></li><li>ECMAScript 6 Promise 缺少两个有时很有用的特性： <ul><li>不能取消执行。</li><li>无法获取当前执行的进度信息（比如，要在用户界面展示进度条）。</li></ul></li><li>Q Promise 库对于后者提供了支持，并且有计划将两种能力都添加到 Promises/A+ 规范中去。</li></ul><h2 id="rxjs" tabindex="-1"><a class="header-anchor" href="#rxjs"><span>rxjs</span></a></h2><p>rxjs 是可以取消的，对于 Promise 出现的两个问题：</p><p>● 在切换路由，组件销毁时调用 unsubscribe 方法取消订阅，回调里的逻辑便不会执行。 ● 竞态条件是由于接口异步调用的回调顺序不可控导致的，rxjs 的 switchMap 操作符可以确保每次接收到的都是最新一次发送的值（即最新的接口回调的值）。</p><ul><li>concatMap 保证所有异步执行的顺序</li><li>switchMap 直接取消之前没有执行完的订阅，只执行最近一次的</li></ul><h2 id="宏任务与微任务" tabindex="-1"><a class="header-anchor" href="#宏任务与微任务"><span><a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" target="_blank" rel="noopener noreferrer">宏任务与微任务</a></span></a></h2><p><img src="https://i.loli.net/2021/01/06/v6mUbtNMqxBaESu.png" alt="img"></p><ul><li>一个线程中，事件循环是唯一的，但是任务队列可以拥有多个。</li><li>任务队列又分为 macro-task（宏任务）与 micro-task（微任务），在最新标准中，它们被分别称为 task 与 jobs。</li><li>来自不同任务源的任务会进入到不同的任务队列。其中 setTimeout 与 setInterval 是同源的。</li><li>其中每一个任务的执行，无论是 macro-task 还是 micro-task，都是借助函数调用栈来完成。</li></ul><p>JavaScript 的事件分两种，<strong>宏任务(macro-task)<strong>和</strong>微任务(micro-task)</strong></p><ul><li><strong>宏任务</strong>：包括整体代码 script，setTimeout，setInterval，就是用户的一些操作的回调，如鼠标点击事件，键盘事件，ajax 请求，dom 操作等</li><li><strong>微任务</strong>：Promise.then(非 new Promise)，process.nextTick(node 中)、MutationObserver(html5 新特性)</li><li>setTimeout/Promise 等我们称之为任务源。而进入任务队列的是他们指定的具体执行任务。</li></ul><p><strong>执行栈</strong></p><ul><li>执行栈是宏任务被执行的地方</li></ul><p><strong>宏任务 &amp; 宏任务队列</strong></p><ul><li>宏任务总会在下一个 EventLoop 中执行</li><li>若在执行宏任务的过程中，加入了新的微任务，会把新的微任务添加到微任务的队列中。</li></ul><p><strong>微任务 &amp; 微任务队列</strong></p><ul><li>若在执行微任务的过程中，加入了新的微任务，会把新的微任务添加在当前任务队列的队尾巴。</li><li>微任务会在本轮 EventLoop 执行完后，马上把执行栈中的任务都执行完毕。</li></ul><p><strong>执行流程</strong></p><ul><li>从 task 队列（一个或多个）中选出最老的一个 <strong>task</strong>，执行它</li><li><strong>执行</strong> microtask 队列中的所有 <strong>microtask</strong>，直到队列为空。</li><li><strong>ui render</strong><ul><li><strong>判断是否需要渲染</strong>，要根据屏幕刷新率、页面性能、页面是否在后台运行来共同决定，判断 document 在此时间点渲染是否会『获益』。浏览器只需保证 60Hz 的刷新率即可（在机器负荷重时还会降低刷新率），若 eventloop 频率过高，即使渲染了浏览器也无法及时展示或者浏览器判断更新渲染不会带来视觉上的改变。所以<strong>并不是每轮 eventloop 都会执行 UI Render</strong>。（所以多个 task 很可能在一次渲染之间执行） <ul><li>执行各种渲染所需工作，如 触发 resize、scroll 事件、建立媒体查询、运行 CSS 动画等等 <ul><li>如果窗口的大小发生了变化，执行监听的 <strong><code>resize</code></strong> 方法（对于<code>resize</code> 和 <code>scroll</code>来说，并不是到了这一步才去执行滚动和缩放，那岂不是要延迟很多？浏览器当然会立刻帮你滚动视图，根据**<a href="https://link.zhihu.com/?target=https%3A//drafts.csswg.org/cssom-view/%23scrolling-events" target="_blank" rel="noopener noreferrer">CSSOM 规范</a>**所讲，浏览器会保存一个 <code>pending scroll event targets</code>，等到事件循环中的 <code>scroll</code>这一步，去派发一个事件到对应的目标上，驱动它去执行监听的回调函数而已。<code>resize</code>也是同理。）</li><li>如果页面发生了滚动，执行 <strong><code>scroll</code></strong> 方法。</li><li>执行帧动画回调， 也就是 <strong><code>requestAnimationFrame</code></strong> 的回调</li><li>执行 IntersectionObserver 的回调。</li><li><strong>重新渲染</strong>绘制用户界面。</li></ul></li></ul></li></ul></li><li>判断 <code>task队列</code>和<code>microTask</code>队列是否都为空，如果是的话，则进行 <code>Idle</code> 空闲周期的算法，判断是否要执行 requestIdleCallback 的回调函数。</li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><p><a href="https://zhuanlan.zhihu.com/p/142742003" target="_blank" rel="noopener noreferrer">深入解析 EventLoop 和浏览器渲染、帧动画、空闲回调的关系</a></p><p><a href="https://segmentfault.com/a/1190000013212944" target="_blank" rel="noopener noreferrer">Javascript 事件循环机制以及渲染引擎何时渲染 UI</a></p><p><a href="https://juejin.cn/post/6844903487700992007#heading-5" target="_blank" rel="noopener noreferrer">深入探究 eventloop 与浏览器渲染的时序问题</a></p><p><a href="https://github.com/aooy/blog/issues/5#" target="_blank" rel="noopener noreferrer">从 event loop 规范探究 javaScript 异步及浏览器更新渲染时机</a></p>',26),i=[s];function n(a,c){return t(),r("div",null,i)}const d=e(o,[["render",n],["__file","异步.html.vue"]]),h=JSON.parse('{"path":"/JS/%E5%BC%82%E6%AD%A5.html","title":"异步","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"promise","slug":"promise","link":"#promise","children":[]},{"level":2,"title":"rxjs","slug":"rxjs","link":"#rxjs","children":[]},{"level":2,"title":"宏任务与微任务","slug":"宏任务与微任务","link":"#宏任务与微任务","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"updatedTime":1717615253000,"contributors":[{"name":"liujia6","email":"liujia11@qianxin.com","commits":1}]},"filePathRelative":"JS/异步.md"}');export{d as comp,h as data};
