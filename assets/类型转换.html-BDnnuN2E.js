import{_ as n,c as s,o as a,a as e}from"./app-6XP77ETO.js";const t={},l=e(`<h1 id="js-类型与转换" tabindex="-1"><a class="header-anchor" href="#js-类型与转换"><span>JS 类型与转换</span></a></h1><h2 id="null与-undefined" tabindex="-1"><a class="header-anchor" href="#null与-undefined"><span><code>null</code>与 <code>undefined</code></span></a></h2><ul><li>null 表示一个空对象指针，typeof null === &#39;object&#39;，如果定义的值，在将来会用于保存对象，那么最好将该值初始化为 null，这样可以用 null 判断该变量是否保存对象的引用 <ul><li>实际上 undefined 派生自 null</li><li><code>Null</code>类型也只有一个值，就是<code>null</code>，它的语义表示空值，与<code>undefined</code>不同，<code>null</code>是 JavaScript 关键字，所以在任何代码中，你都可以放心用<code>null</code>关键字来获取<code>null</code>值。</li></ul></li></ul><h3 id="undefined" tabindex="-1"><a class="header-anchor" href="#undefined"><span><a href="https://blog.windstone.cc/js/data-types/#undefined" target="_blank" rel="noopener noreferrer">Undefined</a></span></a></h3><p>一般而言，不需要显示地把一个变量声明为 undefined，字面值 undefined 主要目的是用于比较，引入该值的目的是为了区分未经过初始化的变量与空对象指针</p><p>为什么有的编程规范要求用void 0 代替-undefined</p><p><code>Undefined</code>类型表示未定义，它的类型只有一个值，就是<code>undefined</code>。任何变量在赋值前是<code>Undefined</code>类型、值为<code>undefined</code>，一般我们可以用全局变量<code>undefined</code>（就是名为<code>undefined</code>的这个变量）来表达这个值，或者<code>void</code>运算来把任意一个表达式变成<code>undefined</code>值。</p><p>但是，JavaScript 的<code>undefined</code>是一个变量，而并非是一个关键字，这是 JavaScript 语言公认的设计失误之一。所以，我们为了避免无意中被篡改，通常建议使用<code>void 0</code>来获取<code>undefined</code>值。BTW，在代码压缩时，<code>undefined</code>也会被替换成<code>void 0</code>。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// undefined 被篡改</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，给全局的<code>undefined</code>赋值总是会失败，但是可以在函数内给声明<code>undefined</code>变量并赋值。</p><p><code>Undefined</code>跟<code>Null</code>有一定的表意差别，<code>Null</code>表示的是：“赋值了但是为空”。所以，在实际编程时，我们一般不会把变量赋值为<code>undefined</code>，这样可以保证所有值为<code>undefined</code>的变量，都是从未赋值的自然状态。</p><h4 id="判断变量是否已定义判断变量是否已定义" tabindex="-1"><a class="header-anchor" href="#判断变量是否已定义判断变量是否已定义"><span>判断变量是否已定义判断变量是否已定义</span></a></h4><p>一般情况下，若想判断变量是否已定义会使用<code>undefined</code>来判断，但是使用姿势可能不对。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 不推荐（函数内的 undefined 可能被改写）</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">isUndefined</span><span class="token punctuation">(</span><span class="token parameter">variable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> variable <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 推荐</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">isUndefined</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean"><span>Boolean</span></a></h2><p>Boolean 值是 true 和 false 的集合，使用 Boolean(val)效果规则如下</p><table><thead><tr><th>数据类型</th><th>true</th><th>false</th></tr></thead><tbody><tr><td>String</td><td>非空字符串</td><td>&#39;&#39;</td></tr><tr><td>Number</td><td>非零数字值</td><td>NaN 和 0</td></tr><tr><td>Object</td><td>任何对象</td><td>null</td></tr><tr><td>Undefined</td><td>-</td><td>undefined</td></tr></tbody></table><h2 id="number" tabindex="-1"><a class="header-anchor" href="#number"><span>Number</span></a></h2><ul><li>使用 IEEE 754 标准定义的数字类型，可以表示数字的最大值和最小值</li><li>八进制 <ul><li>首位为 0</li><li>如果字面值中的数值超出了范围，那么后面的值会作为十进制解析</li><li>严格模式下无效</li></ul></li><li>十六进制 <ul><li>首位为 0x</li></ul></li><li>ECMAScript 会将小数点后带有 6 个 0 以上的浮点数值转换为以 e 表示法表示的数值 <ul><li>例如 0.00000003 会被转换为 3e-8</li></ul></li><li>NaN <ul><li>用于表示一个本来要返回数值的操作数未返回数值的情况，这样就不会抛出错误</li><li>任何涉及 NaN 的操作都会返回 NaN</li><li>NaN 不等于任何值包括本身 <ul><li>使用 isNaN 判断 <ul><li>该函数会将参数转换为数值，如果不能被转换为数值，则返回 true</li></ul></li></ul></li></ul></li><li>处理数字统一性的以及比较的库</li><li>ECMAScript使用IEEE754格式表示整数和浮点数（double），使用 64 位固定长度来表示 <ul><li>为什么0.1+0.2!==0.3</li><li>由于0.1在二进制中是无限循环小数，在js中丢失了精度，所以</li><li>规避方法</li></ul></li></ul><h2 id="string-boolean-number-对象之间的相互转换" tabindex="-1"><a class="header-anchor" href="#string-boolean-number-对象之间的相互转换"><span>String，Boolean，Number，对象之间的相互转换</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;null&quot;</span></span>
<span class="line"><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;undefined&quot;</span></span>
<span class="line"><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;true&quot;</span></span>
<span class="line"><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;false&quot;</span></span>
<span class="line"><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;11&quot;</span></span>
<span class="line"><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">11e20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;1.1e+21&quot;</span></span>
<span class="line"><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;&quot;</span></span>
<span class="line"><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1,,2,,3</span></span>
<span class="line"><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;function a(){}&quot;</span></span>
<span class="line"><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;[object,object]&quot;</span></span>
<span class="line"><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zhang&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;[object,object]&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;false&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span></span>
<span class="line"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>  <span class="token comment">//NaN</span></span>
<span class="line"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment">//1</span></span>
<span class="line"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token comment">//0</span></span>
<span class="line"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;11&quot;</span><span class="token punctuation">)</span>  <span class="token comment">//11</span></span>
<span class="line"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;1.1e+21&quot;</span><span class="token punctuation">)</span> <span class="token comment">//1.1e+21</span></span>
<span class="line"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span>  <span class="token comment">//NaN</span></span>
<span class="line"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">// 0</span></span>
<span class="line"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span></span>
<span class="line"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 1</span></span>
<span class="line"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token number">NaN</span></span>
<span class="line"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// NaN</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="js-类型转换" tabindex="-1"><a class="header-anchor" href="#js-类型转换"><span>js 类型转换</span></a></h2><p><img src="https://i.loli.net/2021/01/06/DHBqNMbP6UKWrIv.png" alt="img"></p><p><img src="https://i.loli.net/2021/01/06/vswjYz2XSgClobU.png" alt="img"></p><p><strong>valueOf()</strong> 方法返回指定对象的原始值。</p><table><thead><tr><th>Array</th><th>返回数组对象本身。</th></tr></thead><tbody><tr><td>Boolean</td><td>布尔值。</td></tr><tr><td>Date</td><td>存储的时间是从 1970 年 1 月 1 日午夜开始计的毫秒数 UTC。</td></tr><tr><td>Function</td><td>函数本身。</td></tr><tr><td>Number</td><td>数字值。</td></tr><tr><td>Object</td><td>对象本身。这是默认情况。</td></tr><tr><td>String</td><td>字符串值。</td></tr><tr><td></td><td>Math 和 Error 对象没有 valueOf 方法。</td></tr></tbody></table><p>函数的 toString 方法返回一个字符串，内容是函数的源码。，函数内部的注释也可以返回。</p><h2 id="相等运算符-的比较与转换" tabindex="-1"><a class="header-anchor" href="#相等运算符-的比较与转换"><span>相等运算符“==”的比较与转换</span></a></h2><ul><li>原始类型的数据会转换成<strong>数值类型</strong>再进行比较。</li><li>如果一个操作数是对象，另一个操作数不是则先使用 symbol.toPrimitive(default) 将对象转换为数字，再进行比较</li><li>如果两个操作数都是对象，则比较它们是不是同一个对象 <ul><li>例如<code>[] == [] // false</code> 地址不一样</li></ul></li><li>特殊规则 <ul><li>任何数和 NaN 都不相等</li><li><code>null == undefined //true</code><ul><li>null 和 undefined 和任何其他数都不相等</li></ul></li><li><code>+0 == -0//true</code></li></ul></li></ul><h2 id="symbol-toprimitive-转换算法" tabindex="-1"><a class="header-anchor" href="#symbol-toprimitive-转换算法"><span><strong>Symbol.toPrimitive 转换算法</strong></span></a></h2><blockquote><p>被调用时,会接受一个字符串参数，表示当前运算的模式，一个有三种模式,只有包装对象有该方法，普通对象无该方法</p></blockquote><ul><li>Number:该场合需要转成数值</li><li>String:该场合需要转成字符串</li><li>Default:该场合可以转成数值，也可以转成字符串（例如+号）</li></ul><p>对象 =&gt; 基本类型转换算法</p><ol><li>调用 obj[Symbol.toPrimitive](hint)； <ol><li>如果 hint 取值是 &quot;string&quot;： <ul><li>首先返回 valueof（）值，如果不是原始类型的值，继续调用 toString()方法，如果是原始类型的值就返回 Number（）值就结束。</li></ul></li><li>hint 取值是 &quot;number&quot; 或 &quot;default&quot; ： <ul><li>首先返回 valueOf（）值，如果不是原始类型的值，继续调用 toString()方法，如果是原始类型的值就返回 Number（）值就结束</li></ul></li></ol></li></ol><p>例如 var arr=[1,21], arr1=[1,21]</p><p>arr==arr1 //false 因为不是同一引用，即不是同一个数组</p><p>要用 arr.toString()==arr1.toString()//true</p><p>https://blog.csdn.net/itcast_cn/article/details/82887895</p><p>可以再看看这篇博客检测一下知识</p><h2 id="隐式类型转换规则" tabindex="-1"><a class="header-anchor" href="#隐式类型转换规则"><span>隐式类型转换规则</span></a></h2><p>预期什么类型的值，就调用该类型的转换函数</p><ol><li><p>预期为字符串值的地方,主要发生在字符串的加法+运算时。当一个值为字符串，另一个值为非字符串，</p></li><li><p>预期为布尔值的地方（比如 if 语句的条件部分），就会将非布尔值的参数自动转换为布尔值。系统内部会自动调用 Boolean 函数。</p></li><li><p>预期为数值的地方，除了加法运算符（+）有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值。</p></li></ol><h2 id="号运算规则" tabindex="-1"><a class="header-anchor" href="#号运算规则"><span>+ 号运算规则</span></a></h2><ul><li><p>两个都是对象，</p><ul><li>则将<strong>两个操作数都转换为字符串</strong>，进行拼接</li></ul></li><li><p>两个都是简单数据类型，</p><ul><li>则将操作数转换为 number 相加得出结果</li></ul></li><li><p>如两个数都是数字</p><ul><li>直接运算，这个运算符优先数字相加</li></ul></li><li><p>有一个是字符串</p><ul><li>如果另外一个是对象的 <ul><li>先调用 symbol.toprimitive（default）</li></ul></li></ul></li></ul><p><a href="https://blog.csdn.net/shaohuan_asym/article/details/41862937" target="_blank" rel="noopener noreferrer">实践</a></p><p>当我们创建一个普通对象时（{} 或 new Object() 的方式等），对象上是不具备 [Symbol.toPrimitive] （方法）属性的。所以，对于普通对象的到基本类型值的运算，一般按照具体场景：</p><p><strong>语法：</strong> + Expression</p><p><strong>说明：</strong>&#39;+&#39;号运算符作为一元运算符时，Expression 将进行<a href="http://www.ecma-international.org/ecma-262/6.0/#sec-tonumber" target="_blank" rel="noopener noreferrer">ToNumber()</a>操作。</p><h2 id="tonumber-argument-转换方式" tabindex="-1"><a class="header-anchor" href="#tonumber-argument-转换方式"><span>ToNumber( argument )转换方式</span></a></h2><table><thead><tr><th>argument 类型</th><th>返回值</th></tr></thead><tbody><tr><td>Undefined</td><td>return NaN</td></tr><tr><td>Null</td><td>return 0</td></tr><tr><td>Boolean</td><td>true return 1; false return 0;</td></tr><tr><td>Number</td><td>return value</td></tr><tr><td>String</td><td>若字符串为纯数字时返回转换后的数字；非纯数字返回 NaN，如果是空字符串为 0</td></tr><tr><td>Symbol</td><td>抛出 TypeError 异常</td></tr><tr><td>Object</td><td>进行以下步骤：1.先进行 ToPrimitive(argument, hint Number)得到 rs；2.然后返回 ToNumber(rs)的结果。</td></tr></tbody></table><h2 id="二元运算符" tabindex="-1"><a class="header-anchor" href="#二元运算符"><span>二元运算符</span></a></h2><ol><li><p>值进行<a href="http://www.ecma-international.org/ecma-262/6.0/#sec-getvalue" target="_blank" rel="noopener noreferrer">GetValue</a>()操作。</p></li><li><p>值进行<a href="http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive" target="_blank" rel="noopener noreferrer">ToPrimitive</a>()操作，</p></li><li><p>若一方为 String 类型，2 个值都进行<a href="http://www.ecma-international.org/ecma-262/6.0/#sec-tostring" target="_blank" rel="noopener noreferrer">ToString</a>()转换，最后进行字符串连接操作。</p></li><li><p>若都不是 String 类型，2 个值都进行<a href="http://www.ecma-international.org/ecma-262/6.0/#sec-tonumber" target="_blank" rel="noopener noreferrer">ToNumber</a>()转换，最后进行算数加法运算。</p></li><li><p>若 input 类型为<strong>object</strong>(如：Array、Object、Date)，将根据第 ② 个参数 PreferredType 的值进行以下操作：</p></li></ol><ul><li>例如 Date 类型内部重写了 toPrimitive()方法，将“default”设置为“string”，而其他内置的对象都将“default”设置为“number”。</li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="https://juejin.im/post/5a695ec16fb9a01ca10b195b" target="_blank" rel="noopener noreferrer">JavaScript 对象转换到基本类型值算法 ToPrimitive</a></li><li><a href="https://blog.csdn.net/HaoDaWang/article/details/81319191" target="_blank" rel="noopener noreferrer">谈谈 JS 中的 {} + [] 和 [] + {}</a></li><li><a href="https://segmentfault.com/a/1190000016300245" target="_blank" rel="noopener noreferrer">toString 方法和 valueOf 方法以及 Symbol.toPrimitive 方法的学习</a></li><li><a href="https://blog.csdn.net/shaohuan_asym/article/details/41862937" target="_blank" rel="noopener noreferrer">Javascript 对象相加</a></li></ul>`,57),p=[l];function o(i,c){return a(),s("div",null,p)}const r=n(t,[["render",o],["__file","类型转换.html.vue"]]),d=JSON.parse('{"path":"/JS/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html","title":"JS 类型与转换","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"null与 undefined","slug":"null与-undefined","link":"#null与-undefined","children":[{"level":3,"title":"Undefined","slug":"undefined","link":"#undefined","children":[]}]},{"level":2,"title":"Boolean","slug":"boolean","link":"#boolean","children":[]},{"level":2,"title":"Number","slug":"number","link":"#number","children":[]},{"level":2,"title":"String，Boolean，Number，对象之间的相互转换","slug":"string-boolean-number-对象之间的相互转换","link":"#string-boolean-number-对象之间的相互转换","children":[]},{"level":2,"title":"js 类型转换","slug":"js-类型转换","link":"#js-类型转换","children":[]},{"level":2,"title":"相等运算符“==”的比较与转换","slug":"相等运算符-的比较与转换","link":"#相等运算符-的比较与转换","children":[]},{"level":2,"title":"Symbol.toPrimitive 转换算法","slug":"symbol-toprimitive-转换算法","link":"#symbol-toprimitive-转换算法","children":[]},{"level":2,"title":"隐式类型转换规则","slug":"隐式类型转换规则","link":"#隐式类型转换规则","children":[]},{"level":2,"title":"+ 号运算规则","slug":"号运算规则","link":"#号运算规则","children":[]},{"level":2,"title":"ToNumber( argument )转换方式","slug":"tonumber-argument-转换方式","link":"#tonumber-argument-转换方式","children":[]},{"level":2,"title":"二元运算符","slug":"二元运算符","link":"#二元运算符","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"updatedTime":1720052070000,"contributors":[{"name":"liujia6","email":"liujia11@qianxin.com","commits":1}]},"filePathRelative":"JS/类型转换.md"}');export{r as comp,d as data};
