import{_ as n,c as s,o as a,a as t}from"./app-6XP77ETO.js";const p="/assets/1717618838741-qC5zap3n.png",e={},l=t(`<h1 id="浏览器基础" tabindex="-1"><a class="header-anchor" href="#浏览器基础"><span>浏览器基础</span></a></h1><h2 id="事件" tabindex="-1"><a class="header-anchor" href="#事件"><span><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Building_blocks/Events" target="_blank" rel="noopener noreferrer">事件</a></span></a></h2><ul><li>事件流 <ul><li>事件有捕获阶段（capture），处于目标阶段（target），冒泡阶段（bubble），但是实际事件注册时，只会根据配置决定在某一个阶段执行该回调函数（默认是冒泡）</li><li>事件由 html-&gt;target-&gt;html:先捕获，再处于目标，再冒泡</li><li>target 属性 用户获取事件目标 事件加在哪个元素上。（更具体 target.nodeName）</li><li>在 DOM 中 event 对象必须作为唯一的参数传给事件处理函数，在 IE 中 event 是 window 对象的一个属性</li><li>srcElement 属性，用户获取事件目标 事件加在哪个元素上。</li></ul></li><li><strong>event.stopPropagation()</strong><ul><li>阻止事件继续向上冒泡</li><li>(IE 下只只支持 cancelBulble)</li></ul></li><li>event.preventDefault() <ul><li>會阻擋預設要發生的事件</li><li>return false （在事件处理函数中） <ul><li>功能也是阻止默认事件</li><li>只适用于通过 onevent 分配的处理程序</li></ul></li></ul></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener" target="_blank" rel="noopener noreferrer">EventTarget.addEventListener()</a><ul><li>在现代浏览器中，默认情况下，所有事件处理程序都在冒泡阶段进行注册。可以在 addEventListenr 中配置修改事件的处理阶段</li><li>当使用 addEventListener() 为一个元素注册事件的时候，句柄里的 this 值是该元素的引用。其与传递给句柄的 event 参数的 currentTarget 属性的值一样。</li><li><code>target.addEventListener(type, listener, options); target.addEventListener( type, // type 属性，用于获取事件类型 listener, (useCapture = false) /* lisenr的触发阶段是否使用捕获阶段，默认冒泡*/ );</code></li><li>addEventListener 的可选项 passive: true 向浏览器发出信号，表明处理程序将不会调用 preventDefault()。 <ul><li>移动设备上会发生一些事件，例如 touchmove（当用户在屏幕上移动手指时），默认情况下会导致滚动，但是可以使用处理程序的 preventDefault() 来阻止滚动。</li><li>因此，当浏览器检测到此类事件时，它必须首先处理所有处理程序，然后如果没有任何地方调用 preventDefault，则页面可以继续滚动。但这可能会导致 UI 中不必要的延迟和“抖动”</li><li>passive: true 选项告诉浏览器，处理程序不会取消滚动。然后浏览器立即滚动页面以提供最大程度的流畅体验，并通过某种方式处理事件。</li><li>对于某些浏览器（Firefox，Chrome），默认情况下，touchstart 和 touchmove 事件的 passive 为 true</li></ul></li></ul></li><li>Event 对象的一些兼容性写法 <ul><li>获得 event 对象兼容性写法 <ul><li><code>event || (event = window.event);</code></li></ul></li><li>获得 target 兼容型写法 <ul><li><code>event.target||event.srcElement</code></li></ul></li><li>阻止浏览器默认行为兼容性写法(returnValue 是 ie 的) <ul><li><code>event.preventDefault ? event.preventDefault() : (event.returnValue = false);</code></li></ul></li><li>阻止冒泡写法 <ul><li><code>event.stopPropagation ? event.stopPropagation() : (event.cancelBubble = true);</code></li></ul></li></ul></li><li>事件委托 <ul><li>利用事件流，在父节点上绑定事件，事件会冒泡到父节点，通过 event.target 来判断是否是指定节点触发的事件，从而避免一个个元素绑定事件</li></ul></li></ul><h2 id="跨域" tabindex="-1"><a class="header-anchor" href="#跨域"><span><a href="https://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener noreferrer">跨域</a></span></a></h2><h3 id="jsonp" tabindex="-1"><a class="header-anchor" href="#jsonp"><span><a href="https://github.com/YvetteLau/Step-By-Step/issues/30#issuecomment-907615001" target="_blank" rel="noopener noreferrer">JSONP</a></span></a></h3><p>尽管浏览器有同源策略，但是 &lt;script&gt; 标签的 src 属性不会被同源策略所约束，可以获取任意服务器上的脚本并执行。jsonp 通过插入 script 标签的方式来实现跨域，参数只能通过 url 传入，仅能支持 get 请求。</p><p>实现原理</p><ul><li>Step1: 创建 callback 方法</li><li>Step2: 插入 script 标签</li><li>Step3: 后台接受到请求，解析前端传过去的 callback 方法，返回该方法的调用，并且数据作为参数传入该方法</li><li>Step4: 由于将接口调用放在script脚本里面，浏览器加载完后，会将接口返回的内容，作为script脚本执行</li></ul><p>jsonp 源码实现</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">jsonp</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 初始化url</span></span>
<span class="line">    <span class="token keyword">let</span> dataString <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token string">&#39;?&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> callbackName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">jsonpCB_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">    url <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>dataString<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">callback=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>callbackName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 有请求参数，依次添加到url</span></span>
<span class="line">      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        url <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&amp;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>k<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">let</span> jsNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    jsNode<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span> <span class="token comment">// 触发callback，触发后删除js标签和绑定在window上的callback</span></span>
<span class="line">    window<span class="token punctuation">[</span>callbackName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">delete</span> window<span class="token punctuation">[</span>callbackName<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>jsNode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;没有返回数据&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// js加载异常的情况</span></span>
<span class="line">    jsNode<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">delete</span> window<span class="token punctuation">[</span>callbackName<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>jsNode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;JavaScript资源加载失败&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加js节点到document上时，开始请求</span></span>
<span class="line">    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>jsNode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">&#39;http://192.168.0.103:8081/jsonp&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">&#39;heiheihei&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:3000/show&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//code</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">callback</span><span class="token operator">:</span> <span class="token string">&#39;show&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务端代码(node):</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">//express启动一个后台服务</span></span>
<span class="line"><span class="token keyword">let</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/show&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> <span class="token punctuation">{</span> callback <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span> <span class="token comment">//获取传来的callback函数名，callback是key</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>callback<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(&#39;Hello!&#39;)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="xhr" tabindex="-1"><a class="header-anchor" href="#xhr"><span>XHR</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">getasync</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// same as original function</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    xhr<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token function">XMLHTTPRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="css和js的加载与阻塞" tabindex="-1"><a class="header-anchor" href="#css和js的加载与阻塞"><span>CSS和JS的加载与阻塞</span></a></h2><ul><li>css <ul><li>阻塞dom渲染</li></ul></li><li>JS <ul><li>阻塞dom解析</li><li>在遇到script标签时会触发页面渲染，如果前面有css，则会等待其加载完毕再执行脚本</li></ul></li></ul><h2 id="资源异步加载和预加载" tabindex="-1"><a class="header-anchor" href="#资源异步加载和预加载"><span>资源异步加载和预加载</span></a></h2><p><a href="https://www.luoyelusheng.com/post/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90%E4%B9%8B%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD(defer%E3%80%81async%E3%80%81module)%E5%92%8C%E9%A2%84%E5%8A%A0%E8%BD%BD(preload%E3%80%81prefetch%E3%80%81dns-prefetch%E3%80%81preconnect%20%E3%80%81prerender)/" target="_blank" rel="noopener noreferrer">参考</a></p><p><img src="`+p+'" alt="1717618838741"></p><ul><li><p>defer</p><ul><li><code>defer</code>是在解析到结束到 <code>&lt;/html&gt;</code>标签后才会执行,俗称 <code>推迟执行脚本</code>,多个 <code>defer</code>可以按顺序执行,例如 <code>defer1</code>和 <code>defer2</code>可以按顺序执行(实际上也不保证顺序执行)</li><li>延迟到文档解析后，domContentLoaded 执行前执行 （可以获取到所有 dom 对象）</li><li>按照顺序一一执行</li><li>在 type=module 的脚本中默认 defer</li></ul></li><li><p>async</p><ul><li><code>async</code>是告诉浏览器,它不会操作 <code>dom</code>,可以不必等到它下载解析完后再加载页面,也不用等它执行完后再执行其他脚本,俗称 <code>异步执行脚本</code></li><li>并行请求，并尽快解析和执行，多个 <code>async</code>无法保证他们的执行顺序，</li><li>应用：如果资源没有执行顺序依赖，例如独立的库就可以用</li></ul></li><li><p>defer 和 async 共同特点</p><ul><li>同时存在时表现形式为 async</li><li>只接受 src 的外部脚本</li></ul></li><li><p>preload</p><ul><li>预加载，尽快加载该资源</li></ul></li><li><p>prefetch</p><ul><li>页面空闲时加载该资源</li></ul></li><li><p>dns-prefetch</p><ul><li>HTTP 下默认解析 a 链接的域名</li><li>HTTPS 下需要添加 mata 标签，开启域名解析，不过不建议开启会带来安全隐患</li></ul></li><li><p>preconnect</p><ul><li>预连接，启动早期连接（包括 DNS 查找，TCP 握手和可选 TLS 协商），优化字体资源加载</li></ul></li></ul><h3 id="页面生命周期事件" tabindex="-1"><a class="header-anchor" href="#页面生命周期事件"><span>页面生命周期事件</span></a></h3><p>页面生命周期事件：</p><ul><li><p>当 DOM 准备就绪时，document 上的 DOMContentLoaded</p><p>事件就会被触发。在这个阶段，我们可以将 JavaScript 应用于元素。</p><ul><li>诸如 <code>&lt;script&gt;...&lt;/script&gt;</code> 或 <code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code> 之类的脚本会阻塞 <code>DOMContentLoaded</code>，浏览器将等待它们执行结束。</li><li>图片和其他资源仍然可以继续被加载。</li></ul></li><li><p>当页面和所有资源都加载完成时，<code>window</code> 上的 <code>load</code> 事件就会被触发。我们很少使用它，因为通常无需等待那么长时间。</p></li><li><p>当用户想要离开页面时，<code>window</code> 上的 <code>beforeunload</code> 事件就会被触发。如果我们取消这个事件，浏览器就会询问我们是否真的要离开（例如，我们有未保存的更改）。</p></li><li><p>当用户最终离开时，<code>window</code> 上的 <code>unload</code> 事件就会被触发。在处理程序中，我们只能执行不涉及延迟或询问用户的简单操作。正是由于这个限制，它很少被使用。我们可以使用 <code>navigator.sendBeacon</code> 来发送网络请求。</p></li><li><p>document.readyState 是文档的当前状态，可以在 readystatechange</p><p>事件中跟踪状态更改：</p><ul><li><code>loading</code> —— 文档正在被加载。</li><li><code>interactive</code> —— 文档已被解析完成，与 <code>DOMContentLoaded</code> 几乎同时发生，但是在 <code>DOMContentLoaded</code> 之前发生。</li><li><code>complete</code> —— 文档和资源均已加载完成，与 <code>window.onload</code> 几乎同时发生，但是在 <code>window.onload</code> 之前发生。</li></ul></li></ul><h2 id="浏览器执行时间线" tabindex="-1"><a class="header-anchor" href="#浏览器执行时间线"><span>浏览器执行时间线</span></a></h2><p>根据js执行那一刻开始的执行顺序 浏览器加载的时间线</p><p>1.创建document对象，开始解析web页面 这时document.readyState 等于’loading’</p><p>2.遇到link标签（外部引用css）创建线程加载，并继续解析文档， 即异步加载</p><p>3.遇到非异步的script标签，浏览器加载并阻塞，等待js加载完成</p><p>4.遇到异步的script标签，浏览器创建线程加载，并继续解析文档。对于async属性的脚本，脚本加载完成后立即执行；对于defer属性的脚本，脚本等到页面加载完之后再执行（异步禁止使用document.write）</p><p>5.遇到img等，先正常解析dom结构，然后浏览器异步加载src，并继续解析文档</p><p>6.当文档解析完成之后（即renderTree构建完成之后， 此时还未下载完对吧），document.readyState=‘interative’。活跃的 动态的</p><p>7.文档解析完成后，所有设置有defer的脚本会按照顺序执行。</p><p>8.文档解析完成之后 页面会触发document上的一个DOMContentLoad事件</p><p>9.当页面所有部分都执行完成之后 document.readyState =‘complete’ 之后就可以执行window.onload事件了</p><h2 id="页面的重绘和回流以及优化" tabindex="-1"><a class="header-anchor" href="#页面的重绘和回流以及优化"><span><a href="https://segmentfault.com/a/1190000017329980#articleHeader11" target="_blank" rel="noopener noreferrer">页面的重绘和回流以及优化</a></span></a></h2><p>回流（reflow）：当 DOM 元素的内容，结构，位置或大小发生变化的时候，需要重新计算样式和渲染树。（计算属性、布局（盒子模型相关）的属性、窗口大小，） 　　重绘（repaint）：元素发生的改变，只影响了节点的一些样式，如：visibility、outline、背景颜、色等。只需要应用新样式绘制这个元素。 　　注：回流的开销大于重绘，一个节点的回流通常会导致它的子节点和统计节点的回流。</p><h3 id="触发回流的操作" tabindex="-1"><a class="header-anchor" href="#触发回流的操作"><span>触发回流的操作</span></a></h3><ul><li>添加或删除可见的 DOM 元素</li><li>元素的位置发生变化</li><li>元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）</li><li>内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代。</li><li>页面一开始渲染的时候（这肯定避免不了）</li><li>浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）</li></ul><p>现代的浏览器都是很聪明的，由于每次重排都会造成额外的计算消耗，因此大多数浏览器都会通过队列化修改并批量执行来优化重排过程。浏览器会将修改操作放入到队列里，直到过了一段时间或者操作达到了一个阈值，才清空队列。但是！当你获取布局信息的操作的时候，会强制队列刷新，比如当你访问以下属性或者使用以下方法：offsetLeft / offsetTop / offsetWidth / offsetHeight / scrollTop/Left/width/height / clientTop/Left/width/height 等。</p><h3 id="触发重绘的操作" tabindex="-1"><a class="header-anchor" href="#触发重绘的操作"><span>触发重绘的操作</span></a></h3><p>因为回流引起的重绘。</p><ul><li>颜色、背景、outline 相关的。</li></ul><ul><li>浏览器的自带优化：浏览器会维护一个队列，把所有的会引起回流或重绘的操作放到里面。等队列中的操作到了一定数量的时候或者到了一定时间间隔的时候就会一起执行这些操作，这样就让多次回流和重绘合并成一次。</li><li>开发者优化：尽量减少不必要的 DOM 操作修改，减少对一些 style 信息的请求。</li><li>避免逐个修改节点样式，尽量一次性修改。</li><li>将需要多次修改的 DOM 设置为 display:none；后修改，然后再显示（因为隐藏元素不在渲染树里面，所以修改隐藏元素不会触发回流和重绘）。</li><li>避免多次读取元素的某些属性。</li><li>将复杂的节点元素设置脱离文档流，降低回流成本。</li></ul>',46),o=[l];function c(i,u){return a(),s("div",null,o)}const d=n(e,[["render",c],["__file","浏览器基础.html.vue"]]),k=JSON.parse('{"path":"/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9F%BA%E7%A1%80.html","title":"浏览器基础","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"事件","slug":"事件","link":"#事件","children":[]},{"level":2,"title":"跨域","slug":"跨域","link":"#跨域","children":[{"level":3,"title":"JSONP","slug":"jsonp","link":"#jsonp","children":[]},{"level":3,"title":"XHR","slug":"xhr","link":"#xhr","children":[]}]},{"level":2,"title":"CSS和JS的加载与阻塞","slug":"css和js的加载与阻塞","link":"#css和js的加载与阻塞","children":[]},{"level":2,"title":"资源异步加载和预加载","slug":"资源异步加载和预加载","link":"#资源异步加载和预加载","children":[{"level":3,"title":"页面生命周期事件","slug":"页面生命周期事件","link":"#页面生命周期事件","children":[]}]},{"level":2,"title":"浏览器执行时间线","slug":"浏览器执行时间线","link":"#浏览器执行时间线","children":[]},{"level":2,"title":"页面的重绘和回流以及优化","slug":"页面的重绘和回流以及优化","link":"#页面的重绘和回流以及优化","children":[{"level":3,"title":"触发回流的操作","slug":"触发回流的操作","link":"#触发回流的操作","children":[]},{"level":3,"title":"触发重绘的操作","slug":"触发重绘的操作","link":"#触发重绘的操作","children":[]}]}],"git":{"updatedTime":1720052070000,"contributors":[{"name":"liujia6","email":"liujia11@qianxin.com","commits":1}]},"filePathRelative":"浏览器/浏览器基础.md"}');export{d as comp,k as data};
