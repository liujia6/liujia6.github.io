import{_ as s,c as n,o as a,a as e}from"./app-BrW2q7b4.js";const p={},t=e(`<h1 id="代码风格统一指南" tabindex="-1"><a class="header-anchor" href="#代码风格统一指南"><span><a href="https://www.kancloud.cn/cyyspring/webpack/2310916" target="_blank" rel="noopener noreferrer">代码风格统一指南</a></span></a></h1><p>[toc]</p><h2 id="eslint" tabindex="-1"><a class="header-anchor" href="#eslint"><span><a href="https://cn.eslint.org/docs/user-guide/configuring" target="_blank" rel="noopener noreferrer">ESLINT</a></span></a></h2><p>eslint 负责代码检查</p><h3 id="processor" tabindex="-1"><a class="header-anchor" href="#processor"><span>Processor</span></a></h3><p>要为特定类型的文件指定处理器，请使用 overrides 键和 processor 键的组合。例如，下面对 *.md 文件使用处理器 a-plugin/markdown。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;a-plugin&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-property property">&quot;overrides&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token string-property property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;*.md&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string-property property">&quot;processor&quot;</span><span class="token operator">:</span> <span class="token string">&quot;a-plugin/markdown&quot;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="plugins-插件配置" tabindex="-1"><a class="header-anchor" href="#plugins-插件配置"><span>Plugins 插件配置</span></a></h3><ul><li>官方的规则只能检查标准的 JavaScript 语法，如果你写的是 JSX 或者 Vue 单文件组件，ESLint 的规则就无法处理了。这时就通过安装 ESLint 的插件，指定一些特殊的规则进行检查，在.eslintrc 配置文件配置插件时，可以使用 plugins 来存放插件名字的列表，插件的名字可以省略**eslint-plugin-**前缀。</li><li>plugins 要引入对应的插件模块，然后配置相对应的规则 rules 才会生效。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev eslint<span class="token operator">-</span>plugin<span class="token operator">-</span>vue</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string-property property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">&quot;vue&quot;</span><span class="token punctuation">,</span>   <span class="token comment">// eslint-plugin-vue</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><a href="https://link.zhihu.com/?target=https%3A//github.com/babel/eslint-plugin-babel" target="_blank" rel="noopener noreferrer">eslint-plugin-babel</a>：和 babel-eslint 一起使用的一款插件。babel-eslint 将 eslint 应用于 babel 方面做的很好，但是它不能更改内置的规则来支持实验特性。eslint-plugin-babel 重新实现了这些有问题的规则，因此不会误报一些错误信息。</li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/benmosher/eslint-plugin-import" target="_blank" rel="noopener noreferrer">eslint-plugin-import</a>：该插件支持对 ES6+的 import/export 语法的校验，并防止一些文件路径拼写错误或者导入名称错误的情况。</li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/prettier/eslint-plugin-prettier" target="_blank" rel="noopener noreferrer">eslint-plugin-prettier</a>：该插件辅助 ESLint 与 Prettier 一些协作，并将 prettier 的解析作为 ESLint 的一部分，在最后输出给出修改意见，这样当使用 prettier 格式化代码的时候，依然能够遵循 ESLint 的规则。如果你禁用掉了所有和代码格式化相关的 Eslint 规则，该插件可以更好得工作。因此你可以用 eslint-config-prettier 禁用掉所有的格式化相关的规则(如果其他有效的 Eslint 规则与 prettier 在代码如何格式化的问题上不一致的时候，报错是在所难免的了)。</li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/typescript-eslint/typescript-eslint/tree/master/packages/eslint-plugin" target="_blank" rel="noopener noreferrer">@typescript-eslint/eslint-plugin</a>：typescript 辅助 ESLint 的插件。此插件为 ESLint 校验 typescript 使用，所以需要使用 <strong>@typescript-eslint/parser</strong>作为 ESLint 的解析器。</li></ul><h3 id="extends" tabindex="-1"><a class="header-anchor" href="#extends"><span>extends</span></a></h3><p>extends 是已经配置好的规则，后面的 extends 会覆盖前面的 extends。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 若项目中有多个子项目，且每个项目都会有.eslintrc，子项目会一直向上查找所有的.eslintrc，直到找到root:true的eslintrc，再将所有的.eslintrc合并</span></span>
<span class="line">  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 对环境定义的一组全局变量的预设</span></span>
<span class="line">  <span class="token comment">//详细看：https://eslint.org/docs/user-guide/configuring/language-options#specifying-environments</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 指定脚本的运行环境。每种环境都有一组特定的预定义全局变量</span></span>
<span class="line">  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 浏览器全局变量</span></span>
<span class="line">    <span class="token literal-property property">browser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// Node.js 全局变量和作用域</span></span>
<span class="line">    <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// CommonJS全局变量和CommonJS作用域</span></span>
<span class="line">    <span class="token literal-property property">commonjs</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 启用除模块之外的所有ECMAScript 6功能</span></span>
<span class="line">    <span class="token literal-property property">es6</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 将数据提供给每一个将被执行的规则</span></span>
<span class="line">  <span class="token literal-property property">settings</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">sharedData</span><span class="token operator">:</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 继承另一个配置文件的所有特性</span></span>
<span class="line">  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;eslint:recommended&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;plugin:@typescript-eslint/recommended&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 插件，向ESLint添加各种扩展，可以定义规则，环境或配置的第三方模块</span></span>
<span class="line">  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@typescript-eslint&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 全局变量</span></span>
<span class="line">  <span class="token literal-property property">globals</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// false、readable、readonly 这 3 个是等价的，表示变量只可读不可写；</span></span>
<span class="line">    <span class="token comment">// true、writeable、writable 这 3 个是等价的，表示变量可读可写；</span></span>
<span class="line">    <span class="token literal-property property">$</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">console</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 解释器</span></span>
<span class="line">  <span class="token comment">//  Processor</span></span>
<span class="line">  <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">&#39;@typescript-eslint/parser&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 解释器的配置</span></span>
<span class="line">  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 代码模块类型，可选script(默认)，module</span></span>
<span class="line">    <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 指定ECMAScript版本，默认为5</span></span>
<span class="line">    <span class="token literal-property property">ecamVersion</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 额外的语言特性，所有选项默认都是 false</span></span>
<span class="line">    <span class="token literal-property property">ecmaFeatures</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 是否允许 return 语句出现在 global 环境下</span></span>
<span class="line">      <span class="token literal-property property">globalReturn</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token comment">// 是否开启全局 script 模式</span></span>
<span class="line">      <span class="token literal-property property">impliedStrict</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token comment">// 是否启用 JSX</span></span>
<span class="line">      <span class="token literal-property property">jsx</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token comment">// 是否启用对实验性的objectRest/spreadProperties的支持</span></span>
<span class="line">      <span class="token literal-property property">experimentalObjectRestSpread</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 规则</span></span>
<span class="line">  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 禁止使用 alert</span></span>
<span class="line">    <span class="token string-property property">&#39;no-alert&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 逗号前面没有空格 后面有空格</span></span>
<span class="line">    <span class="token string-property property">&#39;comma-spacing&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">before</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">after</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="parse" tabindex="-1"><a class="header-anchor" href="#parse"><span>parse</span></a></h3><p>parse 是用来定义 eslint 所使用的解析器，默认是使用 Espree🔗, 解析器的作用是将代码 code 转化成为一种 AST 抽象语法树，eslint 中叫 ESTree,你可以理解为将 code 翻译为 ESLint 能听 👂 懂的话</p><p>而常用的解析器还有包括以下几种</p><p>Esprima: 上文提到 espree 就是基于 Esprima 改良的 Babel-esLint：一个对 Babel 解析器的包装，当你项目中使用了 babel，babel 的解析器会把你的 code 转换为 AST，然后该解析器会将其转换为 ESLint 能懂的 ESTree。这个目前我们应用的较多，目前也不再维护和更新，升级为@babel/eslint-parser @typescript-eslint/parser: 将 TypeScript 转换成与 estree 兼容的形式，以便在 ESLint 中使用。 对于 AST 的模拟生成，感兴趣的同学可以使用 astexplorer 在线尝试 上图我们通过上面这个配置例子，我们可以看到要么是 plugins:[]要么是 extends:[]，通过上图所示的配置二相对于配置一少了 parser, parserOptions 和 plugins 等的信息配置，但其实这两个配置最终实现的结果是一致的，这是因为配置二中定义的 extends：plugin:@typescript-eslint/recommended 会自动加载上叙提到的其他几个配置信息</p><p>总结：无论你使用那种解析器，本质是都是为了将 code 转换为 ESLint 能够阅读的语言 ESTree🔗</p><h3 id="parseoptions" tabindex="-1"><a class="header-anchor" href="#parseoptions"><span>parseOptions</span></a></h3><p>parserOptions 参数是用来控制 parse 解析器, 主要包括以下几个属性 👇，我们挑重点的讲讲</p><h2 id="editorconfig" tabindex="-1"><a class="header-anchor" href="#editorconfig"><span>EditorConfig</span></a></h2><p>首先，我们需要一个基本的规范，例如缩进，如何换行等等。它要适用于所有的团队，适用于所有的语言，适用于所有的编辑器。</p><p><code>EditorConfig</code> 能帮助我们实现这一点。它让所有的开发者在基本编码规范上保持一致。</p><p><strong>我们需要做的是：</strong></p><ol><li>安装 vscode <code>EditorConfig</code> 插件（有些编辑器默认支持 <code>EditorConfig</code> ，具体请看 这些编辑器不需要安装插件 (https://editorconfig.org/#pre-installed)）。</li><li>配置 <code>.editorconfig</code> 文件。</li></ol><h2 id="stylelint" tabindex="-1"><a class="header-anchor" href="#stylelint"><span>StyleLint</span></a></h2><p>在完成了以上的配置之后，我们已经可以对 <code>.js</code> 文件、<code>.vue</code> 文件的 <code>template</code> 和 <code>script</code> 模块实现代码规范和保存时自动格式化了。但是对于 <code>.css、.less、.scss</code> 文件和 <code>.vue</code> 文件的 <code>style</code> 模块，我们还需要做额外的配置，否则样式部分不规范，我们也是没法检测并自动修复的。</p><p><strong>我们需要做的是：</strong></p><ol><li><code>npm i stylelint stylelint-config-standard stylelint-scss</code>。</li><li>安装 <code>Stylelint插件</code>。</li><li>配置 <code>.stylelintrc</code> 文件。</li><li>配置 VSCode 的 <code>setting.json</code> 文件。</li></ol><h2 id="配置原则" tabindex="-1"><a class="header-anchor" href="#配置原则"><span>配置原则</span></a></h2><ul><li>eslint 主要负责语法部分的规则</li><li>code formatter 主要负责代码风格</li><li>code formatter 和 eslint 的规则冲突时，优先使用 formatter 的规则</li></ul><h2 id="vscode-插件" tabindex="-1"><a class="header-anchor" href="#vscode-插件"><span>VSCODE 插件</span></a></h2><p><img src="https://segmentfault.com/img/bVcVYLa" alt=""></p><p>该插件使得在编写代码时可以直接看到错误的地方提示</p><h2 id="项目配置" tabindex="-1"><a class="header-anchor" href="#项目配置"><span>项目配置</span></a></h2><p>我们采用 prettier 格式化代码格式，eslint 校验代码质量，lint-staged 保存代码时做 eslint 校验和热修复，husky 增强 commit 和 push 代码的质量，ts 也使用 eslint 做校验</p><h2 id="执行脚本" tabindex="-1"><a class="header-anchor" href="#执行脚本"><span><a href="https://www.lovejade.cn/zh/article/beautify-vue-by-eslint-and-prettier.html" target="_blank" rel="noopener noreferrer">执行脚本</a></span></a></h2><p>手动执行 cli 脚本 fix eslint 错误和使用 prettier 美化所有代码，同时可以利用借助 <a href="https://github.com/typicode/husky" target="_blank" rel="noopener noreferrer">husky</a> &amp; <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener noreferrer">lint-staged</a> 来实现在 git 暂存文件上运行 linters 和 git 提交前执行检查保证提交的代码风格正常</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&quot;eslint-fix&quot;</span><span class="token operator">:</span> <span class="token string">&quot;eslint src/**/**/*.vue --fix&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-property property">&quot;format-code&quot;</span><span class="token operator">:</span> <span class="token string">&quot;prettier-eslint --write \\&quot;src/**/*.js\\&quot; \\&quot;src/**/*.vue\\&quot;&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&quot;**/**.{js,json,pcss,md,vue}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token string">&quot;prettier --write&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;git add&quot;</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&quot;husky&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&quot;hooks&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token string-property property">&quot;pre-commit&quot;</span><span class="token operator">:</span> <span class="token string">&quot;yarn run precommit-msg &amp;&amp; lint-staged&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-property property">&quot;pre-push&quot;</span><span class="token operator">:</span> <span class="token string">&quot;yarn test&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="prettier-与-eslint-集成" tabindex="-1"><a class="header-anchor" href="#prettier-与-eslint-集成"><span><a href="https://prettier.io/docs/en/comparison.html" target="_blank" rel="noopener noreferrer">Prettier 与 Eslint 集成</a></span></a></h2><ul><li><p><a href="https://www.kancloud.cn/cyyspring/webpack/2015917" target="_blank" rel="noopener noreferrer">如何解决 eslint 和 prettier 的冲突</a></p></li><li><p><a href="https://prettier.io/docs/en/integrating-with-linters.html" target="_blank" rel="noopener noreferrer">prettier 与 lint 集成</a></p></li><li><p>两者的差异</p><ul><li>eslint 是代码质量检查，formatter 是代码格式优化，两种是不同的分工， ，由于 eslint 包含部分 formatter 职责，eslint 使用命令行 fix 修复，formatter 使用 vscode 快捷键修复，由于两者都可以自动在保存都时候修复，如果两者在保存都时候都修复，会引起冲突</li><li>eslint 的优先级高于 formatter，如果要执行，需要先 formatter 再使用 eslint 保存</li></ul></li><li><p>使用 eslint plugin 处理冲突相关库</p><ul><li>eslint-config-pretty <ul><li>禁用所有与 pretty 冲突的 eslint 配置</li></ul></li><li>eslint-plugin-pretty <ul><li>将 pretty 的错误集成到 eslint，实现 pretty 作为 eslint 错误报错</li></ul></li><li><a href="https://prettier.io/docs/en/cli.html" target="_blank" rel="noopener noreferrer">prettier cli</a><ul><li><code>prettier --write .</code> 执行 prettier 命令修复项目，类似于 <code>eslint --fix</code></li></ul></li></ul></li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">yarn add --dev eslint-plugin-prettier eslint-config-prettier prettier-eslint-cli</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">&quot;eslintConfig&quot;: {</span>
<span class="line">  &quot;root&quot;: true,</span>
<span class="line">  &quot;extends&quot;: [</span>
<span class="line">    &quot;plugin:vue/essential&quot;,</span>
<span class="line">    &quot;plugin:prettier/recommended&quot;,</span>
<span class="line">    &quot;eslint:recommended&quot;</span>
<span class="line">  ]</span>
<span class="line">},</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="prettier-配置" tabindex="-1"><a class="header-anchor" href="#prettier-配置"><span>prettier 配置</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">printWidth</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token comment">// 每行代码长度（默认80）</span></span>
<span class="line">  <span class="token literal-property property">tabWidth</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 每个tab相当于多少个空格（默认2）</span></span>
<span class="line">  <span class="token literal-property property">useTabs</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否使用tab进行缩进（默认false）</span></span>
<span class="line">  <span class="token literal-property property">singleQuote</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 使用单引号（默认false）</span></span>
<span class="line">  <span class="token literal-property property">semi</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 声明结尾使用分号(默认true)</span></span>
<span class="line">  <span class="token literal-property property">trailingComma</span><span class="token operator">:</span> <span class="token string">&#39;es5&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 多行使用拖尾逗号（默认none）</span></span>
<span class="line">  <span class="token literal-property property">bracketSpacing</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 对象字面量的大括号间使用空格（默认true）</span></span>
<span class="line">  <span class="token literal-property property">jsxBracketSameLine</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 多行JSX中的&gt;放置在最后一行的结尾，而不是另起一行（默认false）</span></span>
<span class="line">  <span class="token literal-property property">arrowParens</span><span class="token operator">:</span> <span class="token string">&#39;avoid&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 只有一个参数的箭头函数的参数是否带圆括号（默认avoid）</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vscode-配置" tabindex="-1"><a class="header-anchor" href="#vscode-配置"><span>VSCODE 配置</span></a></h2><p>安装插件：ESlint，Prettier，VS Code 插件配置统一在 preference → setting → user setting 设置 (快捷键： Command + ,)，即可实现保存时自动格式化：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;prettier.eslintIntegration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;eslint.autoFixOnSave&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;editor.formatOnSave&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h2><ul><li><a href="https://juejin.cn/post/7028754877312401444" target="_blank" rel="noopener noreferrer">深入浅出之 ESLint</a></li><li><a href="https://cn.eslint.org/docs/rules/" target="_blank" rel="noopener noreferrer">ESlint 规则列表</a></li><li><a href="https://www.cnblogs.com/zhangycun/p/10762534.html" target="_blank" rel="noopener noreferrer">基本配置</a></li><li><a href="https://cloud.tencent.com/developer/article/1896199" target="_blank" rel="noopener noreferrer">使用这些配置规范并格式化你的代码</a></li></ul>`,51),l=[t];function i(r,o){return a(),n("div",null,l)}const u=s(p,[["render",i],["__file","代码风格统一指南.html.vue"]]),d=JSON.parse('{"path":"/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E7%BB%9F%E4%B8%80%E6%8C%87%E5%8D%97.html","title":"代码风格统一指南","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"ESLINT","slug":"eslint","link":"#eslint","children":[{"level":3,"title":"Processor","slug":"processor","link":"#processor","children":[]},{"level":3,"title":"Plugins 插件配置","slug":"plugins-插件配置","link":"#plugins-插件配置","children":[]},{"level":3,"title":"extends","slug":"extends","link":"#extends","children":[]},{"level":3,"title":"parse","slug":"parse","link":"#parse","children":[]},{"level":3,"title":"parseOptions","slug":"parseoptions","link":"#parseoptions","children":[]}]},{"level":2,"title":"EditorConfig","slug":"editorconfig","link":"#editorconfig","children":[]},{"level":2,"title":"StyleLint","slug":"stylelint","link":"#stylelint","children":[]},{"level":2,"title":"配置原则","slug":"配置原则","link":"#配置原则","children":[]},{"level":2,"title":"VSCODE 插件","slug":"vscode-插件","link":"#vscode-插件","children":[]},{"level":2,"title":"项目配置","slug":"项目配置","link":"#项目配置","children":[]},{"level":2,"title":"执行脚本","slug":"执行脚本","link":"#执行脚本","children":[]},{"level":2,"title":"Prettier 与 Eslint 集成","slug":"prettier-与-eslint-集成","link":"#prettier-与-eslint-集成","children":[{"level":3,"title":"prettier 配置","slug":"prettier-配置","link":"#prettier-配置","children":[]}]},{"level":2,"title":"VSCODE 配置","slug":"vscode-配置","link":"#vscode-配置","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"updatedTime":1717649313000,"contributors":[{"name":"Liu Jia","email":"41950983+liujia6@users.noreply.github.com","commits":1}]},"filePathRelative":"工程化/代码风格统一指南.md"}');export{u as comp,d as data};
